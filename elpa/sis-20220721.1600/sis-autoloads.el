;;; sis-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))



;;; Generated autoloads from sis.el

(defvar sis-log-mode nil "\
Non-nil if Sis-Log mode is enabled.
See the `sis-log-mode' command
for a description of this minor mode.")
(custom-autoload 'sis-log-mode "sis" nil)
(autoload 'sis-log-mode "sis" "\
Log the execution of this package.

This is a global minor mode.  If called interactively, toggle the
`Sis-Log mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='sis-log-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'sis-get "sis" "\
Get input source." t)
(autoload 'sis-set-english "sis" "\
Command to set input source to `english'." t)
(autoload 'sis-set-other "sis" "\
Command to set input source to `other'." t)
(autoload 'sis-switch "sis" "\
Switch input source between english and other." t)
(autoload 'sis-ism-lazyman-config "sis" "\
Config ism for lazy man.

Run after the modes may have no effect.
ENGLISH-SOURCE: ENGLISH input source, nil means default,
                ignored by ISM-TYPE of 'fcitx, 'fcitx5, 'native, 'w32.
OTHER-SOURCE: OTHER language input source, nil means default,
              ignored by ISM-TYPE of 'fcitx, 'fcitx5, 'w32.
TYPE: TYPE can be 'native, 'w32, 'emp, 'macism, 'im-select, 'fcitx, 'fcitx5, 'ibus.
      nil TYPE fits both 'emp and 'macism.

(fn ENGLISH-SOURCE OTHER-SOURCE &optional ISM-TYPE)")
(defvar sis-auto-refresh-mode nil "\
Non-nil if Sis-Auto-Refresh mode is enabled.
See the `sis-auto-refresh-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `sis-auto-refresh-mode'.")
(custom-autoload 'sis-auto-refresh-mode "sis" nil)
(autoload 'sis-auto-refresh-mode "sis" "\
Automaticly refresh input source.

This is a global minor mode.  If called interactively, toggle the
`Sis-Auto-Refresh mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='sis-auto-refresh-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar sis-global-cursor-color-mode nil "\
Non-nil if Sis-Global-Cursor-Color mode is enabled.
See the `sis-global-cursor-color-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `sis-global-cursor-color-mode'.")
(custom-autoload 'sis-global-cursor-color-mode "sis" nil)
(autoload 'sis-global-cursor-color-mode "sis" "\
Automaticly change cursor color according to input source.

This is a global minor mode.  If called interactively, toggle the
`Sis-Global-Cursor-Color mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='sis-global-cursor-color-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'sis-prefix-override-buffer-disable "sis" "\
Disable prefix override in current buffer." t)
(autoload 'sis-prefix-override-buffer-enable "sis" "\
Disable prefix override in current buffer." t)
(defvar sis-global-respect-mode nil "\
Non-nil if Sis-Global-Respect mode is enabled.
See the `sis-global-respect-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `sis-global-respect-mode'.")
(custom-autoload 'sis-global-respect-mode "sis" nil)
(autoload 'sis-global-respect-mode "sis" "\
Respect buffer/mode by proper input source.

- Respect start: start this mode with specific input source.
- Respect ~evil~: switch to English when leaving ~evil~ ~insert~ mode.
- Respect prefix key: switch to English for ~C-c~/ ~C-x~/ ~C-h~.
- Respect buffer: restore buffer input source when it regain focus.

This is a global minor mode.  If called interactively, toggle the
`Sis-Global-Respect mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable
the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='sis-global-respect-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(autoload 'sis-context-mode "sis" "\
Switch input source smartly according to context.

This is a minor mode.  If called interactively, toggle the
`Sis-Context mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sis-context-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'sis-global-context-mode 'globalized-minor-mode t)
(defvar sis-global-context-mode nil "\
Non-nil if Sis-Global-Context mode is enabled.
See the `sis-global-context-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `sis-global-context-mode'.")
(custom-autoload 'sis-global-context-mode "sis" nil)
(autoload 'sis-global-context-mode "sis" "\
Toggle Sis-Context mode in all buffers.
With prefix ARG, enable Sis-Global-Context mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Sis-Context mode is enabled in all buffers where `sis-context-mode' would do
it.

See `sis-context-mode' for more information on Sis-Context mode.

(fn &optional ARG)" t)
(autoload 'sis-context "sis" "\
Follow the context to switch input source.")
(autoload 'sis-inline-mode "sis" "\
English overlay mode for mixed language editing.

This is a minor mode.  If called interactively, toggle the
`Sis-Inline mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `sis-inline-mode'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(put 'sis-global-inline-mode 'globalized-minor-mode t)
(defvar sis-global-inline-mode nil "\
Non-nil if Sis-Global-Inline mode is enabled.
See the `sis-global-inline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `sis-global-inline-mode'.")
(custom-autoload 'sis-global-inline-mode "sis" nil)
(autoload 'sis-global-inline-mode "sis" "\
Toggle Sis-Inline mode in all buffers.
With prefix ARG, enable Sis-Global-Inline mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Sis-Inline mode is enabled in all buffers where `sis-inline-mode' would do it.

See `sis-inline-mode' for more information on Sis-Inline mode.

(fn &optional ARG)" t)
(register-definition-prefixes "sis" '("sis-"))

;;; End of scraped data

(provide 'sis-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; sis-autoloads.el ends here
