;;; opencc-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))



;;; Generated autoloads from opencc.el

(autoload 'opencc-string "opencc" "\
按配置文件 CONFIG 转换字符串 STRING.

如果你没有自己的配置文件，请到在 `opencc-configuration-files' 中选择一个.

(fn CONFIG STRING)")
(autoload 'opencc-region "opencc" "\
按配置文件 CONFIG 转换 START 和 END 之间的文字.

如果你没有自己的配置文件，请到在 `opencc-configuration-files' 中选择一个.

(fn CONFIG START END)")
(autoload 'opencc-message "opencc" "\
一个交互命令，使用 minibuffer 和 echo area 读取输入和显示结果." t)
(autoload 'opencc-replace-at-point "opencc" "\
一个交互命令，转化并替换光标下的文字." t)
(autoload 'opencc-print-buffer "opencc" "\
一个交互命令，转化当前 Buffer 中的内容，在 *OpenCC Output* Buffer 中显示结果.

(fn CONFIG &optional INPUT-BUFFER OUTPUT-BUFFER)" t)
(defvar opencc-insert-mode nil "\
Non-nil if Opencc-Insert mode is enabled.
See the `opencc-insert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `opencc-insert-mode'.")
(custom-autoload 'opencc-insert-mode "opencc" nil)
(autoload 'opencc-insert-mode "opencc" "\
按照 `opencc-insert-mode-config' 转换并替换每一个输入的汉字.

This is a global minor mode.  If called interactively, toggle the
`Opencc-Insert mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='opencc-insert-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(defvar opencc-isearch-mode nil "\
Non-nil if Opencc-Isearch mode is enabled.
See the `opencc-isearch-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `opencc-isearch-mode'.")
(custom-autoload 'opencc-isearch-mode "opencc" nil)
(autoload 'opencc-isearch-mode "opencc" "\
输入简体搜索繁体（可通过 `opencc-isearch-mode-config' 调整转换的方向）.

This is a global minor mode.  If called interactively, toggle the
`Opencc-Isearch mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable
the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='opencc-isearch-mode)'.

The mode's hook is called both when the mode is enabled and when
it is disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "opencc" '("multi-isearch-search-fun@support-opencc" "opencc-"))

;;; End of scraped data

(provide 'opencc-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; opencc-autoloads.el ends here
