;;; epkg-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (file-name-directory load-file-name)) (car load-path)))



;;; Generated autoloads from epkg.el

(autoload 'epkg-update "epkg" "\
Update the Epkg database.

In the `epkg-repository', pull the master branch and reload
the Epkg database.  Return a connection to the updated Epkg
database." t)
(register-definition-prefixes "epkg" '("epkg"))


;;; Generated autoloads from epkg-desc.el

(autoload 'epkg-describe-package "epkg-desc" "\
Display the full documentation of PACKAGE.

(fn PACKAGE)" t)
(register-definition-prefixes "epkg-desc" '("epkg-"))


;;; Generated autoloads from epkg-elpa.el

(register-definition-prefixes "epkg-elpa" '("epkg-"))


;;; Generated autoloads from epkg-list.el

(autoload 'epkg-list-packages "epkg-list" "\
Display a list of packages.

Respect option `epkg-list-exclude-types' unless a prefix argument
is used.

(fn &optional ALL)" t)
(autoload 'epkg-list-matching-packages "epkg-list" "\
Display a list of packages whose name or summary matches PATTERN.
PATTERN should be a string with SQLite LIKE pattern syntax.
If it does not contain any wildcards ('%' or '_'), it will be
surrounded by '%' automatically.

Respect option `epkg-list-exclude-types' unless a prefix argument
is used.

(fn PATTERN &optional ALL)" t)
(autoload 'epkg-list-keyworded-packages "epkg-list" "\
Display a list of packages that have KEYWORD set.

Only keywords that are members of `finder-known-keywords' are
offered as completion candidates, but you can also enter other
keywords.

Respect option `epkg-list-exclude-types' unless a prefix argument
is used.

(fn KEYWORD &optional ALL)" t)
(autoload 'epkg-list-packages-by-author "epkg-list" "\
Display a list of packages authored or maintained by AUTHOR.

AUTHOR may be a name or an email address.  Packages whose
Author(s) or Maintainer(s) header keywords contain that author
are listed.

Respect option `epkg-list-exclude-types' unless a prefix argument
is used.

(fn AUTHOR &optional ALL)" t)
(autoload 'epkg-list-packages-of-type "epkg-list" "\
Display a list of all packages of a certain type.

To list all packages of a certain type as well as its subtypes
use `TYPE*' instead of just `TYPE'.

(fn TYPE)" t)
(register-definition-prefixes "epkg-list" '("epkg-"))


;;; Generated autoloads from epkg-org.el

(register-definition-prefixes "epkg-org" '("epkg-" "melpa-org-link"))


;;; Generated autoloads from epkg-schemata.el

(register-definition-prefixes "epkg-schemata" '("epkg--db-table-schemata"))


;;; Generated autoloads from epkg-utils.el

(autoload 'epkg-find-file "epkg-utils" "\
Visit a file in a submodule of `epkg-repository'.

(fn FILENAME &optional WILDCARDS)" t)
(function-put 'epkg-find-file 'interactive-only 'find-file)
(autoload 'epkg-find-file-other-window "epkg-utils" "\
Visit a file in a submodule of `epkg-repository' in another window.

(fn FILENAME &optional WILDCARDS)" t)
(function-put 'epkg-find-file-other-window 'interactive-only 'find-file-other-window)
(autoload 'epkg-find-file-other-frame "epkg-utils" "\
Visit a file in a submodule of `epkg-repository' in another frame.

(fn FILENAME &optional WILDCARDS)" t)
(function-put 'epkg-find-file-other-frame 'interactive-only 'find-file-other-frame)
(register-definition-prefixes "epkg-utils" '("epkg-find-file-" "with-epkg-repository"))

;;; End of scraped data

(provide 'epkg-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; epkg-autoloads.el ends here
