# -*- mode: org; coding: utf-8; -*-
:PROPERTIES: header-args:emacs-lisp :tangle
:ID:       784F9397-6131-4F5B-B2BE-6A4C87A9C36E
:END:
#+title: early-init.el config
#+auto_tangle: t

sibling file: [[file:init.org][init.el config]]

* early-init

每个代码块都需要单独声明才能 tangle 成功

** File header

#+begin_src emacs-lisp :tangle yes
  ;; -*- coding: utf-8; lexical-binding: t; -*-
  ;; -*- origami-fold-style: triple-braces -*-
  ;;; early-init.el --- Emacs 27+ pre-initialisation config
  ;; Code loaded before the package system and GUI is initialized.

  ;; Date: 2023-01-06 07:23:09 +0800
#+end_src

** Garbage Collection

#+begin_src emacs-lisp :tangle no
  ;; Increase the GC threshold for faster startup
  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 500 1024 1024)) ;; 500 MiB
#+end_src

#+begin_src emacs-lisp :tangle no
  ;; Don't collect garbage when init
  (setq gc-cons-threshold most-positive-fixnum) ;; 2^61 on my device
#+end_src

#+begin_src emacs-lisp :tangle no
  (setq gc-cons-percentage 0.6)
#+end_src


** Profile

#+begin_src emacs-lisp :tangle yes
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
#+end_src

#+begin_src emacs-lisp
  ;; profile
  ;; {{{
  ;; M-x profiler-start
  ;; M-x profiler-report
  ;; profiler-report-render-calltree
  (defconst my/before-load-init-time (current-time))

  ;;;###autoload
  (defun my/load-init-time ()
    "Loading time of user init files including time for `after-init-hook'."
    (let ((time1 (float-time
                  (time-subtract after-init-time my/before-load-init-time)))
          (time2 (float-time
                  (time-subtract (current-time) my/before-load-init-time))))
      (message (concat "Loading init files: %.0f [msec], "
                       "of which %.f [msec] for `after-init-hook'.")
               (* 1000 time1) (* 1000 (- time2 time1)))))
  (add-hook 'after-init-hook #'my/load-init-time t)

  (defvar my/tick-previous-time my/before-load-init-time)

  ;;;###autoload
  (defun my/tick-init-time (msg)
    "Tick boot sequence at loading MSG."
    (when my/loading-profile-p
      (let ((ctime (current-time)))
        (message "---- %5.2f[ms] %s"
                 (* 1000 (float-time
                          (time-subtract ctime my/tick-previous-time)))
                 msg)
        (setq my/tick-previous-time ctime))))

  (defun my/emacs-init-time ()
    "Emacs booting time in msec."
    (interactive)
    (message "Emacs booting time: %.0f [msec] = `emacs-init-time'."
             (* 1000
                (float-time (time-subtract
                             after-init-time
                             before-init-time)))))

  (add-hook 'after-init-hook #'my/emacs-init-time)
  ;; }}}
#+end_src

** Emacs.app

#+begin_src emacs-lisp
  ;; Emacs
  ;; {{{
  (let* ((emacs-Res "/Applications/Emacs.app/Contents/Resources/")
         (emacs-git "~/Documents/emacs/") ; emacs-git /src/ source
         (emacs-src (if (file-exists-p (concat emacs-Res "src/"))
                        emacs-Res
                      emacs-git)))
    (setq source-directory emacs-src)
    (setq find-function-C-source-directory (concat emacs-src "src/")))
  ;; }}}
#+end_src

** Startup

#+begin_src emacs-lisp :tangle yes
  ;; startup
  ;; {{{
  (setq initial-major-mode 'fundamental-mode)
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message (user-login-name))
  ;; }}}
#+end_src

** OS & GUI detection

#+begin_src emacs-lisp :tangle no
  (defconst *is-mac* (eq system-type 'darwin))
  (defconst *is-linux* (eq system-type 'gnu/linux))
  (defconst *is-windows* (or (eq system-type 'ms-dos) (eq system-type 'windows-nt)))
#+end_src


** Backtrace & debug: warning error

#+begin_src emacs-lisp :tangle yes
  ;; debug warning and error
  ;; {{{
  ;; debug
  (setq debug-on-error t)
  ;; warning
  (setq byte-compile-warnings nil)
  (setq native-comp-async-report-warnings-errors nil)
  ;; (add-to-list 'warning-suppress-log-types '((defvaralias))) ; FIXME
  ;; error
  ;; }}}
#+end_src

** Confirm before quit

#+begin_src emacs-lisp :tangle yes
  (setq confirm-kill-emacs (lambda (prompt) (y-or-n-p-with-timeout "确认退出？" 10 "y")))
  ;; (setq confirm-kill-emacs 'yes-or-no-p)
  (setq use-short-answers t) ;; use y/n instead of yes/no
#+end_src

** custom-file

#+begin_src emacs-lisp :tangle yes
  ;; custome-file
  ;; {{{
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))
  (when (file-exists-p custom-file)
    (load custom-file))
  ;; }}}
#+end_src


** encoding and locale

#+begin_src emacs-lisp :tangle yes
;; encoding: prefer UTF-8 everywhere
;; {{{
;; [hick/emacs-chinese: Emacs 相关中文问题以及解决方案](https://github.com/hick/emacs-chinese)
(set-charset-priority 'unicode)
(set-language-environment               "UTF-8")     ;; System default coding
(prefer-coding-system                   'utf-8)      ;; prefer
(set-buffer-file-coding-system          'utf-8-unix) ;;
(set-charset-priority                   'unicode)    ;;
(set-clipboard-coding-system            'utf-8)      ;; clipboard
(set-default-coding-systems             'utf-8)      ;; buffer/file: 打开文件时的默认编码
(set-file-name-coding-system            'utf-8-unix) ;; unix/linux/macos
(set-keyboard-coding-system             'utf-8-unix) ;; keyboard
(set-next-selection-coding-system       'utf-8-unix) ;; selection
(set-selection-coding-system            'utf-8)      ;; selection
(set-terminal-coding-system             'utf-8-unix) ;; terminal
(setq coding-system-for-read            'utf-8)      ;;
(setq default-buffer-file-coding-system 'utf-8)      ;;
(setq locale-coding-system              'utf-8)      ;; local
;; }}}

;; locale
;; {{{
(setq system-time-locale "C")
;; }}}
#+end_src

** Version Control & symlink

#+begin_src emacs-lisp :tangle yes
  (setq vc-follow-symlinks t)
#+end_src


** keymap & keybinding

*** unset default keymap

#+begin_src emacs-lisp :tangle no
;;   \C-v   scroll up
;;   \C-t   transpose-chars
(dolist (key '("\C-v" "\C-t"))
    (global-unset-key key))
#+end_src

*** remap Physical keys

#+begin_src emacs-lisp :tangle yes
  ;; keymap
  ;; {{{
  ;; bind: 全局按键/快捷键 (Global key bindings)
  (setq echo-keystrokes 0.1)
  (setq mac-command-modifier       'super   ;; s: super(Command/Win)
        mac-control-modifier       'control ;; C: Ctrl
        mac-option-modifier        'meta    ;; M: Meta (Option/Alt)
        mac-right-command-modifier 'hyper   ;; H: hyper (reachable for thumb)
        mac-right-option-modifier  'none    ;; Leave Option to macOS
        mac-right-control-modifier 'control ;; C: Ctrl
        ;; mac-function-modifier            ;; Function Key
        ;;                                  ;; A: Alt (redundant and not used)
        ;;                                  ;; H: Hyper
        ;;                                  ;; S: Shift
        )

  ;; }}}
#+end_src

*** basic keybinding

| Emacs 命令              | Emacs 键  | 重映射       | 物理按键             | 备注 |
|-------------------------+----------+--------------+----------------------+------|
| mark-whole-buffer       |          | s-a          | Command+A            | 全选 |
| kill-ring-save          | M-w      | s-c          | Command+C            | 复制 |
| save-buffers-kill-emacs |          | s-q          | Command+Q            | 退出 |
| yank                    | C-y      | s-v          | Command+V            | 粘贴 |
| delete-frame            |          | s-w          | Command+W            |      |
| save-buffer             | C-x C-s  | s-s          | Command+S            | 保存 |
| kill-region             | C-w      | s-x          | Command+X            | 剪切 |
| undo                    | C-_      | s-z          | Command+Z            | 撤销 |
| undo-redo               | C-M-_    | s-Z          | Command+Shift+Z      | 重做 |
| toggle-frame-maximized  |          | S-s-<return> | Command+Shift+Return |      |
| toggle-frame-fullscreen |          | C-s-f        | Command+Ctrl+F       | 全屏 |
| restart-emacs           |          | H-q          | (Right)Command+Q     | 重启 |


#+begin_src emacs-lisp :tangle yes
;; basic keybinding
;; {{{
(keymap-global-set "s-a" #'mark-whole-buffer)
(keymap-global-set "s-c" #'kill-ring-save)          ;; M-w     copy       复制
(keymap-global-set "s-q" #'save-buffers-kill-emacs) ;;         copy       复制
(keymap-global-set "s-v" #'yank)                    ;; C-y     paste/yank 粘贴
(keymap-global-set "s-w" #'delete-frame)            ;;
(keymap-global-set "s-s" #'save-buffer)             ;; C-x C-s save       保存
(keymap-global-set "s-x" #'kill-region)             ;; C-w     cut        剪切
(keymap-global-set "s-z" #'undo)                    ;; C-_     undo       撤销
(keymap-global-set "s-Z" #'undo-redo)               ;; C-M-_   undo-redo  重做
;;
(keymap-global-set     "S-s-<return>" #'toggle-frame-maximized)
(keymap-global-set     "C-s-f"        #'toggle-frame-fullscreen) ;; macOS
(keymap-set global-map "H-q"          #'restart-emacs)
(keymap-global-set     "H-x"          #'execute-extended-command)
;; }}}
#+end_src

*** repeat-mode

#+begin_src emacs-lisp
  ;; key
  ;; {{{

  ;; repeat-mode
  (setq repeat-mode t)
  (defvar org-mode-navigation-repeat-map
    "Keymap to repeat `org-mode' navigation key sequences.  Used in `repeat-mode'."
    ;; org-mode C-c C-n 或 C-p 或 C-f 或 C-b 或 C-i 或 C-u
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-n") #'org-next-visible-heading)
      (define-key map (kbd "C-p") #'org-previous-visible-heading)
      (define-key map (kbd "C-f") #'org-forward-heading-same-level)
      (define-key map (kbd "C-b") #'org-backward-heading-same-level)
      (define-key map (kbd "C-u") #'org-up-heading)
      (define-key map (kbd "C-i") #'org-down-heading)
      (--each '(
                org-next-visible-heading
                org-previous-visible-heading
                org-forward-heading-same-level
                org-backward-heading-same-level
                org-up-heading org-down-heading)
              (put it 'repeat-map 'org-mode-navigation-repeat-map)
              )
      map)
    )
  ;; }}}
#+end_src

*** prefix-command

#+begin_src emacs-lisp :tangle no
(define-prefix-command 'hyper-c-map)
(keymap-global-set "H-c H-f" #'find-file)
#+end_src

** UI

#+begin_src emacs-lisp :tangle yes
  ;; UI
  ;; {{{
  ;; (push '(fullscreen . maximized) default-frame-alist)
  (setq default-frame-alist
        '((height . 46)
          (width . 97)
          (left . 700)
          (top . 20)
          ;; (vertical-scroll-bars . nil)
          ;; (horizontal-scroll-bars . nil)
          ;; (tool-bar-lines . 0)
          ))
  (setq inhibit-splash-screen t)        ;; 禁用欢迎界面
  (tool-bar-mode -1)          ;; 工具栏
  (set-fringe-mode 10)        ;;
  (global-visual-line-mode 1) ;;
  (setq visible-bell t)       ;; 关闭提示声音
  (context-menu-mode 1)       ;; 鼠标右键菜单
  (setq context-menu-functions
        '(context-menu-ffap
          occur-context-menu
          context-menu-region
          context-menu-undo
          context-menu-minor
          context-menu-local
          ))
  (setq use-dialog-box nil)   ;; 鼠标点击不触发弹窗
  ;; }}}
#+end_src


** user name & email

#+begin_src emacs-lisp :tangle yes
  ;; email
  ;; {{{
  (setq user-mail-address "suliveevil@qq.com")
  (setq user-full-name "suliveevil")
  ;; }}}
#+end_src

** package & package mirror

#+begin_src emacs-lisp :tangle yes
  ;; package: package-enable-at-startup is before init but after early-init
  ;; {{{
  (setq package-enable-at-startup nil) ;; don't enable at startup, pair with (package-initialize)
  ;; }}}

  ;; package
  ;; {{{
  (setq package-archives
        '(
          ("elpa"                . "https://elpa.gnu.org/packages/")
          ("melpa"               . "http://melpa.org/packages/")
          ;; ("elpa-devel"          . "https://elpa.gnu.org/devel/")
          ;; ("jcs-elpa"            . "https://jcs-emacs.github.io/jcs-elpa/packages/")
          ;; ("gnu"                 . "http://elpa.gnu.org/packages/")
          ;; ("gnu-devel"           . "https://elpa.gnu.org/devel/")
          ;; ("gnu-tsinghua"        . "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
          ;; ("gnu-ustc"            . "http://mirrors.ustc.edu.cn/elpa/gnu/")
          ;; ("melpa-stable"        . "https://stable.melpa.org/packages/")
          ;; ("melpa-tsinghua"      . "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
          ;; ("melpa-ustc"          . "http://mirrors.ustc.edu.cn/elpa/melpa/")
          ;; ("nongnu"              . "https://elpa.nongnu.org/nongnu/")
          ;; ("nongnu-devel"        . "https://elpa.nongnu.org/devel/")
          ;; ("nongnu-ustc"         . "http://mirrors.ustc.edu.cn/elpa/nongnu/")
          ))
  ;; (setq package-archive-priorities
  ;; '(
  ;;         ("elpa"                       . 22)
  ;;         ("nongnu"                     . 21)
  ;;         ("gnu"                        . 17)
  ;;         ("gnu-devel"                  . 18)
  ;;         ("gnu-tsinghua"               . 50)
  ;;         ("gnu-ustc"                   . 49)
  ;;         ("melpa"                      . 51)
  ;;         ("melpa-stable"               . 14)
  ;;         ("melpa-tsinghua"             . 48)
  ;;         ("melpa-ustc"                 . 47)
  ;;         ("nongnu"                     . 10)
  ;;         ("nongnu-devel"               . 11)
  ;;         ("nongnu-ustc"                . 46)
  ;;         ("jcs-elpa"                   . 7)
  ;;   )
  ;; )
  ;; }}}
#+end_src

** package load-path

#+begin_src emacs-lisp :tangle yes
  ;; package: add other source packages to load path
  ;; {{{
  (require 'cl-lib)
  (defun add-subdirs-to-load-path (search-dir)
    (interactive)
    (let* ((dir (file-name-as-directory search-dir)))
      (dolist (subdir
               ;; 过滤出不必要的目录，提升 Emacs 启动速度
               (cl-remove-if
                #'(lambda (subdir)
                    (or
                     ;; 不是目录的文件都移除
                     (not (file-directory-p (concat dir subdir)))
                     ;; 父目录、 语言相关和版本控制目录都移除
                     (member subdir '("." ".."
                                      "dist" "node_modules" "__pycache__"
                                      "RCS" "CVS" "rcs" "cvs" ".git" ".github"))))
                (directory-files dir)))
        (let ((subdir-path (concat dir (file-name-as-directory subdir))))
          ;; 目录下有 .el .so .dll 文件的路径才添加到 `load-path' 中，提升 Emacs 启动速度
          (when (cl-some #'(lambda (subdir-file)
                             (and (file-regular-p (concat subdir-path subdir-file))
                                  ;; .so .dll 文件指非 Elisp 语言编写的 Emacs 动态库
                                  (member (file-name-extension subdir-file) '("el" "so" "dll"))))
                         (directory-files subdir-path))

            ;; 注意：`add-to-list' 函数的第三个参数必须为 t ，表示加到列表末尾
            ;; 这样 Emacs 会从父目录到子目录的顺序搜索 Elisp 插件，顺序反过来会导致 Emacs 无法正常启动
            (add-to-list 'load-path subdir-path t))

          ;; 继续递归搜索子目录
          (add-subdirs-to-load-path subdir-path)))))

  (add-subdirs-to-load-path "~/.config/emacs/lib")
  ;; }}}
#+end_src

** file load-path

#+begin_src emacs-lisp :tangle no
  ;; file load-path
  (defun add-files-to-load-path (folder)
    "Add FOLDER and its subdirectories to `load-path'."
    (let ((base folder))
      (unless (member base load-path)
        (add-to-list 'load-path base))
      (dolist (f (directory-files base))
        (let ((name (concat base "/" f)))
          (when (and (file-directory-p name)
                     (not (equal f ".."))
                     (not (equal f ".")))
            (unless (member base load-path)
              (add-to-list 'load-path name)))))))

  ;; (add-files-to-load-path (expand-file-name "site-lisp" user-emacs-directory))
  ;; }}}
#+end_src


** Emacs Server and Client

#+begin_src emacs-lisp :tangle no

#+end_src

* File End

#+begin_src emacs-lisp :tangle yes
  ;;; early-init.el ends here
#+end_src

* misc

[[https://emacs-china.org/t/emacs-q-emacs/18380][速度突破裸配置／emacs -Q 的极限：emacs 启动时间只够你眨眼？ - Emacs China]]

