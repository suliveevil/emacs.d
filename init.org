# -*- mode: org; coding: utf-8; -*-
:PROPERTIES: header-args:emacs-lisp :tangle
:ID:       20BF3D68-6887-4D5C-878D-17C2AD5F97B8
:END:
#+title: init.el config
#+auto_tangle: t

sibling file: [[file:early-init.org][early-init.el config]]

https://www.bing.com

* What's Emacs

#+begin_src emacs-lisp :tangle no
;; What's Emacs
;; {{{ EMACS: The Extensible, Customizable Display Editor
;; E.             M.                  A.                C.            S.
;; Emacs          Makes               A                 Computer      Slow
;; Escape         Meta                Alt               Control       Shift
;; Emacs          Makers              Are               Crazy         Sickos
;; Emacs          Makes               All               Computing     Simple
;; Emacs          Makefiles           Annihilate        C-Shells
;; Emacs          Manuals             Always            Cause         Senility
;; Emacs          May                 Allow             Customized    Screwups
;; Emacs          Manuals             Are               Cryptic   and Surreal
;; Eventually     Munches             All               Computer      Storage
;; Eight          Megabytes           And               Constantly    Swapping
;; Elsewhere      Maybe               All               Commands  are Simple
;; Excellent      Manuals             Are               Clearly       Suppressed
;; Emacs          May                 Alienate          Clients   and Supporters
;; Except      by Middle              Aged              Computer      Scientists
;; Extended       Macros              Are               Considered    Superfluous
;; Every          Mode                Accelerates       Creation   of Software
;; Each           Manual's            Audience     is   Completely    Stupefied
;; Exceptionally  Mediocre            Algorithm    for  Computer      Scientists
;; Easily         Maintained with the Assistance   of   Chemical      Solutions
;; Eradication of Memory              Accomplished with Complete      Simplicity
;; }}}
#+end_src

* init

#+begin_src emacs-lisp :tangle no
;; test
;; {{{
(show-paren-mode)
(setq show-paren-style 'parenthesis
      show-paren-context-when-offscreen 'overlay)
;;
(add-to-list 'load-path
             (expand-file-name
              "bisec"
              (concat user-emacs-directory)
              )
             )
;; }}}
#+end_src

** tips

#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path (expand-file-name
                         "init.org"
                         (concat user-emacs-directory)
                         )
             )
#+end_src

** File Header

#+begin_src emacs-lisp :tangle yes
;; -*- coding: utf-8; lexical-binding: t; -*-
;; -*- origami-fold-style: triple-braces -*-
;;; init.el

;; Date: 2023-01-06T12:52:58+0800
#+end_src

** 键盘与快捷键 keyboard & key-binding/keymap

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html][Key Binding Conventions (GNU Emacs Lisp Reference Manual)]]

*** keymap

*** keypad

*** repeat-mode

#+begin_src emacs-lisp :tangle no
(use-package repeat
  :ensure nil
  :init
  (put 'other-window 'repeat-map nil)
  :bind
  ("M-o" . other-window)
  )
#+end_src

*** transcient

#+begin_src emacs-lisp :tangle no

#+end_src


*** viper

#+begin_src emacs-lisp :tangle no
(use-package viper
  :ensure nil
  :defer t
  )
#+end_src

** 触控板和鼠标 touchpad/trackpad & mouse

mouse-copy

mouse-drag

t-mouse

#+begin_src emacs-lisp :tangle yes
;; touchpad/trackpad & mouse
;; {{{
(setq mouse-wheel-tilt-scroll t) ; Make the direction sane on an apple trackpad
(setq mouse-wheel-flip-direction t)
;;
;; (defun mouse-hover-tooltip (&optional arg)
;;   "Show mouse hover help info using pos-tip-show."
;;   (interactive)
;;   (let ((help (help-at-pt-kbd-string)))
;;     (if help
;;         (pos-tip-show help nil nil nil 0)
;;       (if (not arg) (message "No local help at point"))))
;;   (unwind-protect
;;       (push (read-event) unread-command-events)
;;     (pos-tip-hide)))
;; }}}
#+end_src

*** 右键菜单 context menu

#+begin_src emacs-lisp :tangle no
(add-hook 'text-mode-hook 'context-menu-mode)
(add-hook 'shell-mode-hook 'context-menu-mode)
(add-hook 'dired-mode-hook 'context-menu-mode)

(require 'dictionary)

(defun my-context-menu (menu click)
  "My context menu"
  (define-key-after menu [dictionary-lookup]
    '(menu-item "Dict" dictionary-search-word-at-mouse
                :help "Look up in dictionary"))
  menu)

;; hook into context menu
(add-hook 'context-menu-functions #'my-context-menu)
#+end_src

*** strokes

#+begin_src emacs-lisp :tangle no

#+end_src

** 光标和选区 cursor/region/selection

imenu

#+begin_src emacs-lisp :tangle no
(use-package cursor-sensor
  :ensure nil
  :defer t
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
;; cursor
;; {{{
;; cursor move
;; Emacs 一行内移动 cursor 的最佳方案是什么？ - Emacs China
;; https://emacs-china.org/t/emacs-cursor/6753/12
;; make cursor the width of the character it is under i.e. full width of a TAB
(setq x-stretch-cursor t) ;; When on a tab, make the cursor the tab length.
;; cursor line: 光标所在行显示/高亮
;; (global-hl-line-mode t) ;; highlight current line
(custom-set-faces '(hl-line ((t (:background "grey")))))
(delete-selection-mode t) ;; 删除选中的文字或选中文字后输入时替换选中的文字
(global-subword-mode)     ;; camelCase and superword-mode
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle yes
(put 'narrow-to-region 'disabled nil)
;; (put 'dired-find-alternate-file 'disabled nil)
;; (put 'downcase-region 'disabled nil)
;; (put 'upcase-region 'disabled nil)
;; (put 'list-timers 'disabled nil)
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq
 scroll-step 1
 scroll-margin 5
 scroll-conservatively 10000
 )
#+end_src

#+begin_src emacs-lisp :tangle no
;; pulse

;; vcursor
#+end_src

** Emacs Lisp

eieio

elint

find-func

find-lisp

ielm

pcase

#+begin_src emacs-lisp :tangle yes
(add-hook 'emacs-lisp-mode-hook 'turn-off-auto-fill)
#+end_src

** pretty-symbols

#+begin_src emacs-lisp :tangle yes
;; pretty-symbols
;; {{{
(setq-default prettify-symbols-alist
              '(
                ("lambda" . ?λ)
                ("function" . ?𝑓)
                )
              )
(add-hook 'prog-mode-hook 'prettify-symbols-mode)
;; }}}
#+end_src

** package

*** package list                                                      :FIXME:

#+begin_src emacs-lisp :tangle no
(add-to-list 'package-selected-packages
             '(
               ;; khoj
               ;; org-auto-tangle
               ;; pyim-basedict
               ;; sis
               ace-pinyin
               ace-window
               all-the-icons-completion
               all-the-icons-dired
               applescript-mode
               auto-dark
               benchmark-init
               browser-hist
               closql
               color-theme-sanityinc-solarized
               color-theme-sanityinc-tomorrow
               consult
               consult-org-roam
               csv-mode
               d2-mode
               deadgrep
               diff-hl
               doom-modeline
               el-fetch
               electric-pair
               electric-pair-mode
               elfeed
               elfeed-dashboard
               elfeed-org
               elisp-autofmt
               elisp-demos
               elisp-depmap
               embark
               embark-consult
               empv
               epkg
               exec-path-from-shell
               expand-region
               free-keys
               fuck
               goggles
               goto-line-preview
               graphviz-dot-mode
               helpful
               highlight-parentheses
               keycast
               khoj
               llama
               lsp-bridge
               magit-delta
               magit-section
               marginalia
               markdown-mode
               mermaid-mode
               moom
               multiple-cursors
               mybigword
               nov
               nov-xwidget
               olivetti
               opencc
               orderless
               org-auto-tangle
               org-modern
               org-roam
               org-roam-ui
               org-similarity
               org-sticky-header
               origami
               osm
               osx-dictionary
               pangu-spacing
               parrot
               pcre2el
               puni
               pyim
               request
               rfc-mode
               semantic-mode
               shrface
               simple-httpd
               sis
               solarized-theme
               subed
               symbol-overlay
               topsy
               transient
               ts-fold
               vertico
               vertico-posframe
               visual-regexp
               visual-regexp-steroids
               vundo
               websocket
               wgrep
               which-key
               which-key-posframe
               with-editor
               wucuo
               yasnippet
               )
             )
#+end_src

*** initialize

#+begin_src emacs-lisp :tangle yes
;; package.el: mirror 插件镜像
;; {{{
;; GitHub connection: https://github.com/hedzr/mirror-list
;; (require 'package)
;; 代理
;; (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
;; (setq url-proxy-services '(("no_proxy" . "^\\(192\\.168\\..*\\)")
;;                            ("http" . "<代理 IP>:<代理端口号>")
;;                            ("https" . "<代理 IP>:<代理端口号>")))
;;
;; (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;;
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
;;
;; emacs-eask/archives: Magic to prevent refreshing package archives failure
;; https://github.com/emacs-eask/archives
;;
(package-initialize) ;; pair with (setq package-enable-at-startup nil) ;; early-init
;; 防止反复调用 package-refresh-contents 影响加载速度
(when (not package-archive-contents)
  (package-refresh-contents))
;; }}}
#+end_src

*** package dependency graph

#+begin_src emacs-lisp :tangle yes
;; package dependency graph (Graphviz)
;; {{{
;; https://emacs-china.org/t/package/22775/2?u=suliveevil
;; https://www.gnu.org/software/emacs/manual/html_mono/cl.html#Loop-Facility
;; (defun get-pkg-reqs-alist ()
(defun my/emacs-package-dependency ()
  (interactive)
  (cl-loop for pkg-and-desc in package-alist
           for pkg = (car pkg-and-desc)
           for desc = (cadr pkg-and-desc)
           for req-names = (cl-loop for it in (package-desc-reqs desc)
				    collect (car it))
           collect (cons pkg req-names)))
;; (setq info (get-pkg-reqs-alist))

(setq info (my/emacs-package-dependency))

;; (with-temp-file "/tmp/g.dot"
(with-temp-file (expand-file-name
                 "assets/emacs-package-dependency.dot"
                 (concat user-emacs-directory)
                 )
  (insert "digraph G {")
  (insert (mapconcat #'identity
                     (cl-loop for pkg-reqs in info
                              for pkg = (car pkg-reqs)
                              for reqs = (cdr pkg-reqs)
                              nconcing (cl-loop for req in reqs
                                                collect
						(format
						 "\"%s\" -> \"%s\";\n"
						 pkg
						 req)))))
  (insert "}"))
;; }}}
#+end_src

*** use-package

#+begin_src emacs-lisp :tangle yes
;; use-package
;; {{{
(require 'use-package)
(require 'use-package-ensure)
(setq use-package-always-ensure t)
(setq use-package-verbose t)

;; (unless (package-installed-p 'use-package)
;;   (package-refresh-contents)
;;   (package-install 'use-package)
;;   (eval-when-compile (require 'use-package)))
;; }}}
#+end_src

** profile

#+begin_src shell
# Emacs # -q ignores personal Emacs files but loads the site files.
emacs -q --eval='(message "%s" (emacs-init-time))'

# Emacs on macOS
open -n /Applications/Emacs.app --args -q --eval='(message "%s" (emacs-init-time))'
#+end_src

*** memory-report

#+begin_src emacs-lisp :tangle no
;; memory-report
#+end_src

*** profiler

#+begin_src emacs-lisp :tangle no
;; profiler
#+end_src

*** Package: benchmark-init :FIXME:

#+begin_src emacs-lisp :tangle yes
(use-package benchmark-init
  :ensure nil
  :init (benchmark-init/activate)
  ;; To disable collection of benchmark data after init is done.
  :hook (after-init . benchmark-init/deactivate)
  ;; (add-hook 'after-init-hook 'benchmark-init/deactivate)
  )

;; (add-hook 'after-init-hook
;;           (lambda () (message "loaded in %s" (emacs-init-time))))
#+end_src

#+begin_src emacs-lisp :tangle no
;; profile: benchmark-init
;; {{{
;; (require 'benchmark-init-modes)  ; FIXME
;; (require 'benchmark-init)
;; (benchmark-init/activate)
;; ;; To disable collection of benchmark data after init is done.
;; (add-hook 'after-init-hook 'benchmark-init/deactivate)
;; }}}
#+end_src


** tree-sitter & [ceg]tags

*** treesit

#+begin_src emacs-lisp :tangle yes
;; tree-sitter
;; {{{
;; Use the built-in treesit and load all language grammars
(use-package treesit
  :ensure nil
  :defer 1
  :custom
  ;; Load languages directly from the repository after making them
  (treesit-extra-load-path '("~/.config/emacs/tree-sitter/"))
  :config
  ;; Replace relevant modes with the treesitter variant
  (dolist (mode
           '(
             (bash-mode       . bash-ts-mode)
             (c-mode          . c-ts-mode)
             (cmake-mode      . cmake-ts-mode)
             (conf-toml-mode  . toml-ts-mode)
             (csharp-mode     . csharp-ts-mode)
             (css-mode        . css-ts-mode)
             (dockerfile-mode . dockerfile-ts-mode)
             (java-mode       . java-ts-mode)
             (javascript-mode . js-ts-mode)
             (js-json-mode    . json-ts-mode)
             (js-mode         . js-ts-mode)
             (python-mode     . python-ts-mode)
             (ruby-mode       . ruby-ts-mode)
             (sh-mode         . bash-ts-mode)
             (typescript-mode . typescript-ts-mode)
             ;; (c++-mode        . c++-ts-mode) ; FIXME
             ;; (go-mode         . go-ts-mode) ; FIXME
             ))
    (add-to-list 'major-mode-remap-alist mode)
    )
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; tree-sitter
;; {{{
(require 'treesit)
;; (tree-sitter-load 'elisp "elisp")
;; (add-to-list 'tree-sitter-major-mode-language-alist '(emacs-lisp-mode . elisp))
(when (treesit-available-p)
  (setq major-mode-remap-alist
        '(
          (bash-mode       . bash-ts-mode)
          (c-mode          . c-ts-mode)
          (cmake-mode      . cmake-ts-mode)
          (conf-toml-mode  . toml-ts-mode)
          (csharp-mode     . csharp-ts-mode)
          (css-mode        . css-ts-mode)
          (dockerfile-mode . dockerfile-ts-mode)
          (java-mode       . java-ts-mode)
          (javascript-mode . js-ts-mode)
          (js-json-mode    . json-ts-mode)
          (js-mode         . js-ts-mode)
          (python-mode     . python-ts-mode)
          (ruby-mode       . ruby-ts-mode)
          (sh-mode         . bash-ts-mode)
          (typescript-mode . typescript-ts-mode)
          ;; (c++-mode        . c++-ts-mode) ; FIXME
          ;; (go-mode         . go-ts-mode) ; FIXME
          )
        )
  )
;; }}}
#+end_src


*** ebrowse



*** etags

** 帮助文档 eldoc help info man-pages...

ehelp

eldoc

info

info-look

info-xref

informat

woman

#+begin_src emacs-lisp :tangle yes
;; random function
;; {{{
(defun describe-random-interactive-function ()
  "Show the documentation for a random interactive function.
Consider only documented, non-obsolete functions."
  (interactive)
  (let (result)
    (mapatoms
     (lambda (s)
       (when (and (commandp s)
                  (documentation s t)
                  (null (get s 'byte-obsolete-info)))
         (setq result (cons s result)))))
    (describe-function (elt result (random (length result))))))
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package man
  :ensure nil
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; faster man pages
;; {{{
(defun faster-man (page)
  "Get a *nix manual page and put it in a buffer.
Faster alternative to (man) and (woman)."
  (interactive
   (list
    ;; autocompletion machinery stolen from (man)
    (let* ((default-entry (Man-default-man-entry))
           (completion-ignore-case t)
           ;; no cache across calls for completion table
           Man-completion-cache
           (input (completing-read
                   (format "Manual entry%s"
                           (if (string= "" default-entry)
                               ": "
                             (format " (default %s): " default-entry)))
                   'Man-completion-table
                   nil nil nil 'Man-topic-history default-entry)))
      (if (string= "" input)
          (error "No args given")
        input))))
  (let* ((buffer (pop-to-buffer (format "*Faster Man - %s*" page))))
    (with-current-buffer buffer
      (erase-buffer)
      (let ((proc
             (progn
               ;; Actual shell command.
               ;; Redirect troff warnings & errors to /dev/null
               ;; so it doesn't pollute the output.
               ;; Also, quote man page so it can display
               ;; things like "printf(3)"
               (async-shell-command
                (format "man \"%s\" 2> /dev/null | col -b" page) buffer)
               (get-buffer-process buffer))))
        (when (process-live-p proc)
          ;; wait for process to finish, then apply fundamental-mode on it
          ;; and jump to the beginning of buffer
          (set-process-sentinel proc (lambda (process signal)
                                       (when (memq
                                              (process-status process)
                                              '(exit signal))
                                         (with-current-buffer buffer
                                           (fundamental-mode)
                                           (beginning-of-buffer))))))
        )
      )
    )
  )
;; }}}
#+end_src

** 时间 date & time

2023-01-08T21:00:08+0800

time

time-date

time-stamp

timeclock

timezone

#+begin_src emacs-lisp :tangle yes
;; time
;; {{{
(use-package iso8601
  :ensure nil
  :defer t
  :bind
  ("C-c D" . my/date-and-time-iso8601)
  :config
  (defun my/date-and-time-iso8601 ()
    (interactive)
    (insert (format-time-string "%FT%T%z"))
    )
  )
;; }}}
#+end_src

** 字体、语法、拼写 font syntax spell

#+begin_src emacs-lisp :tangle yes
;; font and syntax
;; {{{
(set-face-attribute 'default nil
                    :family "Sarasa Mono SC Nerd"
                    :height 140 ; 更改显示字体大小
                    )
(global-font-lock-mode t) ;; turn on syntax highlighting for all buffers
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; flymake
#+end_src

#+begin_src emacs-lisp :tangle no
;; flyspell

;; ispell

;; syntax
#+end_src

** 剪贴板 clipboard

#+begin_src emacs-lisp :tangle yes
(use-package emacs
  :ensure nil
  :bind
  ("C-c H-k" . yank-from-kill-ring)
  ("M-z" . zap-up-to-char)
  )
#+end_src

** 注释 comment

#+begin_src emacs-lisp :tangle yes
;; comment
;; {{{
(use-package emacs
  :ensure nil
  :bind
  ("H-/" . comment-current-line-dwim)
  :config
  (defun comment-current-line-dwim ()
    "Comment or uncomment the current line/region."
    (interactive)
    (save-excursion
      (if (use-region-p)
          (comment-or-uncomment-region (region-beginning) (region-end))
        (push-mark (beginning-of-line) t t)
        (end-of-line)
        (comment-dwim nil)
        )
      )
    )
  )
;; }}}
#+end_src

** 书签 Bookmark

#+begin_src emacs-lisp :tangle no
;; bookmark
;; {{{
;; https://www.youtube.com/watch?v=ajiEBK2swKo
(use-package bookmark
  :ensure nil
  ;; :bind (
  ;;     ("C-x r m" . bookmark-set)
  ;;     ("C-x r d" . bookmark-delete)
  ;;     ("C-x r j" . bookmark-jump)
  ;;     )
  )
;; }}}
#+end_src

** 历史记录 history & session

desktop

*** 命令历史

#+begin_src emacs-lisp :tangle no
(use-package chistory
  :ensure nil
  )

(use-package echistory
  :ensure nil
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  (setq enable-recursive-minibuffers t)
  (setq history-length 1024)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables '(
                                        extended-command-history
                                        global-mark-ring
                                        mark-ring
                                        regexp-search-ring
                                        search-ring
                                        ))
  (setq savehist-autosave-interval 300)
  )
#+end_src

*** 文件历史

#+begin_src emacs-lisp :tangle yes
(use-package recentf
  :ensure nil
  :defer 1
  ;; :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 256)
  (recentf-max-menu-items 20)
  (recentf-auto-cleanup 'never)
  (recentf-filename-handlers '(abbreviate-file-name))
  (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir
                                           ;; ,no-littering-var-directory
                                           ;; ,no-littering-etc-directory
                                           )
                                collect (abbreviate-file-name f))
                     ;; Folders on macOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on macOS end
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")
                   )
  )
#+end_src

*** 光标位置历史

#+begin_src emacs-lisp :tangle yes
;; 自动记住每个文件的最后一次访问的光标位置
(use-package saveplace
  :ensure nil
  ;; :defer 1
  :hook (after-init . save-place-mode)
  )
#+end_src


*** multisession

#+begin_src emacs-lisp :tangle no
;; multisession
#+end_src

** 文件 file

fileloop

filenotify

filesets

so-long

#+begin_src emacs-lisp :tangle yes
;; warn when opening files bigger than 100 MB
(setq large-file-warning-threshold (* 100 1000 1000))

;; 使 Emacs 自动加载外部修改过的文件
;; (global-auto-revert-mode 1)
(add-hook 'on-first-file-hook 'global-auto-revert-mode)

;; Open file system read-only files as read-only in Emacs as well.
(setq view-read-only t)
#+end_src

*** chunk

#+begin_src emacs-lisp :tangle yes
;; chunk
;; {{{
;; Increase how much is read from processes in a single chunk (default is 4kb)
(setq read-process-output-max #x10000) ;; 64kb
;; }}}
#+end_src

*** symlink

#+begin_src emacs-lisp :tangle no
;; symlink
;; {{{
(defun read-only-if-symlink ()
  (if (file-symlink-p buffer-file-name)
      (progn
        (setq buffer-read-only t)
        (message "File is a symlink"))))
(add-hook 'find-file-hooks 'read-only-if-symlink)
;; }}}
#+end_src

*** auto-save

#+begin_src emacs-lisp :tangle yes
;; auto-save: 定期预存，防止停电、系统崩溃等原因造成的数据损失
;; {{{
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

;; save file when buffer/focus change 自动保存
(add-hook 'after-init-hook 'auto-save-visited-mode) 
(setq
 auto-save-default t ; auto-save every buffer that visits a file
 auto-save-timeout 20 ; number of seconds idle time before auto-save (default: 30)
 auto-save-interval 200 ; number of keystrokes between auto-saves (default: 300)
 )
;; }}}
#+end_src

*** backup

#+begin_src emacs-lisp :tangle yes
;; backup file: 备份
;; {{{
;; https://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files
;;
;; (defvar --backup-directory (concat user-emacs-directory "backups"))
;; (if (not (file-exists-p --backup-directory))
;;         (make-directory --backup-directory t))
;; (setq backup-directory-alist `(("." . ,--backup-directory)))
;; (setq backup-directory-alist `((".*" . ,(expand-file-name "backup" user-emacs-directory))))
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq make-backup-files t         ; backup of a file the first time it is saved.
      backup-by-copying t         ; don't clobber symlinks
      version-control t           ; version numbers for backup files
      delete-old-versions t       ; delete excess backup files silently
      delete-by-moving-to-trash t
      dired-kept-versions 2
      kept-old-versions 6 ; oldest versions to keep when a new numbered backup is made (default: 2)
      kept-new-versions 9 ; newest versions to keep when a new numbered backup is made (default: 2)
      )
;; }}}
#+end_src

*** lockfile

#+begin_src emacs-lisp :tangle yes
;; lockfile: 不同进程修改同一文件
;; {{{
(setq create-lockfiles t)
(setq lock-file-name-transforms
      '(("\\`/.*/\\([^/]+\\)\\'" "/var/tmp/\\1" t)))
;; }}}
#+end_src


*** find file/grep file

#+begin_src emacs-lisp :tangle no
(use-package grep
  :ensure nil
  :config
  (setq find-program "")
  (setq grep-command "")
  
  (grep-apply-setting
   'grep-find-command
   '("" . 80 )
   )
  
  (grep-apply-setting
   'grep-find-use-xargs
   'exec
   )
  
  (grep-apply-setting
   'grep-command
   "")
  
  (grep-apply-setting
   'grep-find-template
   "" )
  )

;; ffap

;; find-file

;; find-dired
#+end_src

*** file head

#+begin_src emacs-lisp :tangle no
(auto-insert-mode)
(setq auto-insert-query nil) ;; 不提醒
;; https://honmaple.me/articles/2018/01/emacs自动添加文件头.html
(setq auto-insert-alist
      '(((python-mode . "Python program") nil
         "#!/usr/bin/env python\n"
         "# -*- coding: utf-8 -*-\n"
         "# **************************************************************************\n"
         "# Copyright © " (substring (current-time-string) -4) " " (user-full-name) "\n"
         "# File Name: " (file-name-nondirectory buffer-file-name) "\n"
         "# Author: " (user-full-name)"\n"
         "# Email: " user-mail-address "\n"
         "# Created: " (format-time-string "%Y-%m-%d %T (%Z)" (current-time)) "\n"
         "# Last Update: " (format-time-string "%Y-%m-%d %T (%Z)" (current-time)) "\n"
         "#          By: \n"
         "# Description: \n"
         "# **************************************************************************\n")
        ((c-mode . "C program") nil
         "/**************************************************************************\n"
         " Copyright © " (substring (current-time-string) -4) " " (user-full-name) "\n"
         " File Name: " (file-name-nondirectory buffer-file-name) "\n"
         " Author: " (user-full-name)"\n"
         " Email: " user-mail-address "\n"
         " Created: " (format-time-string "%Y-%m-%d %T (%Z)" (current-time)) "\n"
         " Last Update: \n"
         "           By: \n"
         " Description: \n"
         " **************************************************************************/\n"
         "#include<stdio.h>\n"
         "#include<string.h>\n")
        ((sh-mode . "Shell script") nil
         "#!/bin/bash\n"
         "# **************************************************************************\n"
         "# Copyright © " (substring (current-time-string) -4) " " (user-full-name) "\n"
         "# File Name: " (file-name-nondirectory buffer-file-name) "\n"
         "# Author: " (user-full-name)"\n"
         "# Email: " user-mail-address "\n"
         "# Created: " (format-time-string "%Y-%m-%d %T (%Z)" (current-time)) "\n"
         "# Last Update: \n"
         "#          By: \n"
         "# Description: \n"
         "# **************************************************************************/\n")))
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://honmaple.me/articles/2018/01/emacs自动更新文件头.html
#+end_src

*** file name and file extension

#+begin_src emacs-lisp :tangle yes
;; file name and file extension
;; {{{
;;
;; https://github.com/chyla/kill-file-path
;;
;; 如何在文件夹层次结构中找到所有不同的文件扩展名？
;; https://qa.1r1g.com/sf/ask/128957811/#
;;

;; file name only
(defun my/copy-file-name ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-name))))
    (when filename
      (kill-new filename))
    (message filename)))

;; file name with file path
(defun my/copy-file-name-full ()
  "Copy the current buffer file name (with full path) to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
;; }}}
#+end_src

*** file path

#+begin_src emacs-lisp :tangle yes
;; file path
;; {{{
(defun my/copy-file-path (&optional DirPathOnlyQ)
  "Copy current buffer file path or dired path.
Result is full path.
If `universal-argument' is called first, copy only the dir path.

If in dired, copy the current or marked files.

If a buffer is not file and not dired, copy value of `default-directory'.

URL `http://xahlee.info/emacs/emacs/emacs_copy_file_path.html'
Version 2018-06-18 2021-09-30"
  (interactive "P")
  (let (($fpath
         (if (string-equal major-mode 'dired-mode)
             (progn
               (let (($result
		      (mapconcat 'identity (dired-get-marked-files) "\n")))
                 (if (equal (length $result) 0)
                     (progn default-directory )
                   (progn $result))))
           (if (buffer-file-name)
               (buffer-file-name)
             (expand-file-name default-directory)))))
    (kill-new
     (if DirPathOnlyQ
         (progn
           (message "Directory copied: %s" (file-name-directory $fpath))
           (file-name-directory $fpath))
       (progn
         (message "File path copied: %s" $fpath)
         $fpath )))))
;; }}}
#+end_src


*** rename file

#+begin_src emacs-lisp :tangle yes
;; rename file
;; {{{
;; https://github.com/protesilaos/dotfiles/blob/master/emacs/.emacs.d/prot-lisp/prot-simple.el

;;;###autoload
(defun my/rename-file-and-buffer (name)
  "Apply NAME to current file and rename its buffer.
Do not try to make a new directory or anything fancy."
  (interactive
   (list (read-string "Rename current file: " (buffer-file-name))))
  (let ((file (buffer-file-name)))
    (if (vc-registered file)
        (vc-rename-file file name)
      (rename-file file name))
    (set-visited-file-name name t t))
  )
;; }}}
#+end_src

*** delete file

#+begin_src emacs-lisp :tangle yes
;; delete buffer file
;; {{{
(defun my/delete-current-file ()
  "Delete the file associated with the current buffer.
Delete the current buffer too.
If no file is associated, just close buffer without prompt for save."
  (interactive)
  (let ((currentFile (buffer-file-name)))
    (when (yes-or-no-p (concat "Delete file?: " currentFile))
      (kill-buffer (current-buffer))
      (when currentFile
        (delete-file currentFile)))))
;; }}}
#+end_src

*** 垃圾筒                                                            :macOS:

#+begin_src emacs-lisp :tangle yes
;; move file to trash when delete
;; {{{
;;; macOS
(when (eq system-type 'darwin)
  (setq trash-directory "~/.Trash/")
  (setq delete-by-moving-to-trash t))
;; }}}
#+end_src

** 文件夹 dired & wdired

#+begin_src emacs-lisp :tangle yes
;; dired
;; {{{
(use-package dired
  :ensure nil
  :bind
  (
   :map dired-mode-map
   ("RET" . dired-open-dwim)
   )
  :custom
  (dired-dwim-target t)
  (dired-kill-when-opening-new-dired-buffer t)
  :config
  (setq dired-recursive-deletes 'always
        dired-recursive-copies 'always) ; 全部递归拷贝、删除文件夹中的文件
  (setq dired-use-ls-dired t)
  (setq dired-auto-revert-buffer t)
  ;; (dired-listing-switches "-alGh")
  (setq insert-directory-program "/opt/homebrew/bin/gls")
  (setq dired-listing-switches
        "-l --almost-all --human-readable --group-directories-first --no-group")

  (defun dired-open-dwim ()
    (interactive)
    (if (file-directory-p (dired-file-name-at-point))
        (dired-find-file)
      (dired-find-file-other-window)))
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; dirtrack

;; wdired
#+end_src

** 项目与版本管理 project & version control

#+begin_src emacs-lisp :tangle yes
;; project
;; {{{
(use-package project
  :ensure nil
  :defer 2
  ;; :bind
  ;; ("C-c p" . project-prefix-map)
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package vc
  :ensure nil
  :defer t
  )

(use-package vc-dir
  :ensure nil
  :defer t
  )
#+end_src

** 缓冲区 buffer

#+begin_src emacs-lisp :tangle no
(use-package uniquify
  :defer t
  )
#+end_src

*** kill buffer

#+begin_src emacs-lisp :tangle yes
;; kill buffer
;; {{{
(use-package emacs
  :ensure nil
  :bind
  ("C-c K" . my/kill-all-other-buffers)
  :config
  (defun my/kill-all-other-buffers ()
    (interactive)
    (mapc 'kill-buffer (cdr (buffer-list (current-buffer))))
    )
  )
;; }}}
#+end_src

*** side-buffer

#+begin_src emacs-lisp :tangle yes
;; side buffer
;; {{{
(use-package emacs
  :ensure nil
  :bind
  ("C-c B" . my/side-buffer)
  :config
  (defun my/side-buffer ()
    (interactive)
    (let ((other (buffer-name (window-buffer (next-window)))))
      (delete-other-windows)
      (set-frame-width (selected-frame)
                       (+ (frame-width (selected-frame)) (window-width)))
      (split-window-horizontally)
      (split-window-vertically)
      (with-selected-window (next-window)
        (set-window-buffer (selected-window) other))
      (with-selected-window (previous-window)
        (set-window-buffer (selected-window) "*Scratch*")))
    )
  )
;; }}}
#+end_src

*** ibuffer

#+begin_src emacs-lisp :tangle yes
;; ibuffer
;; {{{
(use-package ibuffer
  :ensure nil
  :bind ("C-x C-b" . ibuffer)
  ;; :custom
  ;; (ibuffer-formats
  ;;  '((mark modified read-only locked " "
  ;;          (name 35 35 :left :elide)
  ;;          " "
  ;;          (size 9 -1 :right)
  ;;          " "
  ;;          (mode 16 16 :left :elide)
  ;;          " " filename-and-process)
  ;;    (mark " "
  ;;          (name 16 -1)
  ;;          " " filename)))
  :config
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("dired" (mode . dired-mode))
                 ("emacs" (or
                           (mode . emacs-lisp-mode)
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")
                           ))
                 ("org" (or (mode . org-mode)
                            (mode . org-agenda-mode)
                            (mode . org-src-mode)
                            ))
                 ;;               ("erc" (mode . erc-mode))

                 ("planner" (or
                             (name . "^\\*Calendar\\*$")
                             (name . "^diary$")
                             (mode . muse-mode)))
                 ("PDF"    (mode . pdf-view-mode))
                 ("python" (mode . python-mode))
                 ;; ("gnus" (or
                 ;;          (mode . message-mode)
                 ;;          (mode . bbdb-mode)
                 ;;          (mode . mail-mode)
                 ;;          (mode . gnus-group-mode)
                 ;;          (mode . gnus-summary-mode)
                 ;;          (mode . gnus-article-mode)
                 ;;          (name . "^\\.bbdb$")
                 ;;          (name . "^\\.newsrc-dribble")))
                 ))))

  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
  )
;; }}}
#+end_src

*** mibuffer

#+begin_src emacs-lisp :tangle no
(use-package mibuffer
  :ensure nil
  )
#+end_src

*** 单词 Word

#+begin_src emacs-lisp :tangle no
;; subword
#+end_src

*** 行 line

#+begin_src emacs-lisp :tangle yes
;; line
;; {{{
(use-package display-line-numbers
  :ensure nil
  :hook
  (after-init . global-display-line-numbers-mode)
  :bind
  ("C-c O"   . open-newline-above)
  ("C-c C-o" . open-newline-below)
  :config
  ;; (global-display-line-numbers-mode 1)

  (setq-default display-line-numbers-widen t) ; Keep line numbers inside a narrow
  (setq display-line-numbers-width-start t)
  (setq display-line-numbers-grow-only t)    ;; do not shrink line number width
  (setq display-line-numbers-type 'relative) ;; 相对行号

  ;; new line
  ;; https://github.com/manateelazycat/open-newline

  (defun open-newline-above (arg)
    "Move to the previous line (like vi) and then opens a line."
    (interactive "p")
    (beginning-of-line)
    (open-line arg)
    (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
        (indent-according-to-mode)
      (beginning-of-line)))

  (defun open-newline-below (arg)
    "Move to the next line (like vi) and then opens a line."
    (interactive "p")
    (end-of-line)
    (open-line arg)
    (call-interactively 'next-line arg)
    (if (not (member major-mode '(haskell-mode org-mode literate-haskell-mode)))
        (indent-according-to-mode)
      (beginning-of-line)))
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; (use-package word-wrap-mode)
  ;; wrap/truncate
  (setq-default truncate-lines t)
  (setq word-wrap-by-category t) ;; improves CJK + Latin word-wrapping
#+end_src

*** 列、句子、段落 column sentence paragraph

#+begin_src emacs-lisp :tangle yes
;; display-fill-column-indicator
;; {{{
(use-package display-fill-column-indicator
  :ensure nil
  :hook
  (after-init . global-display-fill-column-indicator-mode)
  ;; (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
  :bind
  (
   ([remap fill-paragraph] . my/toggle-fill-unfill)
   )
  :config
  (setq-default fill-column 80) ;; M-x set-fill-column RET

  (defun my/toggle-fill-unfill ()
    "Like `fill-paragraph', but unfill if used twice."
    (interactive)
    (let ((fill-column
           (if (eq last-command 'my-fill-or-unfill)
               (progn (setq this-command nil)
                      (point-max))
             fill-column)))
      (call-interactively 'fill-paragraph nil (vector nil t))))

  ;; https://www.emacswiki.org/emacs/UnfillParagraph
  (defun my/unfill-paragraph (&optional region)
    "Takes a multi-line paragraph and makes it into a single line of text."
    (interactive (progn (barf-if-buffer-read-only) '(t)))
    (let ((fill-column (point-max))
          ;; This would override `fill-column' if it's an integer.
          (emacs-lisp-docstring-fill-column t))
      (fill-paragraph nil region))
    )
  )
;; }}}
#+end_src


#+begin_src emacs-lisp :tangle yes
;; sentence: 断句
;; {{{
(setq sentence-end
      "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*"
      )
;; (setq sentence-end-double-space nil)
;; }}}
#+end_src

** minibuffer                                                         :FIXME:

#+begin_src emacs-lisp :tangle yes
;; minibuffer
;; {{{
(use-package minibuffer
  :ensure nil
  :bind
  (
   :map minibuffer-mode-map
   ("H-j" . next-line)
   ("H-k" . previous-line)
   ;; ("TAB" . minibuffer-complete)
   
   ;; :map minibuffer-local-map
   ("C-n" . minibuffer-previous-completion)
   ("C-p" . minibuffer-next-completion)
   ;; ("C-<tab>" . dabbrev-expand)
   
   :map completion-in-region-mode-map
   ("C-n" . minibuffer-previous-completion)
   ("C-p" . minibuffer-next-completion)
   )
  :config
  (setq history-delete-duplicates t)
  )
#+end_src

[[https://robbmann.io/posts/emacs-29-completions/][The *Completions* Buffer Gets a Big Upgrade in Emacs 29 · robbmann]]

[[https://robbmann.io/emacsd/][My Literate .emacs.d · robbmann]] [[https://github.com/renzmann/.emacs.d][renzmann/.emacs.d]]

#+begin_src emacs-lisp :tangle yes
;; completion window
(add-to-list 'display-buffer-alist
             '("\\*Completions\\*"
               (display-buffer-reuse-window display-buffer-in-side-window)
               (side . bottom)
               (slot . 0)))
;; case: ignore case
(setq completion-ignore-case t
      read-buffer-completion-ignore-case t    ;; default nil
      read-file-name-completion-ignore-case t ;; default t
      )
;; completion style
(setq completion-styles '(substring initials partial-completion flex basic))
(setq completion-cycle-threshold 10)
(setq completions-format 'one-column)
(setq completions-header-format nil)
(setq completions-max-height 20)
(setq completion-auto-select nil)
(setq enable-recursive-minibuffers t)
(setq completion-auto-help 'always)
(setq completion-auto-select 'second-tab)
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle yes
(defun my/sort-by-alpha-length (elems)
  "Sort ELEMS first alphabetically, then by length."
  (sort elems (lambda (c1 c2)
                (or (string-version-lessp c1 c2)
                    (< (length c1) (length c2))))))

(defun my/sort-by-history (elems)
  "Sort ELEMS by minibuffer history.
Use `mct-sort-sort-by-alpha-length' if no history is available."
  (if-let ((hist (and (not (eq minibuffer-history-variable t))
                      (symbol-value minibuffer-history-variable))))
      (minibuffer--sort-by-position hist elems)
    (my/sort-by-alpha-length elems)))

(defun my/completion-category ()
  "Return completion category."
  (when-let ((window (active-minibuffer-window)))
    (with-current-buffer (window-buffer window)
      (completion-metadata-get
       (completion-metadata (buffer-substring-no-properties
                             (minibuffer-prompt-end)
                             (max (minibuffer-prompt-end) (point)))
                            minibuffer-completion-table
                            minibuffer-completion-predicate)
       'category))))

(defun my/sort-multi-category (elems)
  "Sort ELEMS per completion category."
  (pcase (my/completion-category)
    ('nil elems) ; no sorting
    ('kill-ring elems)
    ('project-file (my/sort-by-alpha-length elems))
    (_ (my/sort-by-history elems))))

(setq completions-sort #'my/sort-multi-category)
#+end_src

** 补全、代码片段与模板 Completion Snippet and Template

completion: buffer and minibuffer

*** abbrev/dabbrev Completion

#+begin_src emacs-lisp :tangle yes
;; abbrev/dabbrev: dynamic abbreviation expand
;; {{{
(use-package dabbrev
  :ensure nil
  :bind
  ( "C-<tab>" . dabbrev-expand)
  ;; :config
  )
;; }}}
#+end_src

*** hippie-expand

#+begin_src emacs-lisp :tangle yes
;; hippie-expand
;; {{{
(use-package hippie-exp
  :ensure nil
  :bind
  ([remap dabbrev-expand] . hippie-expand)
  ("M-/" . hippie-expand)
  :config
  (setq hippie-expand-try-functions-list
        '(
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol
          ))
  )
;; }}}
#+end_src

*** completion

#+begin_src emacs-lisp :tangle no
;; dynamic-completion-mode
(use-package completion
  :ensure nil
  )

(use-package crm
  :ensure nil
  )

(use-package external-completion
  :ensure nil
  )
#+end_src

*** pcomplete

#+begin_src emacs-lisp :tangle no

#+end_src

*** expand

#+begin_src emacs-lisp :tangle no

#+end_src

*** skeleton

*** tempo

#+begin_src emacs-lisp :tangle no
;; tempo
#+end_src

** LSP

#+begin_src emacs-lisp :tangle no
;; eglot
#+end_src

** 字符/字符串 Character & Text/String
*** unicode

#+begin_src emacs-lisp :tangle yes
;; unicode
;; {{{
;; https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
(when (file-exists-p "~/.config/emacs/assets/unicode/UnicodeData.txt")
  (setq describe-char-unicodedata-file
        "~/.config/emacs/assets/unicode/UnicodeData.txt")
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; glyphless-mode
#+end_src

*** 空白字符/不可见字符

#+begin_src emacs-lisp :tangle yes
;; 不可见字符: zero-width characters ->​<-
;; {{{
;; http://xahlee.info/emacs/emacs/elisp_unicode_replace_invisible_chars.html
(defun xah-replace-invisible-char ()
  "Query replace some invisible Unicode chars.
The chars replaced are:
 LEFT-TO-RIGHT MARK           (8206, #x200e)
 OBJECT REPLACEMENT CHARACTER (65532, #xfffc)
 RIGHT-TO-LEFT MARK           (8207, #x200f)
 RIGHT-TO-LEFT OVERRIDE       (8238, #x202e)
 ZERO WIDTH NO-BREAK SPACE    (65279, #xfeff)
 ZERO WIDTH SPACE             (codepoint 8203, #x200b)

Search begins at buffer beginning. (respects `narrow-to-region')

URL `http://xahlee.info/emacs/emacs/elisp_unicode_replace_invisible_chars.html'
Version: 2018-09-07 2022-09-13"
  (interactive)
  (let ((case-replace nil)
        (case-fold-search nil)
        ($p0 (point)))
    (goto-char (point-min))
    (while (re-search-forward
            "\ufeff\\|\u200b\\|\u200f\\|\u202e\\|\u200e\\|\ufffc"
            nil t)
      (replace-match ""))
    (goto-char $p0))
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle yes
;; see invisible chars
;; {{{
;; https://emacs-china.org/t/topic/19557
(defun my/see-invisible-chars ()
  "Highlight ZERO WIDTH chars in all buffers."
  (interactive)
  (let ((charnames (list
                    "BYTE ORDER MARK"
                    "LEFT-TO-RIGHT EMBEDDING"
                    "LEFT-TO-RIGHT MARK"
                    "OBJECT REPLACEMENT CHARACTER"
                    "RIGHT-TO-LEFT MARK"
                    "RIGHT-TO-LEFT OVERRIDE"
                    "ZERO WIDTH JOINER"
                    "ZERO WIDTH NO-BREAK SPACE"
                    "ZERO WIDTH NON-JOINER"
                    "ZERO WIDTH SPACE"
                    )))
    (set-face-background 'glyphless-char "RoyalBlue1")
    (dolist (name charnames)
      ;; see info node "info:elisp#Glyphless Chars" for available values
      (set-char-table-range glyphless-char-display
                            (char-from-name name) "fuck"))
    )
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package emacs
  :ensure nil
  :bind
  ("H-SPC H-SPC" . (lambda () (interactive) (insert "\u200b")))
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;;(when (or (my-system-type-is-gnu) (my-system-is-blanche))
;; (add-to-list post-command-hook 'whitespace-mode) ; FIXME
(whitespace-mode)
;; only show bad whitespace
(setq whitespace-style '(
                         trailing
                         space-before-tab
                         indentation
                         empty
                         space-after-tab
                         ))

;;(face trailing lines-tail) whitespace-line-column 80)
;; highlight long lines tails 

(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

#+begin_src emacs-lisp :tangle no
(setq-default indent-tabs-mode nil) ; don't insert tab when indenting by default
(setq tab-width 4)                  ; 4 spaces by default

(defun my/infer-indentation-style ()
  ;; if our source file uses tabs, we use tabs, if spaces spaces, and if
  ;; neither, we use the current indent-tabs-mode
  (let ((space-count (how-many "^  " (point-min) (point-max)))
        (tab-count (how-many "^\t" (point-min) (point-max))))
    (if (> space-count tab-count) (setq indent-tabs-mode nil))
    (if (> tab-count space-count) (setq indent-tabs-mode t)))
  )
#+end_src

*** 括号自动补全

#+begin_src emacs-lisp :tangle yes
;; pair completion
(use-package electric-pair-mode ; elec-pair
  :ensure nil
  :hook (after-init . electric-pair-mode)
  )
#+end_src

*** Text Case

Title Capitalization

#+begin_src emacs-lisp :tangle yes
;; additionally to the list defined in title-capitalization:
(defvar my-do-not-capitalize-words '("suliveevil")
  "Personal list of words that doesn't get capitalized in titles.")

(defun text-case-title-capitalization (beg end)
  "Proper English title capitalization of a marked region"
  ;; - before: the presentation of this heading of my own from my keyboard and yet
  ;; - after:  The Presentation of This Heading of My Own from My Keyboard and Yet
  ;; - before: a a a a a a a a
  ;; - after:  A a a a a a a A
  (interactive "r")
  (save-excursion
    (let* (
           ;; basic list of words which don't get capitalized according to simplified rules:
           ;; http://karl-voit.at/2015/05/25/elisp-title-capitalization/
           (do-not-capitalize-basic-words '(
                                            "a"
                                            "ago"
                                            "an"
                                            "and"
                                            "as"
                                            "at"
                                            "but"
                                            "by"
                                            "es"
                                            "for"
                                            "from"
                                            "in"
                                            "into"
                                            "it"
                                            "n"
                                            "next"
                                            "nor"
                                            "of"
                                            "off"
                                            "on"
                                            "onto"
                                            "or"
                                            "over"
                                            "past"
                                            "s"
                                            "so"
                                            "t"
                                            "the"
                                            "till"
                                            "to"
                                            "up"
                                            "yet"))
           ;; if user has defined 'my-do-not-capitalize-words, append to basic list:
           (do-not-capitalize-words (if (boundp 'my-do-not-capitalize-words)
                                        (append do-not-capitalize-basic-words my-do-not-capitalize-words )
                                      do-not-capitalize-basic-words
                                      )
                                    )
           )
      ;; go to begin of first word:
      (goto-char beg)
      (capitalize-word 1)
      ;; go through the region, word by word:
      (while (< (point) end)
        (skip-syntax-forward "^w" end)
        (let ((word (thing-at-point 'word)))
          (if (stringp word)
              ;; capitalize current word except it is list member:
              (if (member (downcase word) do-not-capitalize-words)
                  (downcase-word 1)
                (capitalize-word 1)))))
      ;; capitalize last word in any case:
      (backward-word 1)
      (if (and (>= (point) beg)
               (not (member (or (thing-at-point 'word) "s")
                            '("n" "t" "es" "s"))))
          (capitalize-word 1))))
  )
#+end_src

*** 跳转

#+begin_src emacs-lisp :tangle yes
;; goto-char by Oliver Scholz
;; {{{
(use-package emacs
  :ensure nil
  :bind
  ("C-c g a" . my/go-to-char)
  :config
  (defun my/go-to-char (n char)
    "Move forward to Nth occurence of CHAR.
Typing `wy-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
    (interactive "p\ncGo to char: ")
    (search-forward (string char) nil nil n)
    (while (char-equal (read-char)
                       char)
      (search-forward (string char) nil nil n))
    (setq unread-command-events (list last-input-event)))
  )

;; similar work
;; https://www.emacswiki.org/emacs/go-to-char.el
;; https://www.emacswiki.org/emacs/joseph-go-to-char
;; doitian/iy-go-to-char: Go to next CHAR which is similar to "f" and "t" in vim
;; https://github.com/doitian/iy-go-to-char
;; }}}
#+end_src

*** 数字

#+begin_src emacs-lisp :tangle no
(defun my-thousands-separate (num)
  "Formats the (possibly floating point) number with a thousands
separator."
  (let* ((nstr (number-to-string num))
         (dot-ind (string-match "\\." nstr))
         (nstr-no-decimal (if dot-ind
                              (substring nstr 0 dot-ind)
                            nstr))
         (nrest (if dot-ind
                    (substring nstr dot-ind)
                  nil))
         (pretty nil)
         (cnt 0))
    (dolist (c (reverse (append nstr-no-decimal nil)))
      (if (and (zerop (% cnt 3)) (> cnt 0))
          (setq pretty (cons ?, pretty)))
      (setq pretty (cons c pretty))
      (setq cnt (1+ cnt)))
    (concat pretty nrest))
  )
#+end_src

*** 批量替换 batch replace

#+begin_src emacs-lisp :tangle no
(setq repl-regexp-list
      '(
	("(" "（")
        (")" "）")
        ("\\." "。")
        ("," "，")
        ("?" "？")
        ;; ....
        ))

(defun replall--get-repl-regexp-list ()
  (if (bound-and-true-p repl-regexp-list)
      repl-regexp-list
    (message "please set variable 'repl-regexp-list'!")))

(defun replall--regexp (file lst)
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (dolist (pair lst)
      (while (re-search-forward (car pair) nil t)
        (replace-match (cadr pair)))
      (goto-char (point-min)))
    (write-file file)))

(defun replall-regexp-in-curr-buffer ()
  (interactive)
  (let ((curr-file (buffer-file-name (current-buffer)))
        (repl-list (replall--get-repl-regexp-list)))
    (replall--regexp curr-file repl-list)))
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://geekinney.com/post/emacs-hack-string-batch-replacement/
(setq repl-string-list
      '(("old" "new")
        ("test" "测试")
        ("错误" "right")
        ("隔开你" "戈楷旎")))

(setq repl-regexp-list
      '(("\\." "。")))

(setq repl-file "~/replace.txt")

(defun replall--read-pair-from-file ()
  (let ((repl-list '()))
    (with-temp-buffer
      (insert-file-contents repl-file)
      (goto-char (point-min))
      (while (< (point) (point-max))
        (setq repl-pair (split-string
			 (thing-at-point 'line)
			 "[ \f\t\n\r\v]+"
			 t
			 "[ \f\t\n\r\v]+"))
        (if (null repl-pair)
            (next-line)
          (next-line)
          (setq repl-list (append repl-list (list repl-pair))))))
    repl-list))

(defun replall--get-repl-string-list ()
  (if (bound-and-true-p repl-string-list)
      repl-string-list
    (replall--read-pair-from-file)))

(defun replall--get-repl-regexp-list ()
  (if (bound-and-true-p repl-regexp-list)
      repl-regexp-list
    (message "please set variable 'repl-regexp-list'!")))

(defun replall--string (file lst)
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (dolist (pair lst)
      (while (search-forward (car pair) nil t)
        (replace-match (cadr pair)))
      (goto-char (point-min)))
    (write-file file)))

(defun replall--regexp (file lst)
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (dolist (pair lst)
      (while (re-search-forward (car pair) nil t)
        (replace-match (cadr pair)))
      (goto-char (point-min)))
    (write-file file)))

(defun replall-string-in-curr-buffer ()
  (interactive)
  (let ((curr-file (buffer-file-name (current-buffer)))
        (repl-list (replall--get-repl-string-list)))
    (replall--string curr-file repl-list)))

(defun replall-regexp-in-curr-buffer ()
  (interactive)
  (let ((curr-file (buffer-file-name (current-buffer)))
        (repl-list (replall--get-repl-regexp-list)))
    (replall--regexp curr-file repl-list)))

(defun replall-string-in-file (file repl)
  (interactive "fchoose a file to be processed: ")
  (let ((repl-list (replall--get-repl-string-list)))
    (replall--string file repl-list)))

(defun replall-regexp-in-file (file repl)
  (interactive "fchoose a file to be processed: ")
  (let ((repl-list (replall--get-repl-regexp-list)))
    (replall--regexp file repl-list)))

(defun replall--get-real-files-in-dir (dir)
  (let ((real-files)
        (files (directory-files dir)))
    (dolist (file files)
      (when (not (or (string= "." (substring file 0 1))
                     (string= "#" (substring file 0 1))
                     (string= "~" (substring file -1))))
        (push file real-files)))
    real-files))

(defun replall-string-in-directory (dir)
  (interactive "Dchoose a directory to be processed: ")
  (let* ((repl-list (replall--get-repl-string-list))
         (real-files (replall--get-real-files-in-dir dir)))
    (dolist (file real-files)
      (replall--string (concat dir file) repl-list))))

(defun replall-regexp-in-directory (dir)
  (interactive "Dchoose a directory to be processed: ")
  (let* ((repl-list (replall--get-repl-regexp-list))
         (real-files (replall--get-real-files-in-dir dir)))
    (dolist (file real-files)
      (replall--regexp (concat dir file) repl-list))))

(defun replall-string (type)
  (interactive
"sreplace string: 1.in current buffer  2.in a file  3.in a directory (input 1~3): ")
  (cond
   ((string= type "1")
    (replall-string-in-curr-buffer))
   ((string= type "2")
    (call-interactively #'replall-string-in-file))
   ((string= type "3")
    (call-interactively #'replall-string-in-directory))
   (t (message "please input 1~3!"))))

(defun replall-regexp (type)
  (interactive "sreplace regexp: 1.in current buffer  2.in a file  3.in a directory (input 1~3): ")
  (cond
   ((string= type "1")
    (replall-regexp-in-curr-buffer))
   ((string= type "2")
    (call-interactively #'replall-regexp-in-file))
   ((string= type "3")
    (call-interactively #'replall-regexp-in-directory))
   (t (message "please input 1~3!"))))
#+end_src


** 查找与搜索

*** 正则表达式 regexp

#+begin_src emacs-lisp :tangle no
;; re-builder

;; regi

;; rx
#+end_src

*** grep

#+begin_src emacs-lisp :tangle no
;; grep
#+end_src

*** isearch

[[https://pengpengxp.github.io/emacs/emacs_isearch_summary.html][一份isearch的使用总结]]

#+begin_src emacs-lisp :tangle yes
;; isearch
;; {{{
;; M-<: first match
;; M->: last  match
(use-package isearch
  :ensure nil
  :defer 1
  :bind
  (
   :map isearch-mode-map
   ("C-c" . isearch-cancel)
   ("DEL" . isearch-del-char)
   ("s-v" . isearch-yank-kill)
   )
  :config
  (setq isearch-lazy-count t) ;; anzu
  (setq isearch-allow-motion t)
  ;; 这样可以在 literal 的 isearch 中，把空格直接当成正则里面的 .* 匹配
  (setq isearch-lax-whitespace t)
  (setq isearch-regexp-lax-whitespace t)
  (setq search-whitespace-regexp ".*")
  (setq isearch-regexp-lax-whitespace nil) ; 正则搜索时不开启这个功能，空格就是空格
  ;;
  ;; 自动 wrap
  (defadvice isearch-search (after isearch-no-fail activate)
    (unless isearch-success
      (ad-disable-advice 'isearch-search 'after 'isearch-no-fail)
      (ad-activate 'isearch-search)
      (isearch-repeat (if isearch-forward 'forward))
      (ad-enable-advice 'isearch-search 'after 'isearch-no-fail)
      (ad-activate 'isearch-search)))
  ;;
  ;; 重新输入并搜索
  (defmacro isearch-quit-and-run (&rest body)
    "Quit the minibuffer and run BODY afterwards."
    (declare (indent 0))
    `(progn
       (put 'quit 'error-message "")
       (run-at-time nil nil
                    (lambda ()
                      (put 'quit 'error-message "Quit")
                      (with-demoted-errors "Error: %S"
                        ,@body)))
       (isearch-cancel)))

  (defun my/rerun-isearch ()
    "rerun isearch from the original place."
    (interactive)
    (isearch-quit-and-run
      (isearch-forward)))
  )
;; }}}
#+end_src


#+begin_src emacs-lisp :tangle no
;; isearchb

;; misearch
#+end_src

** 宏 macro

#+begin_src emacs-lisp :tangle no
;; edmacro

;; kmacro

;; macroexp
#+end_src

** 对齐与缩进 align & indent

#+begin_src emacs-lisp :tangle no
(use-package align
  :ensure nil
  :defer t
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
;; refresh-file: format/indent elisp file
;; {{{
;; https://github.com/manateelazycat/lazycat-emacs/blob/master/site-lisp/extensions/lazycat/basic-toolkit.el
(defun refresh-file ()
  "Automatic reload current file."
  (interactive)
  (cond ((eq major-mode 'emacs-lisp-mode)
         (indent-buffer)
         (indent-comment-buffer)
         (save-buffer)
         (load-file (buffer-file-name)))
        ((member major-mode '(lisp-mode c-mode perl-mode))
         (indent-buffer)
         (indent-comment-buffer)
         (save-buffer))
        ((member major-mode '(haskell-mode sh-mode))
         (indent-comment-buffer)
         (save-buffer))
        ((derived-mode-p 'scss-mode)
         (require 'css-sort)
         (css-sort))
        (t (message "Current mode is not supported, so not reload"))))
(defun indent-buffer ()
  "Automatic format current buffer."
  (interactive)
  (if (derived-mode-p 'python-mode)
      (message "Don't indent python buffer, it will mess up the code syntax.")
    (save-excursion
      (indent-region (point-min) (point-max) nil)
      (delete-trailing-whitespace)
      (untabify (point-min) (point-max)))))
(defun indent-comment-buffer ()
  "Indent comment of buffer."
  (interactive)
  (indent-comment-region (point-min) (point-max)))

(defun indent-comment-region (start end)
  "Indent region."
  (interactive "r")
  (save-excursion
    (setq end (copy-marker end))
    (goto-char start)
    (while (< (point) end)
      (if (comment-search-forward end t)
          (comment-indent)
        (goto-char end))
      )
    )
  )
;; }}}
#+end_src


** 文本对比与合并 Diff & Merge

#+begin_src emacs-lisp :tangle no
(use-package compare-w
  :ensure nil
  :defer t
  )

(use-package diff
  :ensure nil
  :defer t
  )

(use-package emerge
  :ensure nil
  :defer t
  )

(use-package smerge-mode
  :ensure nil
  :defer t
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package diff-mode
  :ensure nil
  :defer t
  )
#+end_src

** 大纲与折叠 outline & fold

#+begin_src emacs-lisp :tangle no
(use-package allout
  :ensure nil
  )

(use-package allout-widgets
  :ensure nil
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
;; fold
;; {{{
(use-package hideshow
  :ensure nil
  :hook
  (prog-mode . hs-minor-mode)
  :bind
  ("C-c TAB" . hs-toggle-hiding)
  ("M-+" . hs-show-all)
  :config
  (add-to-list 'hs-special-modes-alist
               '(emacs-lisp-mode "{" "}" ";;" nil nil))
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; foldout
#+end_src

** Benchmark & Debug

#+begin_src emacs-lisp :tangle no
(use-package benchmark
  :ensure nil
  )

(use-package backtrace
  :ensure nil
  )

(use-package bug-reference
  :ensure nil
  )

(use-package debug
  :ensure nil
  )

(use-package edebug
  :ensure nil
  )

(use-package gud
  :ensure nil
  )

(use-package trace
  :ensure nil
  )
#+end_src


** ido & fido-vertical-mode

#+begin_src emacs-lisp :tangle yes
;; ido
;; {{{
(use-package ido
  :ensure nil
  :defer 1
  :config
  (setq ido-vertical-mode t)
  (setq ido-enable-flex-matching t)
  )
;; }}}
#+end_src

** Shell Terminal Eshell

locate

term

#+begin_src emacs-lisp :tangle no
(use-package shell
  :ensure nil
  )

;;sh-script
#+end_src

#+begin_src emacs-lisp :tangle yes
(use-package eshell
  :ensure nil
  :bind
  (
   ("C-x s" . eshell)
   ;; :map eshell-mode-map
   ;; (
   ;;("C-l" . eshell-clear)
   ;; ("C-r" . eshell-history)
   ;; )
   )
  :config
  (require 'esh-mode) ; eshell-mode-map
  )
#+end_src

*** eshell completion

#+begin_src emacs-lisp :tangle no
(defun eshell--complete-commands-list ()
  "Generate list of applicable, visible commands."
  (let ((filename (pcomplete-arg)) glob-name)
    (if (file-name-directory filename)
        (if eshell-force-execution
            (pcomplete-dirs-or-entries nil #'file-readable-p)
          (pcomplete-executables))
      (if (and (> (length filename) 0)
               (eq (aref filename 0) eshell-explicit-command-char))
          (setq filename (substring filename 1)
                pcomplete-stub filename
                glob-name t))
      (let* ((paths (eshell-get-path))
             (cwd (file-name-as-directory
                   (expand-file-name default-directory)))
             (path "") (comps-in-path ())
             (file "") (filepath "") (completions ()))
        ;; Go thru each path in the search path, finding completions.
        (while paths
          (setq path (file-name-as-directory
                      (expand-file-name (or (car paths) ".")))
                comps-in-path
                (and (file-accessible-directory-p path)
                     (file-name-all-completions filename path)))
          ;; Go thru each completion found, to see whether it should
          ;; be used.
          (while comps-in-path
            (setq file (car comps-in-path)
                  filepath (concat path file))
            (if (and (not (member file completions)) ;
                     (or (string-equal path cwd)
                         (not (file-directory-p filepath)))
                     (if eshell-force-execution
                         (file-readable-p filepath)
                       (file-executable-p filepath)))
                (setq completions (cons file completions)))
            (setq comps-in-path (cdr comps-in-path)))
          (setq paths (cdr paths)))
        ;; Add aliases which are currently visible, and Lisp functions.
        (pcomplete-uniquify-list
         (if glob-name
             completions
           (setq completions
                 (append (if (fboundp 'eshell-alias-completions)
                             (eshell-alias-completions filename))
                         (eshell-winnow-list
                          (mapcar
                           (lambda (name)
                             (substring name 7))
                           (all-completions (concat "eshell/" filename)
                                            obarray #'functionp))
                          nil '(eshell-find-alias-function))
                         completions))
           (append (and (or eshell-show-lisp-completions
                            (and eshell-show-lisp-alternatives
                                 (null completions)))
                        (all-completions filename obarray #'functionp))
                   completions)))))))
#+end_src


*** executable

#+begin_src emacs-lisp :tangle no

#+end_src

** frame

frameset

#+begin_src emacs-lisp :tangle yes
;; frame
;; {{{
(setq frame-size-history t)
(setq frame-title-format
      '(buffer-file-name (:eval (abbreviate-file-name buffer-file-name))
                         (dired-directory dired-directory "%b")))
;; }}}
#+end_src

*** frame size

#+begin_src emacs-lisp :tangle no
;; Set initial frame size and position
;; https://www.reddit.com/r/emacs/comments/9c0a4d/tip_setting_initial_frame_size_and_position/
(defun my/set-initial-frame ()
  (let* ((base-factor 0.70)
         (a-width (* (display-pixel-width) base-factor))
         (a-height (* (display-pixel-height) base-factor))
         (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
         (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
    (set-frame-position (selected-frame) a-left a-top)
    (set-frame-size (selected-frame) (truncate a-width)  (truncate a-height) t)))
(setq frame-resize-pixelwise t)
(my/set-initial-frame)
#+end_src

#+begin_src emacs-lisp :tangle no
(frame-height)
(frame-width)
#+end_src

#+RESULTS:
: 97

*** frame screenshot                                                  :FIXME:

#+begin_src emacs-lisp :tangle no
(defun my/screenshot-svg ()
  "Save a screenshot of the current frame as an SVG image.
Saves to a temp file to /tmp/ and puts the filename in the kill ring."
  (interactive)
  (let* ((filename (make-temp-file "Emacs" nil ".svg"))
         (data (x-export-frames nil 'svg)))
    (with-temp-file filename
      (insert data))
    (kill-new filename)
    (message filename))
  )
#+end_src

** window

winner

windmove

*** toggle fullscreen

#+begin_src emacs-lisp :tangle yes
(defun my/toggle-fullscreen ()
  (interactive)
  (set-frame-parameter
   nil
   'fullscreen
   (if (frame-parameter nil 'fullscreen)
       nil
     'fullboth))
  )
#+end_src

*** toggle one window

#+begin_src emacs-lisp :tangle yes
;; window
;; {{{
(use-package emacs
  :ensure nil
  :bind
  ("C-c C-w" . my/toggle-one-window)
  :config
  ;; toggle one window
  ;; https://github.com/manateelazycat/toggle-one-window
  (defvar toggle-one-window-window-configuration nil
    "The window configuration use for `toggle-one-window'.")

  (defun my/toggle-one-window ()
    "Toggle between window layout and one window."
    (interactive)
    (if (equal (length (cl-remove-if #'window-dedicated-p (window-list))) 1)
        (if toggle-one-window-window-configuration
            (progn
              (set-window-configuration toggle-one-window-window-configuration)
              (setq toggle-one-window-window-configuration nil))
          (message "No other windows exist."))
      (setq toggle-one-window-window-configuration
	    (current-window-configuration))
      (delete-other-windows)))
  )
;; }}}
#+end_src

*** toggle vertical horizontal split

#+begin_src emacs-lisp :tangle yes
(use-package emacs
  :ensure nil
  :bind
  ("H-w H-w" . my-toggle-vertical-horizontal-split)
  :config
  (defun my-toggle-vertical-horizontal-split ()
    "Switch window split from horizontally to vertically, or vice versa.

i.e. change right window to bottom, or change bottom window to right."
    (interactive)
    (require 'windmove)
    (let ((done))
      (dolist (dirs '((right . down) (down . right)))
        (unless done
          (let* ((win (selected-window))
                 (nextdir (car dirs))
                 (neighbour-dir (cdr dirs))
                 (next-win (windmove-find-other-window nextdir win))
                 (neighbour1 (windmove-find-other-window neighbour-dir win))
                 (neighbour2 (if next-win (with-selected-window
					      next-win
                                            (windmove-find-other-window
					     neighbour-dir
					     next-win))
			       )))
            ;;(message "win: %s\nnext-win: %s\nneighbour1: %s\nneighbour2:%s" win next-win neighbour1 neighbour2)
            (setq done (and (eq neighbour1 neighbour2)
                            (not (eq (minibuffer-window) next-win))))
            (if done
                (let* ((other-buf (window-buffer next-win)))
                  (delete-window next-win)
                  (if (eq nextdir 'right)
                      (split-window-vertically)
                    (split-window-horizontally))
                  (set-window-buffer
		   (windmove-find-other-window neighbour-dir)
		   other-buf)))
	    ))))))
#+end_src

** mode-line

#+begin_src emacs-lisp :tangle yes
;; mode-line
;; {{{
(use-package battery
  :ensure nil
  :defer 2
  :config
  (setq column-number-mode t) ;; 在 mode line 数字形式显示光标所在列
  (display-battery-mode +1)
  )
;; }}}
#+end_src

** 数据库

#+begin_src emacs-lisp :tangle no
;; sql

;; sqlite

;; sqlite-mode
#+end_src

** 数学工具与计算器 math & calc

#+begin_src emacs-lisp :tangle no
(use-package calc
  :ensure nil
  :defer t
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; octave
#+end_src

** 表格 table & chart

#+begin_src emacs-lisp :tangle no
(use-package chart
  :ensure nil
  )

;; ses: Simple Emacs Spreadsheet

;; vtable
#+end_src

** 图表图像 diagram & image

#+begin_src emacs-lisp :tangle no
(use-package artist
  :ensure nil
  )

(use-package exif
  :ensure nil
  )

(use-package ezimage
  :ensure nil
  )

(use-package iimage
  :ensure nil
  )

(use-package image-converter
  :ensure nil
  )

(use-package image-crop
  :ensure nil
  )

(use-package image-dired
  :ensure nil
  )

(use-package svg
  :ensure nil
  )
#+end_src

** 联网工具

#+begin_src emacs-lisp :tangle no
;; dictionary

(use-package browse-url
  :ensure nil
  :defer t
  )

;; dns

;; dns-mode

;; erc

;; nsm

;; pop3

;; rcirc

;; talk

;; tramp

;; webjump
#+end_src

** 网页相关

#+begin_src emacs-lisp :tangle no
;; dom

;; shr

;; eww

;; socks
#+end_src

** Open App

#+begin_src emacs-lisp :tangle yes
;; open app
;; {{{
(defun mac-launchpad/string-ends-with (s ending)
  "Return non-nil if string S ends with ENDING."
  (cond ((>= (length s) (length ending))
         (let ((elength (length ending)))
           (string= (substring s (- 0 elength)) ending)))
        (t nil))
  )

(defun mac-launchpad/find-mac-apps (folder)
  (let* ((files (directory-files folder))
         (without-dots (cl-delete-if
                        (lambda (f)
                          (or (string= "." f)
                              (string= ".." f)))
                        files))
         (all-files (mapcar (lambda (f)
                              (file-name-as-directory
                               (concat (file-name-as-directory folder)
                                       f)))
                            without-dots))
         (result (cl-delete-if-not
                  (lambda (s) (mac-launchpad/string-ends-with s ".app/"))
                  all-files)))
    result)
  )

(defun mac-launchpad ()
  (interactive)
  (let* ((apps (mac-launchpad/find-mac-apps "/Applications"))
         (to-launch (completing-read "launch: " apps)))
    (shell-command
     (format
      "defaults read \"%s\"Contents/Info.plist CFBundleIdentifier | xargs open -b"
      to-launch)))
  )
;; }}}
#+end_src

** Open in ...

*** 图表、音频、视频与 PDF

#+begin_src emacs-lisp :tangle yes
(defun my/webkit-open-local-file (fpath)
  (interactive "fEnter file path: ")
  (when (member (substring fpath -4 nil) '("html" ".pdf" ".mp4"))
    (xwidget-webkit-browse-url
     (concat "file://" (expand-file-name fpath)))
    )
  )
#+end_src

*** System file manager

#+begin_src emacs-lisp :tangle yes
(use-package dired
  :ensure nil
  :bind
  (
   :map dired-mode-map
   ("e" . my/dired-open-in-file-manager)
   )
  :config
  (defun my/dired-open-in-file-manager ()
    "Show current file in desktop.
This command can be called when in a file buffer or in `dired'."
    (interactive)
    (let (($path (if (buffer-file-name) (buffer-file-name) default-directory)))
      (cond
       ((string-equal system-type "windows-nt")
        (shell-command
         (format "PowerShell -Command Start-Process Explorer -FilePath %s"
                 (shell-quote-argument default-directory))))
       ((string-equal system-type "darwin")
        (if (eq major-mode 'dired-mode)
            (let (($files (dired-get-marked-files )))
              (if (eq (length $files) 0)
                  (shell-command
                   (concat "open "
                           (shell-quote-argument
                            (expand-file-name default-directory ))))
                (shell-command
                 (concat "open -R "
                         (shell-quote-argument
                          (car (dired-get-marked-files )))))))
          (shell-command
           (concat "open -R " (shell-quote-argument $path)))))
       ((string-equal system-type "gnu/linux")
        (let ((process-connection-type nil)
              (openFileProgram (if (file-exists-p "/usr/bin/gvfs-open")
                                   "/usr/bin/gvfs-open"
                                 "/usr/bin/xdg-open")))
          (start-process ""
                         nil
                         openFileProgram
                         (shell-quote-argument $path)))))))
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; http://xahlee.info/emacs/emacs/emacs_dired_open_file_in_ext_apps.html
(defun my/dired-open-in-file-manager ()
  "Show current file in desktop.
 (Mac Finder, Windows Explorer, Linux file manager)
 This command can be called when in a file or in `dired'.
URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2018-01-13 adapted by Karl Voit 2018-07-01"
  (interactive)
  (let (($path (file-truename
		(if (buffer-file-name) (buffer-file-name) default-directory ))))
    (cond
     ((string-equal system-type "windows-nt")
      (w32-shell-execute "explore" (replace-regexp-in-string "/" "\\" $path t t)))
     ((string-equal system-type "darwin")
      (if (eq major-mode 'dired-mode)
          (let (($files (dired-get-marked-files )))
            (if (eq (length $files) 0)
                (shell-command
                 (concat "open " (shell-quote-argument default-directory)))
              (shell-command
               (concat "open -R "
		       (shell-quote-argument
			(car (dired-get-marked-files )))))))
        (shell-command
         (concat "open -R " $path))))
     ((string-equal system-type "gnu/linux")
      (let (
            (process-connection-type nil)
            (openFileProgram (if (file-exists-p "/usr/bin/thunar")
                                 "/usr/bin/thunar"
                               "/usr/bin/xdg-open")))
        (start-process "" nil openFileProgram $path))
      ;; (shell-command "xdg-open .") ;; 2013-02-10 this sometimes froze emacs till the folder is closed. eg with nautilus
      ))))
#+end_src

*** Default app

#+begin_src emacs-lisp :tangle yes
;; open in default app
;; {{{
;; https://emacs-china.org/t/pdf/14954/5
(defun my/open-with (arg)
  "使用外部程序打开浏览的文件或者当前光标下的链接.
处于 dired mode 时, 打开当前光标下的文件;
若当前光标下存在链接，使用外部程序打开链接;
使用 prefix ARG 时指定使用的外部程序."
  (interactive "P")
  (let ((current-file-name
         (cond ((eq major-mode 'dired-mode) (dired-get-file-for-visit))
               ((help-at-pt-string)
                (pcase (cdr (split-string (help-at-pt-string) ":" t " "))
                  ((or `(,path) `(,(pred (string= "file")) ,path) `(,_ ,path ,_))
                   (expand-file-name path))
                  (`(,proto ,path) (concat proto ":" path))))
               (t (or (thing-at-point 'url) buffer-file-name))))
        (program (if arg
                     (read-shell-command "Open current file with: ")
                   "open")))
    (call-process program nil 0 nil current-file-name))
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
(defun my-open-in-external-app (&optional file)
  "Open the current FILE or dired marked files in external app.
   The app is chosen from your OS's preference."
  (interactive)
  (message "%s" (concat
                 "my-open-in-external-app called with \""
                 file
                 "\" as argument"))
  ;; FIXXME: add check if FILE is an existing file; show error message if not
  (let ( doIt
         (myFileList
          (cond
           ((string-equal major-mode "dired-mode")
            (dired-get-marked-files))
           ((not file) (list (buffer-file-name)))
           (file (list file)))))

    (setq doIt (if (<= (length myFileList) 5)
                   t
                 (y-or-n-p "Open more than 5 files? ")))

    (when doIt
      (cond
       ((my-system-type-is-windows)
        (mapc (lambda (fPath) (w32-shell-execute
                          "open"
                          (replace-regexp-in-string
                           "/"
                           "\\"
                           fPath
                           t t)))
              myFileList))
       ((string-equal system-type "darwin")
        (mapc (lambda (fPath) (shell-command
                          (format
                           "open \"%s\""
                           fPath)))
              myFileList) )
       ((my-system-type-is-gnu)
        (mapc (lambda (fPath) (let ((process-connection-type nil))
                           (start-process "" nil "xdg-open" fPath)))
              myFileList)
        ))))
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(defun my-dired-open-in-external-app ()
  "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference.
URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2016-10-15"
  (interactive)
  (let* (
         ($file-list
          (if (string-equal major-mode "dired-mode")
              (dired-get-marked-files)
            (list (buffer-file-name))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (w32-shell-execute "open"
			      (replace-regexp-in-string
			       "/"
			       "\\"
			       $fpath t t)))
	 $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))
	 $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath)))
	 $file-list))))))
#+end_src

*** neovide

#+begin_src emacs-lisp :tangle yes
;; Neovide
;; {{{
(defun my/open-in-neovide ()
  (interactive)
  (start-process-shell-command "neovide"
                               nil
                               (concat "neovide "
                                       "+"
                                       (int-to-string (line-number-at-pos))
                                       " "
                                       (buffer-file-name)
                                       )))
;; }}}
#+end_src

*** obsidian

#+begin_src emacs-lisp :tangle yes
;; Obsidian
;; {{{
;; https://emacs-china.org/t/emacs-obsidian/22504/11?u=suliveevil
(defun my/open-in-obsidian () ;; 在 Obsidian 中打开当前 Emacs 正在编辑的文件
  (interactive)
  (browse-url-xdg-open
   (concat "obsidian://open?path=" (url-hexify-string (buffer-file-name)))))
;; }}}
#+end_src

*** vscode

#+begin_src emacs-lisp :tangle yes
;; Visual Studio Code
;; {{{
;; https://github.com/pietroiusti/.emacs.d/blob/master/custom-functions.el
(defun my/open-in-vscode ()
  (interactive)
  (start-process-shell-command "code"
                               nil
                               (concat "code --goto "
                                       (buffer-file-name)
                                       ":"
                                       (int-to-string (line-number-at-pos))
                                       ":"
                                       (int-to-string (current-column)))))
;; (w32-shell-execute "open" "vscode-path" (format "-g %s:%s:%s" (buffer-file-name) (int-to-string (line-number-at-pos)) (int-to-string (current-column))))
;; better solution
;; https://emacs-china.org/t/leader-vscode/19166/29
;; (defun my/open-in-vscode ()
;;   "Open current file with vscode."
;;   (interactive)
;;   (let ((line (number-to-string (line-number-at-pos)))
;;         (column (number-to-string (current-column))))
;;     (apply 'call-process "code" nil nil nil (list (concat buffer-file-name ":" line ":" column) "--goto"))))
;; (keymap-set global-map "C-c C" #'my/open-in-vscode)
;; }}}
#+end_src

** misc

proced

[[https://github.com/Ergus/mini_dotemacs][Ergus/mini_dotemacs: Simple emacs 27 config without any external dependency]]

* org-mode

#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure nil
  :defer 1
  :bind
  (
   :map org-mode-map
   ("C-c l"   . org-store-link) ; C-c C-l org-insert-link
   ("C-c n o" . org-id-get-create)
   ("C-c H-i" . org-insert-structure-template)
   ("C-c H-t" . my/sparse-tree-with-tag-filter)
   )
  :config
  (setq org-directory "~/org-roam")
  ;; (setq org-fold-core-style "overlays")
  ;; (setq org-startup-indented t)
  (setq org-image-actual-width nil)
  (add-to-list 'auto-mode-alist
               '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
  (add-to-list 'org-file-apps '("\\.odp" . "open %s"))
  ;; 标签 tag
  (defun my/sparse-tree-with-tag-filter()
    "asks for a tag and generates sparse tree for
all open tasks in current Org buffer
  that are associated with this tag"
    (interactive "*")
    (setq tag-for-filter
          (org-trim
           (org-icompleting-read "Tags: "
                                 'org-tags-completion-function
                                 nil nil nil 'org-tags-history))
          )
    (org-occur
     (concat "^\\*+ \\(NEXT\\|TODO\\|WAITING\\|STARTED\\) .+:"
             tag-for-filter
             ":")
     )
    )
  )
#+end_src

** UI

#+begin_src emacs-lisp :tangle yes
;; (setq org-hide-leading-stars t) ; Omit headline-asterisks except the last one
(setq org-src-fontify-natively t)  ; code block syntax highlight
#+end_src

** org modules

#+begin_src emacs-lisp :tangle no
(setq org-modules (quote
                   (org-crypt
                    org-id
                    org-info
                    org-habit
                    org-inlinetask
                    org-protocol
                    )
                   )
      )
#+end_src

** narrow

光标位置：在代码块内 (org-in-src-block-p)，在代码块外
当前状态：org-mode, org-src-mode (org-src-mode)

| 光标位置 | mode         | 切换                |
| 代码块内 | org-src-mode | org-edit-src-exit   |
| 代码块外 |              | show-heading-tidily |
| 代码块内 |              | org-edit-special    |

#+begin_src emacs-lisp :tangle yes
;; org-mode: head/title
;; (org-in-src-block-p)
;; {{{
;; 显示当前 heading 内容并折叠其他
;; https://emacstil.com/til/2021/09/09/fold-heading/
(defun my/org-show-current-heading-tidily ()
  (interactive)
  "Show next entry, keeping other entries closed."
  (if (save-excursion (end-of-line) (outline-invisible-p))
      (progn (org-show-entry) (show-children))
    (save-excursion
      (outline-back-to-heading)
      (unless (and (bolp) (org-on-heading-p))
        (org-up-heading-safe)
        (hide-subtree)
        (error "Boundary reached"))
      (org-overview)
      (org-reveal t)
      (org-show-entry)
      (show-children))
    )
  )

(keymap-global-set "C-c H-n" #'my/org-show-current-heading-tidily)

;; (defun my/org-narrow-heading-or-code-block ()
;;   (interactive)
;;   (cond ((org-in-src-block-p)
;;               (org-src-mode)
;;                t)
;;         (org-edit-src-exit)
;;         (org-show-current-heading-tidily)
;;         )
;;   (cond (eq (progn (eq (org-in-src-block-p) t)
;;                    (eq (org-src-mode) nil)) t)
;;         (org-edit-special)
;;         (delete-other-windows)
;;         )

;;   (cond (eq (progn  (eq (org-in-src-block-p) nil)
;;                     (eq (org-src-mode) nil)) t)
;;         (org-show-current-heading-tidily)
;;         )
;;   nil
;;   )
;; (keymap-global-set "C-c H-n" #'my/org-narrow-heading-or-code-block)
;; }}}
#+end_src

** head/title

** org-src: code block

#+begin_src emacs-lisp :tangle yes
(use-package org-src
  :ensure nil
  :defer t
  :config
  (setq org-src-fontify-natively 1)         ;代码块语法高亮
  (setq org-src-tab-acts-natively 1)        ;开启代码块语法缩进/格式化
  (setq org-edit-src-content-indentation 0) ;代码块初始缩进范围
  (setq org-src-lang-modes
        '(
          ("C" . c)
          ("C++" . c++)
          ("asymptote" . asy)
          ("bash" . sh)
          ("beamer" . latex)
          ("calc" . fundamental)
          ("cpp" . c++)
          ("desktop" . conf-desktop)
          ("ditaa" . artist)
          ("dot"  . graphviz-dot)
          ("elisp" . emacs-lisp)
          ("json"  . json-ts)
          ("ocaml" . tuareg)
          ("screen" . shell-script)
          ("shell" . sh)
          ("sqlite" . sql)
          ("toml" . conf-toml)
          ))
  )
#+end_src

#+begin_src emacs-lisp :tangle yes
(setq org-fontify-todo-headline nil)
(setq org-fontify-done-headline nil)

;; org-mode Face for org-id links.                                      ; FIXME
;; (defface my-org-id-link
;;   '((t
;;      :inherit org-link
;;      :underline nil
;;      ;; :foreground "#009600"
;;      :group 'org-faces
;;      ))
;;   :group 'org-faces)
;; (with-eval-after-load 'ol
;;   (org-link-set-parameters "id" :face 'my-org-id-link))
;; }}}
#+end_src

** Link

#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure nil
  :defer t
  :config
  (setq my-linkcolor-org "wheat3")
  (setq my-linkcolor-file "MediumSeaGreen")
  (setq my-linkcolor-web "DeepSkyBlue")

  (defun my-set-linkcolors ()
    "Defines the colors of various link colors"
    (interactive)

    ;; Org links ---------------------------------------------------------------

    (org-link-set-parameters "id"
			     :face
			     `(:foreground ,my-linkcolor-org :underline t))
    (org-link-set-parameters "contact"
			     :face
			     `(:foreground ,my-linkcolor-org :underline t))

    ;; File links --------------------------------------------------------------

    (org-link-set-parameters "file"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))
    ;; defined elsewhere;; (org-link-set-parameters "tsfile" :face '`(:foreground "DarkSeaGreen" :underline t))
    (org-link-set-parameters "pdf"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))

    (org-link-set-parameters "EPA"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "EPAAFO"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "JAFO"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "DAKEPA"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "BMTSK"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "ISO"
			     :face
			     `(:foreground ,my-linkcolor-file :underline t))

    (org-link-set-parameters "gemSpec_DS_Anbieter"
                             :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "gemSpec_Net"
                             :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "gemSpec_PKI"
                             :face
			     `(:foreground ,my-linkcolor-file :underline t))
    (org-link-set-parameters "gemSpec_IDP_Dienst"
                             :face
			     `(:foreground ,my-linkcolor-file :underline t))

    (org-link-set-parameters "messageid"
                             :face
			     `(:foreground ,my-linkcolor-file :underline t))

    ;; Web links ---------------------------------------------------------------

    (org-link-set-parameters "http"
			     :face
			     `(:foreground ,my-linkcolor-web :underline t))
    (org-link-set-parameters "https"
			     :face
			     `(:foreground ,my-linkcolor-web :underline t))
    )

  (defun my-set-linkcolors ()
    "Defines the colors of various link colors"
    (interactive)

    ;; Org links ---------------------------------------------------------------

    (org-link-set-parameters "id"
			     :face
			     '(:foreground "wheat3" :underline t))
    (org-link-set-parameters "contact"
			     :face
			     '(:foreground "wheat3" :underline t))

    ;; File links --------------------------------------------------------------

    (org-link-set-parameters "file"
			     :face
			     '(:foreground "MediumSeaGreen" :underline t))
    ;; defined elsewhere;; (org-link-set-parameters "tsfile" :face ''(:foreground "DarkSeaGreen" :underline t))
    (org-link-set-parameters "pdf"
			     :face
			     '(:foreground "MediumSeaGreen" :underline t))

    (org-link-set-parameters "EPA"
			     :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "EPAAFO"
			     :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "JAFO"
			     :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "DAKEPA"
			     :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "BMTSK"
			     :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "gemSpec_DS_Anbieter"
                             :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "gemSpec_Net"
                             :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "gemSpec_PKI"
                             :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "gemSpec_IDP_Dienst"
                             :face
			     '(:foreground "MediumSeaGreen" :underline t))
    (org-link-set-parameters "messageid"
                             :face
			     '(:foreground "MediumSeaGreen" :underline t))

    ;; Web links ---------------------------------------------------------------

    (org-link-set-parameters "http"
			     :face
			     '(:foreground "DeepSkyBlue" :underline t))
    (org-link-set-parameters "https"
			     :face
			     '(:foreground "DeepSkyBlue" :underline t))

    )

  (my-set-linkcolors) ;; set colors when loading
  )
#+end_src

** URL

*** URL Title                                                        :FIXME:

#+begin_src emacs-lisp :tangle no
(defun my/org-get-url-page-title (url)
  "retrieve title of web page.
from: http://www.opensubscriber.com/message/help-gnu-emacs@gnu.org/14332449.html"
  (interactive)
  (let ((title))
    (with-current-buffer (url-retrieve-synchronously url)
      (goto-char (point-min))
      (re-search-forward "<title>\\([^<]*\\)</title>" nil t 1)
      (setq title (match-string 1))
      (goto-char (point-min))
      (re-search-forward "charset=\\([-0-9a-zA-Z]*\\)" nil t 1)
      (string-replace "&nbsp;" " "
                      ;;(decode-coding-string title (intern (match-string 1)))
                      ;; following line fixes charset issues from
                      ;; previous line:
                      (decode-coding-string title 'utf-8)
                      ))
    )
  )
#+end_src

*** Linkify                                                          :FIXME:

#+begin_src emacs-lisp :tangle no
(defun my/org-url-linkify ()
  "Make URL at cursor point into an Org-mode link.
If there's a text selection, use the text selection as input.

Example: http://example.com/xyz.htm
becomes
\[\[http://example.com/xyz.htm\]\[Source example.com\]\]

Adapted code from: http://ergoemacs.org/emacs/elisp_html-linkify.html"
  (interactive)
  (let (resultLinkStr bds p1 p2 domainName)
    ;; get the boundary of URL or text selection
    (if (region-active-p)
        (setq bds (cons (region-beginning) (region-end)) )
      (setq bds (bounds-of-thing-at-point 'url))
      )
    ;; set URL
    (setq p1 (car bds))
    (setq p2 (cdr bds))
    (let (
          (url (buffer-substring-no-properties p1 p2))
          )
      ;; retrieve title
      (let ((title
	     (my-cliplink-format-and-trim-title
	      (replace-regexp-in-string "\n" " • "
					(my-www-get-page-title url)))))
        ;;(message (concat "title is: " title))
        ;;(setq url (replace-regexp-in-string "&" "&amp;" url))
        (let ((resultLinkStr (concat "[[" url "][" title "]]")))
          ;; delete url and insert the link
          (delete-region p1 p2)
          (insert resultLinkStr)
          )
        )
      )
    )
  )

#+end_src

** 图像

#+begin_src emacs-lisp :tangle yes
(defadvice org-toggle-inline-images (after org-open-at-point activate)
  (if smooth-scrolling-mode (smooth-scrolling-mode -1)
        (smooth-scrolling-mode 1)))
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://stackoverflow.com/a/73426792
(defun org-image-resize (frame)
  (when (derived-mode-p 'org-mode)
    (if (< (window-total-width) 80)
        (setq org-image-actual-width (window-pixel-width))
      (setq org-image-actual-width (* 80 (window-font-width))))
    (org-redisplay-inline-images)))

(add-hook 'window-size-change-functions 'org-image-resize)
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://stackoverflow.com/a/73426792
(defun org-image-resize (frame)
  (when (derived-mode-p 'org-mode)
    (setq org-image-actual-width
          (window-pixel-width)
          ;; (- (window-pixel-width) 20)
          )
    (org-redisplay-inline-images)))

(add-hook 'window-size-change-functions 'org-image-resize)
#+end_src

#+begin_src emacs-lisp :tangle no
(if (not (eq window-system 'x))
    (add-hook 'org-mode-hook
              '(lambda ()
                 (setq org-file-apps
                       (append '(
                                 ("\\.png\\'" . default)
                                 ("\\.jpg\\'" . default)
                                 ("\\.jpeg\\'" . default)
                                 ("\\.tiff\\'" . default)
                                 ("\\.doc\\'" . default)
                                 ("\\.docx\\'" . default)
                                 ("\\.xlsx\\'" . default)
                                 ("\\.pptx\\'" . default)
                                 )
			       org-file-apps )))))
#+end_src

** PDF

#+begin_src emacs-lisp :tangle yes
(use-package org
  :ensure nil
  :defer t
  :config
  (add-to-list
   'org-file-apps
   '("\\.[pP][dD][fF]\\'" . "open %s") ; 使用默认 app 打开 PDF
   ;; '("\\.pdf\\'" . "open -b com.apple.Safari %s")
   )
  )
#+end_src

** org-todo

#+begin_src emacs-lisp :tangle no
(setq org-use-fast-todo-selection t)
#+end_src

#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook
          (lambda ()
            (push '("TODO"  . ?█) prettify-symbols-alist)
            (push '("DONE"  . ?✓) prettify-symbols-alist)
            (push '("WAITING"  . ?…) prettify-symbols-alist)
            (push '("CANCELLED"  . ?×) prettify-symbols-alist)
            (push '("SOMEDAY"  . ??) prettify-symbols-alist)))
#+end_src

#+begin_src emacs-lisp :tangle no
(setq org-todo-keywords (quote
                         (
                          (sequence
			   "TODO(t)"
			   "NEXT(n)"
			   "STARTED(s)"
			   "WAITING(w@/!)"
			   "SOMEDAY(S!)"
			   "|"
			   "DONE(d!/!)"
			   "CANCELLED(c@/!)")
                          )
                         )
      )
#+end_src

#+begin_src emacs-lisp :tangle no
(setq org-todo-keyword-faces
      (quote (
	      ("TODO"      :foreground "lightblue"    :weight bold)
              ("NEXT"      :foreground "red"          :weight bold)
              ("STARTED"   :foreground "red"          :weight bold)
              ("DONE"      :foreground "forest green" :weight bold)
              ("WAITING"   :foreground "orange"       :weight bold)
              ("TEAM"      :foreground "orange"       :weight bold)
              ("SOMEDAY"   :foreground "magenta"      :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("QUOTE"     :foreground "red"          :weight bold)
              ("QUOTED"    :foreground "magenta"      :weight bold)
              ("APPROVED"  :foreground "forest green" :weight bold)
              ("EXPIRED"   :foreground "forest green" :weight bold)
              ("REJECTED"  :foreground "forest green" :weight bold)
              ("OPEN"      :foreground "blue"         :weight bold)
              ("CLOSED"    :foreground "forest green" :weight bold)
              ("PHONE"     :foreground "forest green" :weight bold)
	      )))
#+end_src

** org-agenda

** org-babel

#+begin_src emacs-lisp :tangle no
;; Avoid `org-babel-do-load-languages' since it does an eager require.
(use-package ob-awk
  :ensure nil
  :defer t
  )

(use-package ob-calc
  :ensure nil
  :defer t
  )

(use-package ob-css
  :ensure nil
  :defer t
  )

(use-package ob-dot
  :ensure nil
  :defer t
  )

(use-package ob-emacs-lisp
  :ensure nil
  :defer t
  )

(use-package ob-eshell
  :ensure nil
  :defer t
  )

(use-package ob-gnuplot
  :ensure nil
  :defer t
  )

(use-package ob-js
  :ensure nil
  :defer t
  )

(use-package ob-latex
  :ensure nil
  :defer t
  )

(use-package ob-lua
  :ensure nil
  :defer t
  )

(use-package ob-org
  :ensure nil
  :defer t
  )

(use-package ob-plantuml
  :ensure nil
  :defer t
  )

(use-package ob-python 
:defer t 
:ensure org-plus-contrib 
:commands (org-babel-execute:python)
:config
(setq org-babel-python-command "python3")
)

(use-package ob-sed
  :ensure nil
  :defer t
  )

(use-package ob-shell 
:defer t 
:ensure org-plus-contrib 
:commands 
(org-babel-execute:sh 
org-babel-expand-body:sh 
org-babel-execute:bash 
org-babel-expand-body:bash)
)

(use-package ob-sql
  :ensure nil
  :defer t
  )

(use-package ob-sqlite
  :ensure nil
  :defer t
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (awk         .       t)
   ;; (c           .       t) ; FIXME
   (calc        .       t)
   (comint      .       t)
   (css         .       t)
   (dot         .       t) ; Graphviz
   (emacs-lisp  .       t)
   (eshell      .       t)
   (gnuplot     .       t)
   (haskell     .       t)
   (js          .       t)
   (latex       .       t)
   (lua         .       t)
   (org         .       t) ; 跨文件调用 src block
   (perl        .       t)
   (plantuml    .       t)
   (python      .       t)
   (ruby        .       t)
   (sed         .       t)
   (shell       .       t)
   (sql         .       t)
   (sqlite      .       t)
   ))
#+end_src

*** org-babel-tangle

#+begin_src emacs-lisp :tangle no
(defun org-babel-tangle-config ()
  (when (string-equal (buffer-file-name)
                      (expand-file-name "~/.config/emacs/init.org"))
    (let ((org-config-babel-evaluate nil))
      (org-babel-tangle))))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'after-save-hook #'org-babel-tangle-config)))

#+end_src

#+begin_src emacs-lisp
;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if
;;                                     (y-or-n-p "Reload?")
;;                                  (load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if
;;                                     (y-or-n-p "Tangle?")
;;                                  (org-babel-tangle))) nil t)
;; End:
#+end_src

** org-capture

#+begin_src emacs-lisp :tangle yes
(use-package org-capture
  :ensure nil
  :bind
  ("\e\e c" . (lambda () (interactive) (org-capture)))
  :hook ((org-capture-mode . (lambda ()
                               (setq-local
                                org-complete-tags-always-offer-all-agenda-tags
                                t)))
         (org-capture-mode . delete-other-windows))
  :config
  (setq org-default-notes-file "~/org-roam/notes/inbox.org")
  :custom
  (org-capture-use-agenda-date nil)
  ;; define common template
  (org-capture-templates `(
                           ("t" "Tasks" entry
                            (file+headline "task.org" "Reminders")
                            "* TODO %i%?"
                            :empty-lines-after 1
                            :prepend t)
                           ("n" "Notes" entry
                            (file+headline "capture.org" "Notes")
                            "* %? %^g\n%i\n"
                            :empty-lines-after 1)
                           ;; For EWW
                           ("b" "Bookmarks"
                            entry (file+headline "capture.org" "Bookmarks")
                            "* %:description\n\n%a%?"
                            :empty-lines 1
                            :immediate-finish t)
                           ("d" "Diary")
                           ("dt" "Today's TODO list"
                            entry (file+olp+datetree "diary.org")
                            "* Today's TODO list [/]\n%T\n\n** TODO %?"
                            :empty-lines 1
                            :jump-to-captured t)
                           ("do" "Other stuff"
                            entry (file+olp+datetree "diary.org")
                            "* %?\n%T\n\n%i"
                            :empty-lines 1
                            :jump-to-captured t)
                           ))
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(with-eval-after-load 'org
  (setq org-capture-templates
        '(("i" "Inbox"
           plain (file+olp+datetree
		  (lambda () (concat my-galaxy "/inbox/inbox.org")))
           "**** %?\n%U\n" :time-prompt t :tree-type week)
          ("p" "Daily Plan"
           plain (file+olp+datetree
		  (lambda () (concat my-galaxy "/inbox/plan.org")))
           "- [ ] %?\n%U\n" :time-prompt t :tree-type week)
          ("r" "Reflection"
           plain
           (file+olp+datetree
	    (lambda () (concat my-galaxy "/roam/main/reflection.org")))
           (file "~/.emacs.d/template/tpl-daily-reflection")
           :time-prompt t :tree-type week)
          ("a" "Anki Deck")
          ("ae" "Deck: English"
           entry (file
		  (lambda () (concat my-galaxy "/anki/anki_english.org")))
           "* %?\n" :jump-to-captured t)
          ("ac" "Deck: Civil Engineering"
           entry (file
		  (lambda () (concat my-galaxy "/anki/anki_engineering.org")))
           "* %?\n" :jump-to-captured t)
          ("s" "Code snippets"
           entry (file
		  (lambda () (concat my-galaxy "/scripts/snippets.org")))
           "* %?\t%^g\n#+BEGIN_SRC %^{language}\n\n#+END_SRC")
          ;; ("l" "Lists")
          ("m" "Movie"
           entry (file+headline
		  (lambda () (concat my-galaxy "/roam/main/movie.org")) "Movie list")
           "* %?
:PROPERTIES:
:GENRE: %^{Film genre|Action|Adventure|Comedy|Drama|Fantasy|Horror|Musicals|Mystery|Romance|Science fiction|Sports|Thriller}
:COUNTRY:
:SCORE:
:PLOT: %^{PLOT}
:END:"))))
#+end_src

** org-refile


* 游戏 Game
** 5x5

** blackbox

** bubbles

** dunnet


** gomuku


** hanoi


** life: Conway's Game of Life

** 摩斯电码 morse

** pong


** solitaire

#+begin_src emacs-lisp :tangle no

#+end_src

** 俄罗斯方块 Tetris

* macOS

** macOS Spell Dictionary

#+begin_src emacs-lisp :tangle no
;; macOS spell
;; {{{
;; ~/Library/Spelling/LocalDictionary
;; }}}
#+end_src

** Siri Shortcuts                                                     :macOS:

*** OCR

#+begin_src emacs-lisp :tangle yes
;; Siri Shortcuts: OCR
;; {{{
(defun my/siri-ocr ()
  (interactive)
  (shell-command "shortcuts run \"OCR Selected Area\"")
  (do-applescript "tell application id \"org.gnu.Emacs\" to activate")
  )
(keymap-global-set "C-c H-o" #'my/siri-ocr)
;; }}}
#+end_src

*** Translate

#+begin_src emacs-lisp :tangle yes
;; Siri Shortcuts: Translate
;; {{{
(add-to-list 'display-buffer-alist
             (cons
              "\\*Async Shell Command\\*.*"
              (cons #'display-buffer-no-window nil)))

(defun my/siri-translate ()
  (interactive)
  (let
      ((tempfile
        (make-temp-file "siri-translate-" nil ".txt")
        ))
    (write-region
     (format "%s" (thing-at-point 'paragraph))
     nil
     tempfile)
    (end-of-paragraph-text)             ; jump to end of paragraph
    (shell-command
     (format "shortcuts run \"Translate File\" -i %s &" tempfile))
    )
  (shell-command "open -b org.gnu.Emacs")
  )

;; (keymap-global-set "C-c C-t" #'my/siri-translate)

(defun my/siri-translate2english ()
  (interactive)
  (let
      ((tempfile
        (make-temp-file "siri-translate-" nil ".txt")
        ))
    (write-region
     (format "%s" (thing-at-point 'paragraph))
     nil
     tempfile)
    (end-of-paragraph-text)             ; jump to end of paragraph
    (shell-command
     (format "shortcuts run \"Translate File 2 English\" -i %s &" tempfile))
    )
  (shell-command "open -b org.gnu.Emacs")
  )

;; (keymap-global-set "C-c C-e" #'my/siri-translate2english)

(defun language-to-zh-or-zh-to-english ()
  (interactive) ;; 测试
  (let ((string (thing-at-point 'paragraph)))
    (if (eq (string-match "\\cC" string) nil)
        (my/siri-translate)
      (my/siri-translate2english)
      )
    )
  )

(keymap-global-set "H-t H-t" #'language-to-zh-or-zh-to-english)
;; }}}
#+end_src

** 网络搜索
#+begin_src emacs-lisp :tangle yes
(defun my/open-microsoft-bing ()
  (interactive)
  (xwidget-webkit-browse-url "https://www.bing.com" t)
  )
#+end_src

#+RESULTS:
: my/open-microsoft-bing

** Alfred Search                                                      :macOS:

#+begin_src emacs-lisp :tangle yes
;; Alfred
;; {{{
;; https://github.com/xuchunyang/emacs.d/blob/master/lisp/alfred.el
(defun my/alfred-search (b e)
  "Activate Alfred with selected text."
  (interactive "r")
  (do-applescript
   (format
    "tell application id \"com.runningwithcrayons.Alfred\" to search \"%s\""
           (mapconcat ;; In AppleScript String, " and \ are speical characters
            (lambda (char)
              (pcase char
                (?\" (string ?\\ ?\"))
                (?\\ (string ?\\ ?\\))
                (_   (string char)))
              )
            (buffer-substring b e) "")
           )
   )
  )
;; }}}
#+end_src

** Open in...

*** MacVim

#+begin_src emacs-lisp :tangle yes
;; MacVim
;; {{{
(defun my/open-in-macvim ()
  (interactive)
  (start-process-shell-command "mvim"
                               nil
                               (concat "mvim "
                                       (buffer-file-name)
                                       " -c 'normal "
                                       (int-to-string (line-number-at-pos))
                                       "G"
                                       (int-to-string (current-column))
                                       "|'"
                                       )))
;; }}}
#+end_src

* test

** search/match

#+begin_src emacs-lisp :tangle no

;; (defun language-detect-zh ()
;;   (interactive)
;;   (let ((zh-words 0) (en-words 0))
;;     (with-temp-buffer
;;       (insert (format (thing-at-point 'paragraph)))
;;       (goto-char (point-min))
;;       (while (< (point) (point-max))
;;         (let ((ch (char-to-string (char-after))))
;;           (cond
;;            ((string-match "\\cC" ch)
;;             (let ((start-point (point)))
;;               (forward-word)
;;               (setq zh-words (+ zh-words (- (point) start-point)))))
;;            ((string-match "[a-zA-Z]" ch)
;;             (forward-word)
;;             (setq en-words (1+ en-words)))
;;            (t
;;             (forward-char))))))
;;     (if (< en-words zh-words)
;;      (message "中文")
;;       (message "English")
;;         ;; (cons "zh-CN" "en")
;;       ;; (cons "en" "zh-CN")
;;       )
;;     )
;;   )

;; test my little functions

;; test emacs config
;; (require semantic-mode)
;; (semantic-mode 1)
;; (semantic-stickyfunc-mode 1)

#+end_src

** split config

*** require package config

#+begin_src emacs-lisp :tangle no
;; package config
;; {{{
;; (add-to-list 'load-path "~/.config/emacs/init-package.el")
;; (require 'init-package) ;; packages installed by package.el
;; }}}
(add-to-list 'load-path (expand-file-name
                         "init-pac.el"
                         (concat user-emacs-directory)
                         )
             )
;; require is based on file name instead of what is `provide'?
(require 'init-pac) ; packages configuration
#+end_src

*** require package (in lib/) config

#+begin_src emacs-lisp :tangle no
;; package out of package.el :FIXME:
;; {{{
(add-to-list 'load-path (expand-file-name
                         "init-lib.el"
                         (concat user-emacs-directory)
                         )
             )
;; }}}
(require 'init-lib)     ; packages (out of elpa/melpa) configuration
#+end_src

*** test

#+begin_src emacs-lisp :tangle no
(add-to-list 'load-path (expand-file-name
                         "init-test.el"
                         (concat user-emacs-directory)
                         )
             )
(require 'init-test)    ; test my little functions
#+end_src


* Package (ELPA/MELPA)

** macOS :macOS:

*** osx-dictionary

#+begin_src emacs-lisp :tangle yes
;; dictionary: Apple 词典: osx-dictionary
;; {{{
(use-package osx-dictionary
  :bind
  ("C-c d d" . osx-dictionary-search-word-at-point)
  )
;; }}}
#+end_src
** package database

#+begin_src emacs-lisp :tangle yes
;; package database: epkg + epkgs
;; {{{
(setq epkg-repository "~/Documents/GitHub/epkgs")
(setq package-list-unversioned t) ;; unversioned packages(ibuffer and so on)
;; 怎样快速找到 elpa 目录下那些重复的包 - Emacs China
;; https://emacs-china.org/t/topic/4244
(defun list-packages-and-versions ()
  "Returns a list of all installed packages and their versions"
  (interactive)
  (mapcar
   (lambda (pkg)
     `(,pkg ,(package-desc-version
              (cadr (assq pkg package-alist)))))
   package-activated-list))
;; }}}
#+end_src

** 环境变量

#+begin_src emacs-lisp :tangle yes
;; exec-path-from-shell
;; {{{
(use-package exec-path-from-shell
  :defer nil
  ;; :if (memq window-system '(mac ns x))
  :when (or (memq window-system '(mac ns x))
            (unless (memq system-type '(windows-nt dos))
              (daemonp)))
  :init (exec-path-from-shell-initialize)
  ;; :config
  ;; (progn
  ;;   (when (memq window-system '(mac ns x))
  ;;     (exec-path-from-shell-initialize))

  ;;   (when (daemonp)
  ;;     (exec-path-from-shell-initialize)
  ;;     )
  ;;   )
  )
;; }}}
#+end_src

** 快捷键

*** which-key + posframe

#+begin_src emacs-lisp :tangle yes
(use-package which-key
  :hook (after-init . which-key-mode) ; :init (which-key-mode)
  :config
  ;; (which-key-mode)
  (which-key-posframe-mode)
  (setq
   which-key-idle-delay 0.5
   which-key-idle-secondary-delay 0.5
   which-key-show-operator-state-maps t
   )
  )
#+end_src

*** free-keys

#+begin_src emacs-lisp :tangle yes
;; free-keys
;; {{{
(use-package free-keys
  :ensure nil
  :defer 2
  :config
  (setq free-keys-modifiers '(
                              ""
                              ;; "A"
                              "C"
                              "H"
                              "M"
                              "S"
                              "s"
                              ;; "A-C"
                              ;; "A-H"
                              ;; "A-M"
                              ;; "A-S"
                              ;; "A-s"
                              "C-c H"
                              "C-H"
                              "C-M"
                              ;; "C-S"
                              "C-s"
                              ;; "M-S"
                              ;; "M-s"
                              "s-H"
                              ;; "S-s"
                              ;; "C-M-S"
                              ;; "C-M-s"
                              "C-c"
                              "C-x" ))
  )
;; }}}
#+end_src

** Macro & 多光标

*** multiple-cursors

#+begin_src emacs-lisp :tangle yes
;; multiple-cursors
;; {{{
;; multiple-cursors-mode-enabled-hook
;; multiple-cursors-mode-disabled-hook
(use-package multiple-cursors
  :bind (
         ("H-c H-a" . mc/edit-beginnings-of-lines)
         ("H-c H-e" . mc/edit-ends-of-lines)
         ("H-c H-l" . mc/edit-lines)
         ("H-c H-n" . mc/mark-next-like-this)
         ("H-c H-p" . mc/mark-previous-like-this)
         ("H-c H-h" . mc/mark-all-like-this)
         ("H-c H-r" . set-rectangular-region-anchor)
         )
  :config
  (add-hook 'activate-mark-hook '(lambda ()
                                   (local-set-key
                                    (kbd "C-@")
                                    'set-rectangular-region-anchor)
                                   ))
  
  (add-hook 'deactivate-mark-hook '(lambda ()
                                     (local-unset-key
                                      (kbd "C-@"))
                                     ))
  )
;; }}}
#+end_src

*** macrostep

https://github.com/joddie/macrostep

*** markmacro

** 光标跳转

#+begin_src emacs-lisp :tangle yes
;; avy
;; {{{
;; https://karthinks.com/software/avy-can-do-anything
(use-package avy
  :ensure nil
  :bind
  ;; avy-goto-char-timer
  ("H-j H-j"   . avy-goto-char)
  ("H-j 2"     . avy-goto-char-2)
  ("H-j H-k"   . avy-goto-line)
  ;; ("M-g w"   . avy-goto-word-1)
  ;; ("M-g e"   . avy-goto-word-0)
  ("C-c H-j" . avy-resume)
  :custom
  (avy-background t)
  (avy-keys '(?a ?s ?d ?f ?g ?h ?j ?l ?q ?e ?r ?u ?i ?p ?n))
  :config
    (defun avy-action-embark (pt)
	(unwind-protect
		(save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
	t)
  (setf (alist-get ?e avy-dispatch-alist) 'avy-action-embark)
  )
;; }}}
#+end_src

** 字符/字符串

*** 括号

[[https://github.com/AmaiKinono/puni][AmaiKinono/puni]]

Structured editing (soft deletion, expression navigating & manipulating) that
supports many major modes out of box.

#+begin_src emacs-lisp :tangle yes
(use-package puni
  :ensure nil
  :defer t
  )
#+end_src

*** 近义词/反义词等 parrot

[[https://github.com/dp12/parrot][dp12/parrot: A package to rotate text and party with parrots at the same time]]

#+begin_src emacs-lisp :tangle yes
(use-package parrot
  ;; :defer t
  :bind (
         ;;
         ("H-w r" . parrot-rotate-prev-word-at-point)
         ("H-w t" . parrot-rotate-next-word-at-point)
         ;;
         ("H-k H-k" . parrot-rotate-next-word-at-point)
         ("H-k H-j" . parrot-rotate-prev-word-at-point)
         )
  :config
  (parrot-mode)
  (parrot-set-parrot-type 'emacs)
  (setq parrot-rotate-dict
        '(
          ;; personal setting
          (:rot ("¥" "$" "￥"))
          (:rot ("nil" "t"))
          (:rot ("setq" "defvar"))
          ;;
          (:rot ("alpha" "beta") :caps t :lower nil)
          ;; => rotations are "Alpha" "Beta"

          (:rot ("snek" "snake" "stawp"))
          ;; => rotations are "snek" "snake" "stawp"

          (:rot ("yes" "no") :caps t :upcase t)
          ;; => rotations are "yes" "no", "Yes" "No", "YES" "NO"

          (:rot ("&" "|"))
          ;; => rotations are "&" "|"

          ;; default dictionary starts here ('v')
          (:rot ("begin" "end") :caps t :upcase t)
          (:rot ("enable" "disable") :caps t :upcase t)
          (:rot ("enter" "exit") :caps t :upcase t)
          (:rot ("forward" "backward") :caps t :upcase t)
          (:rot ("front" "rear" "back") :caps t :upcase t)
          (:rot ("get" "set") :caps t :upcase t)
          (:rot ("high" "low") :caps t :upcase t)
          (:rot ("in" "out") :caps t :upcase t)
          (:rot ("left" "right") :caps t :upcase t)
          (:rot ("min" "max") :caps t :upcase t)
          (:rot ("on" "off") :caps t :upcase t)
          (:rot ("prev" "next"))
          (:rot ("start" "stop") :caps t :upcase t)
          (:rot ("true" "false") :caps t :upcase t)
          (:rot ("&&" "||"))
          (:rot ("==" "!="))
          (:rot ("." "->"))
          (:rot ("if" "cond" "else" "elif"))
          (:rot ("ifdef" "ifndef"))
          (:rot ("int8_t" "int16_t" "int32_t" "int64_t"))
          (:rot ("uint8_t" "uint16_t" "uint32_t" "uint64_t"))
          (:rot ("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
          (:rot ("1st" "2nd" "3rd" "4th" "5th" "6th" "7th" "8th" "9th" "10th"))
          )
        )
  )
#+end_src

*** 大小写

** 正则表达式

*** visual-regexp

#+begin_src emacs-lisp :tangle yes
(use-package visual-regexp
  :ensure nil
  :defer 1
  :bind
  (
   ("C-c r e" . vr/replace)
   ("C-c q r" . vr/query-replace)
   ("C-c m m" . vr/mc-mark)        ; for multiple-cursors
   )
  )

(use-package visual-regexp-steroids
  :ensure nil
  :defer 1
  :bind
  (
   :map esc-map
   ("C-r" . vr/isearch-backward)
   ("C-s" . vr/isearch-forward)
   )
  ;; :config
  ;;  (setq vr/engine 'pcre2el) ; emacs python
  ;; (defvar vr--command-python-default
  ;;   (format
  ;;    "python3 %s"
  ;;    (expand-file-name "regexp.py" (file-name-directory load-file-name))))
  )
#+end_src

*** pcre2el

[[https://github.com/joddie/pcre2el][joddie/pcre2el: convert between PCRE, Emacs and rx regexp syntax]]

| Convert from | convert to |
|--------------+------------|
| ELISP        | RX         |
| ELISP        | SRE        |
| ELISP        | string     |
| PCRE         | ELISP      |
| PCRE         | RX         |
| PCRE         | SRE        |
| PCRE         | string     |
| RX           | ELISP      |
| RX           | PCRE       |
| RX           | SRE        |

test

#+begin_src python
re="(([\u2e80-\u9fff]+)([\n\r]{1,2})?([\s\t])?(([\u2e80-\u9fff]+)|(\w)+)([\s\t])?)"
#+end_src

#+begin_src emacs-lisp
(submatch
 (submatch
  (+ (any (48 . 117)))
  )
 (\?
  (submatch (** 1 2 (any 10 13)))
  )
 (\?
  (submatch (any 9 10 12 13 32))
  )
 (submatch (or
            (submatch
             (+ (any (48 . 117))))
            (+
             (submatch (any 95 alnum))
             )
            )
           )
 (\?
  (submatch (any 9 10 12 13 32))
  )
 )
#+end_src

*** xr

** Emacs Lisp

*** 代码分析

elisp-depmap

#+begin_src emacs-lisp :tangle yes

(use-package elisp-depmap
  :ensure nil
  :init
  ;; read-symbol-positions-list is deleted from Emacs 29
  (defvar read-symbol-positions-list nil)
  :bind (
         ("C-c H-d" . elisp-depmap-graphviz-digraph)
         ("C-c H-g" . elisp-depmap-graphviz)
         ("C-c H-s" . elisp-depmap-makesummarytable)
         )
  :config
  (setq elisp-depmap-parse-hashtablesize 1024)
  ;; (elisp-depmap-exec-file "~/.config/emacs/assets/elisp-dep-ana.dot")
  )
#+end_src

*** 辅助编辑

#+begin_src emacs-lisp :tangle no
(use-package lisp
  :hook
  (after-save . check-parens))

(use-package elisp-mode
  :bind
  (:map emacs-lisp-mode-map
        ("C-c C-d C-d" . describe-function)
        ("C-c C-d d" . describe-function)
        ("C-c C-k" . eval-buffer))
  )

(use-package highlight-defined
  :ensure t
  :custom
  (highlight-defined-face-use-itself t)
  :hook
  (help-mode . highlight-defined-mode)
  (emacs-lisp-mode . highlight-defined-mode))

(use-package highlight-quoted
  :ensure t
  :hook
  (emacs-lisp-mode . highlight-quoted-mode))

(use-package highlight-sexp
  :quelpa
  (highlight-sexp
   :repo "daimrod/highlight-sexp" :fetcher github :version original)
  :hook
  (clojure-mode . highlight-sexp-mode)
  (emacs-lisp-mode . highlight-sexp-mode)
  (lisp-mode . highlight-sexp-mode))

(use-package eros
  :ensure t
  :hook
  (emacs-lisp-mode . eros-mode))

(use-package suggest
  :ensure t
  :defer t)

(use-package ipretty
  :defer t
  :ensure t
  :config
  (ipretty-mode 1))

(use-package nameless
  :ensure t
  :hook
  (emacs-lisp-mode .  nameless-mode)
  :custom
  (nameless-global-aliases '())
  (nameless-private-prefix t))

(use-package erefactor
  :ensure t
  :defer t)

(use-package flycheck-package
  :ensure t
  :hook
  (emacs-lisp-mode . flycheck-package-setup))

(use-package elsa
  :defer t
  :ensure t)

(use-package flycheck-elsa
  :ensure t
  :hook
  (emacs-lisp-mode . flycheck-elsa-setup))
#+end_src

*** 格式化 elisp-autofmt

#+begin_src emacs-lisp :tangle yes
(use-package elisp-autofmt
  :commands
  (elisp-autofmt-mode elisp-autofmt-buffer)
  :hook (emacs-lisp-mode . elisp-autofmt-mode)
  )
#+end_src

** undo

#+begin_src emacs-lisp :tangle yes
(use-package vundo
  :ensure nil
  :bind
  (
   ("C-x u" . vundo)
   :map vundo-mode-map
   ("h" . vundo-backward) ; b
   ("j" . vundo-next)     ; n
   ("k" . vundo-previous) ; p
   ("l" . vundo-forward)  ; f
   ;; ("C-g" . vundo-quit)
   ;; ("RET" . vundo-confirm)
   ;; ("a"   . vundo-stem-root)
   ;; ("d"   . vundo--debug)
   ;; ("e"   . vundo-stem-end)
   ;; ("i"   . vundo--inspect)
   ;; ("q"   . vundo-quit)
   )

  )
#+end_src

** isearch-mb

[[https://github.com/astoff/isearch-mb][astoff/isearch-mb]]

[[https://emacs-china.org/t/isearch-mb-minibuffer-isearch-query/17878][isearch-mb: 在 minibuffer 中编辑 isearch query - Emacs China]]

** 文件管理

*** dired-hacks

https://github.com/Fuco1/dired-hacks

*** dired-recent

*** dired-narrow

*** dired-isearch

** git: Magit

#+begin_src emacs-lisp :tangle yes
;; difftastic + magit
;; {{{
;; (with-eval-after-load 'magit
(use-package magit
  ;; :defer 1
  :bind (
         ("C-x g"   . magit-status)
         ("C-c v g" . magit-status)
         ("H-m H-m" . magit-status)
         :map magit-status-mode-map
         ("#" . my/magit-aux-commands)
         )
  :config
  (defun my/magit--with-difftastic (buffer command)
    "Run COMMAND with GIT_EXTERNAL_DIFF=difft then show result in BUFFER."
    (let ((process-environment
           (cons (concat "GIT_EXTERNAL_DIFF=difft --width="
                         (number-to-string (frame-width)))
                 process-environment)))
      ;; Clear the result buffer (we might regenerate a diff, e.g., for
      ;; the current changes in our working directory).
      (with-current-buffer buffer
        (setq buffer-read-only nil)
        (erase-buffer))
      ;; Now spawn a process calling the git COMMAND.
      (make-process
       :name (buffer-name buffer)
       :buffer buffer
       :command command
       ;; Don't query for running processes when emacs is quit.
       :noquery t
       ;; Show the result buffer once the process has finished.
       :sentinel (lambda (proc event)
                   (when (eq (process-status proc) 'exit)
                     (with-current-buffer (process-buffer proc)
                       (goto-char (point-min))
                       (ansi-color-apply-on-region (point-min) (point-max))
                       (setq buffer-read-only t)
                       (view-mode)
                       (end-of-line)
                       ;; difftastic diffs are usually 2-column side-by-side,
                       ;; so ensure our window is wide enough.
                       (let ((width (current-column)))
                         (while (zerop (forward-line 1))
                           (end-of-line)
                           (setq width (max (current-column) width)))
                         ;; Add column size of fringes
                         (setq width (+ width
                                        (fringe-columns 'left)
                                        (fringe-columns 'right)))
                         (goto-char (point-min))
                         (pop-to-buffer
                          (current-buffer)
                          `(;; If the buffer is that wide that splitting the frame in
                            ;; two side-by-side windows would result in less than
                            ;; 80 columns left, ensure it's shown at the bottom.
                            ,(when (> 80 (- (frame-width) width))
                               #'display-buffer-at-bottom)
                            (window-width
                             . ,(min width (frame-width))))))))))))

  (defun my/magit-show-with-difftastic (rev)
    "Show the result of \"git show REV\" with GIT_EXTERNAL_DIFF=difft."
    (interactive
     (list (or
            ;; If REV is given, just use it.
            (when (boundp 'rev) rev)
            ;; If not invoked with prefix arg, try to guess the REV from
            ;; point's position.
            (and (not current-prefix-arg)
                 (or (magit-thing-at-point 'git-revision t)
                     (magit-branch-or-commit-at-point)))
            ;; Otherwise, query the user.
            (magit-read-branch-or-commit "Revision"))))
    (if (not rev)
        (error "No revision specified")
      (my/magit--with-difftastic
       (get-buffer-create (concat "*git show difftastic " rev "*"))
       (list "git" "--no-pager" "show" "--ext-diff" rev))))

  (defun my/magit-diff-with-difftastic (arg)
    "Show the result of \"git diff ARG\" with GIT_EXTERNAL_DIFF=difft."
    (interactive
     (list (or
            ;; If RANGE is given, just use it.
            (when (boundp 'range) range)
            ;; If prefix arg is given, query the user.
            (and current-prefix-arg
                 (magit-diff-read-range-or-commit "Range"))
            ;; Otherwise, auto-guess based on position of point, e.g., based on
            ;; if we are in the Staged or Unstaged section.
            (pcase (magit-diff--dwim)
              ('unmerged (error "unmerged is not yet implemented"))
              ('unstaged nil)
              ('staged "--cached")
              (`(stash . ,value) (error "stash is not yet implemented"))
              (`(commit . ,value) (format "%s^..%s" value value))
              ((and range (pred stringp)) range)
              (_ (magit-diff-read-range-or-commit "Range/Commit"))))))
    (let ((name (concat "*git diff difftastic"
                        (if arg (concat " " arg) "")
                        "*")))
      (my/magit--with-difftastic
       (get-buffer-create name)
       `("git" "--no-pager" "diff" "--ext-diff" ,@(when arg (list arg))))))

  (transient-define-prefix my/magit-aux-commands ()
    "My personal auxiliary magit commands."
    ["Auxiliary commands"
     ("d" "Difftastic Diff (dwim)" my/magit-diff-with-difftastic)
     ("s" "Difftastic Show" my/magit-show-with-difftastic)])

  (transient-append-suffix 'magit-dispatch "!"
    '("#" "My Magit Cmds" my/magit-aux-commands))
  )
;; }}}

;; ;; delta + magit + magit-delta
;; ;; {{{
;; ;; https://scripter.co/using-git-delta-with-magit/
;; (use-package magit-delta
;;  :hook (magit-mode . magit-delta-mode)
;;   )
;; (add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))
;; ;; }}}
#+end_src

git-auto-commit

** 搜索工具

*** wgrep

#+begin_src emacs-lisp :tangle yes
(use-package wgrep
  :ensure nil
  :bind
  (
   :map grep-mode-map
   ("C-c C-q" . wgrep-change-to-wgrep-mode)
   )
  )
#+end_src

*** ripgrep: deadgrep

#+begin_src emacs-lisp :tangle yes
;; deadgrep
;; {{{
(use-package deadgrep
  ;; :defer 1.5
  :bind
  (
   ("C-c d g" . deadgrep)
   ("C-c g o"   . my/grep-org-files)
   :map deadgrep-mode-map
   ("e" . deadgrep-edit-mode)
   :map deadgrep-edit-mode-map ; wgrep
   ("C-c C-c" . deadgrep-mode)
   )
  :config
  (defun my/grep-org-files (words)
    (interactive "sSearch(ripgrep) org-roam files: ")
    (let ((default-directory org-roam-directory)
          (deadgrep--file-type '(glob . "*.org"))
          (deadgrep--context '(1 . 1))
          (deadgrep--search-type 'regexp))
      (deadgrep words)
      )
    )
  )
;; }}}
#+end_src

*** khoj

Natural Language Search

#+begin_src emacs-lisp :tangle no
;; khoj
;; {{{
;; Install Khoj Package from MELPA Stable
(use-package khoj
  :ensure nil
  :defer t
  :bind ("C-c n l" . 'khoj))
;; }}}
#+end_src

** 拼音搜索

*** pinyinlib

#+begin_src emacs-lisp :tangle yes
(use-package pinyinlib
  :ensure nil
  )
#+end_src

*** ace-pinyin

#+begin_src emacs-lisp :tangle yes
;; ace-pinyin
;; {{{
(use-package ace-pinyin
  :defer 1
  :config
  (setq ace-pinyin-use-avy t)
  (ace-pinyin-global-mode +1)
  )
;; }}}
#+end_src

** pyim                                                              :输入法:

搜索中文

#+begin_src emacs-lisp :tangle yes
;; pyim
;; {{{
(use-package pyim
  :ensure nil
  :defer 1
  :bind
  (
   ("H-e" . toggle-input-method)
   ([remap backward-word] . pyim-backward-word)
   ([remap forward-word]  . pyim-forward-word)
   ("H-b" . pyim-backward-word)
   ("H-f" . pyim-forward-word)
   ("H-c H-s" . pyim-convert-string-at-point) ; 金手指：将字符串转换为中文。
   :map minibuffer-local-map
   ("H-c" . pyim-cregexp-convert-at-point) ; 将光标前字符转换为搜索中文的 regexp.
   :map pyim-mode-map
   ("-"   . pyim-page-previous-page)
   ("+"   . pyim-page-next-page)
   ("H-h" . pyim-page-previous-page)
   ("H-l" . pyim-page-next-page)
   )
  :init
  ;; (setq default-input-method "pyim")
  (setq pyim-default-scheme 'quanpin) ; shaungpin/rime
  ;; (setq default-input-method "pyim")
  (setq pyim-page-style 'vertical)
  (setq pyim-page-tooltip '(posframe minibuffer popup))
  (setq pyim-page-length 5)
  :config
  (require 'pyim-cregexp-utils)
  (require 'pyim-cstring-utils)

  ;; (require 'pyim-basedict) ; 拼音词库设置
  ;; (pyim-basedict-enable)   ; 拼音词库
  ;; (require 'pyim-greatdict)
  ;; (pyim-greatdict-enable)
  (require 'pyim-tsinghua-dict)
  (pyim-tsinghua-dict-enable)

  (setq-default pyim-punctuation-translate-p '(auto)) ;; 全角半角

  ;; 让 avy 支持拼音搜索
  (with-eval-after-load 'avy
    (defun my-avy--regex-candidates (fun regex &optional beg end pred group)
      (let ((regex (pyim-cregexp-build regex)))
        (funcall fun regex beg end pred group)))
    (advice-add 'avy--regex-candidates :around #'my-avy--regex-candidates))

  ;; 让 vertico, selectrum 等补全框架，通过 orderless 支持拼音搜索候选项功能。
  (defun my-orderless-regexp (orig-func component)
    (let ((result (funcall orig-func component)))
      (pyim-cregexp-build result)))

  (advice-add 'orderless-regexp :around #'my-orderless-regexp)

  (pyim-isearch-mode -1) ; 性能差，不启用
  )
;; }}}
#+end_src

*** 光标颜色

#+begin_src emacs-lisp :tangle no
(setq pyim-indicator-list (list
                           #'my-pyim-indicator-with-cursor-color
                           #'pyim-indicator-with-modeline
                           )
      )

(defun my-pyim-indicator-with-cursor-color (input-method chinese-input-p)
  (if (not (equal input-method "pyim"))
      (progn
        ;; 用户在这里定义 pyim 未激活时的光标颜色设置语句
        (set-cursor-color "grey")
        )
    (if chinese-input-p
        (progn
          ;; 用户在这里定义 pyim 输入中文时的光标颜色设置语句
          (set-cursor-color "purple")
          )
      ;; 用户在这里定义 pyim 输入英文时的光标颜色设置语句
      (set-cursor-color "green")
      )
    )
  )
#+end_src

*** 输入法切换探针

#+begin_src emacs-lisp : tangle no
;; 探针
(setq-default pyim-english-input-switch-functions
              '(
                pyim-probe-auto-english
                pyim-probe-program-mode
                pyim-probe-dynamic-english
                pyim-probe-isearch-mode
                pyim-probe-org-structure-template
                pyim-probe-org-speed-commands
                )
              )

(setq-default pyim-punctuation-half-width-functions
              '(
                pyim-probe-punctuation-line-beginning
                pyim-probe-punctuation-after-punctuation
                )
              )
#+end_src

#+begin_src emacs-lisp :tangle no
(defun pyim-probe-dynamic-english ()
  "激活这个 pyim 探针函数后，使用下面的规则动态切换中英文输入：
1. 从光标往前找第一个非数字字符，为中文字符时，输入下一个字符时默认开启中文输入
2. 从光标往前找第一个非数字字符，为其他字符时，输入下一个字符时默认开启英文输入
3. 使用 `pyim-convert-string-at-point' 可以将光标前的字符串转换为中文，
   所以用户需要给 `pyim-convert-string-at-point' 绑定一个快捷键，比如：
   (global-set-key (kbd \"M-i\") #\\='pyim-convert-string-at-point)
这个函数用于：`pyim-english-input-switch-functions' 。"
  (let* ((offset 0)
         (non-digit-str-before-1 (pyim-char-before-to-string offset)))
    (while (and non-digit-str-before-1
                (cl-search non-digit-str-before-1 "0123456789"))
      (cl-incf offset)
      (setq non-digit-str-before-1 (pyim-char-before-to-string offset)))
    (if (<= (point) (save-excursion (back-to-indentation)
                                    (point)))
        (not (or (pyim-string-match-p
                  "\\cc"
                  (save-excursion
                    ;; 查找前一个非空格字符。
                    (if (re-search-backward "[^[:space:]\n]" nil t)
                        (char-to-string (char-after (point))))))
                 (> (length (pyim-process-get-entered 'point-before)) 0)))
      (not (or (pyim-string-match-p "\\cc" non-digit-str-before-1)
               (> (length (pyim-process-get-entered 'point-before)) 0))))
    )
  )

(defun pyim-probe-auto-english ()
  "激活这个 pyim 探针函数后，使用下面的规则自动切换中英文输入：
1. 当前字符为英文字符（不包括空格）时，输入下一个字符为英文字符
2. 当前字符为中文字符或输入字符为行首字符时，输入的字符为中文字符
3. 以单个空格为界，自动切换中文和英文字符
   即，形如 `我使用 emacs 编辑此函数' 的句子全程自动切换中英输入法
这个函数用于：`pyim-english-input-switch-functions' 。"
  (let ((str-before-1 (pyim-char-before-to-string 0))
        (str-before-2 (pyim-char-before-to-string 1)))
    (if (> (point) (save-excursion (back-to-indentation)
                                   (point)))
        (or (if (pyim-string-match-p " " str-before-1)
                (pyim-string-match-p "\\cc" str-before-2)
              (and (not (pyim-string-match-p "\\cc" str-before-1))
                   (= (length (pyim-process-get-entered 'point-before)) 0)))))))
#+end_src

** orderless

#+begin_src emacs-lisp :tangle yes
;; orderless: minibuffer filter, works with icomplete
;; {{{
(use-package orderless
  :ensure nil
  :init
  (setq completion-styles '(basic partial-completion orderless))
  ;; (setq completion-styles '(orderless basic initials substring partial-completion flex)
  (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil)
  ;; (setq completion-category-overrides '(
  ;;                                    (file
  ;;                                     (styles basic partial-completion)
  ;;                                     )
  ;;                                    )
  ;;    )
  ;; :config
  ;; ;; make completion support pinyin, refer to
  ;; ;; https://emacs-china.org/t/vertico/17913/2
  ;; ;; list 版
  ;; (defun completion--regex-pinyin (str)
  ;;   (orderless-regexp (pinyinlib-build-regexp-string str))
  ;;   )
  ;; (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
  ;; ;; advice 版
  ;; (defun orderless-regexp-pinyin (str)
  ;;   (setf (car str) (pinyinlib-build-regexp-string (car str)))
  ;;   str)
  ;; (advice-add 'orderless-regexp :filter-args #'orderless-regexp-pinyin)
  )
;; }}}
#+end_src

** emacs-rime

#+begin_src emacs-lisp :tangle no
(defun change-cursor-color-on-input-method ()
  "Set cursor color depending on whether an input method is used or not."
  (interactive)
  (set-cursor-color (if (and (rime--should-enable-p)
                             (not (rime--should-inline-ascii-p))
                             current-input-method)
                        input-method-cursor-color
                      default-cursor-color)))
#+end_src

[[https://github.com/DogLooksGood/emacs-rime][DogLooksGood/emacs-rime: RIME ㄓ in Emacs]]

[[https://github.com/Eason0210/im-cursor-chg][Eason0210/im-cursor-chg]]

** 系统输入法切换                                                    :输入法:

| 当前输入法 | 光标前两个单词中是否有中文 | 空格或制表符数量 | 是否切换 |
|------------+----------------------------+------------------+----------|
| 中文       | 是                         |                0 | 否       |
| 中文       | 是                         |                1 | 否       |
| 中文       | 是                         |                2 | 是       |
| 中文       | 否                         |                0 |          |
| 中文       | 否                         |                1 |          |
| 中文       | 否                         |                2 |          |
| 英文       | 是                         |                0 | 否       |
| 英文       | 是                         |                1 |          |
| 英文       | 是                         |                2 |          |
| 英文       | 否                         |                0 |          |
| 英文       | 否                         |                1 |          |
| 英文       | 否                         |                2 |          |

*** sis

#+begin_src emacs-lisp :tangle no
;; smart-input-source
;; {{{
(use-package sis
  :bind
    ;; ("<f9>" . sis-log-mode) ; 开启日志
  :init
  ;; `C-s/r' 默认优先使用英文 必须在 sis-global-respect-mode 前配置
  (setq sis-respect-go-english-triggers
        (list 'isearch-forward 'isearch-backward) ; isearch-forward 时默认进入 en
        sis-respect-restore-triggers
        (list 'isearch-exit 'isearch-abort))
  :config
  (sis-ism-lazyman-config
   "com.apple.keylayout.ABC"
   "com.apple.inputmethod.SCIM.ITABC"
   'macism
   )
  (sis-global-cursor-color-mode t)
  (sis-global-respect-mode t)
  (sis-global-context-mode t)
  (sis-global-inline-mode t)   ; 中文状态下，中文后<spc>切换英文，结束后切回中文

  ;; 特殊定制
  (setq sis-default-cursor-color "blue" ;; 英文光标色
        sis-other-cursor-color "orange"  ;; 中文光标色 green
        ;; sis-inline-tighten-head-rule 'all ; 删除头部空格，默认 1，删除一个空格，1/0/'all
        sis-inline-tighten-tail-rule 'all ; 删除尾部空格，默认 1，删除一个空格，1/0/'all
        sis-inline-with-english t ; 默认是 t, 中文 context 下输入<spc>进入内联英文
        sis-inline-with-other t) ; 默认是 nil，而且 prog-mode 不建议开启, 英文 context 下输入<spc><spc>进行内联中文
  ;; 特殊 buffer 禁用 sis 前缀,使用 Emacs 原生快捷键  setqsis-prefix-override-buffer-disable-predicates
  (setq sis-prefix-override-buffer-disable-predicates
        (list 'minibufferp
              (lambda (buffer) ; magit revision magit 的 keymap 是基于 text property 的，优先级比 sis 更高。进入 magit 后，disable sis 的映射
                (sis--string-match-p "^magit-revision:" (buffer-name buffer)))
              (lambda (buffer) ; special buffer，所有*打头的 buffer，但是不包括*Scratch* *New, *About GNU 等 buffer
                (and (sis--string-match-p
		      "^\*" (buffer-name buffer))
                     (not (sis--string-match-p
			   "^\*About GNU Emacs" (buffer-name buffer))) ; *About GNU Emacs" 仍可使用 C-h/C-x/C-c 前缀
                     (not (sis--string-match-p
			   "^\*New" (buffer-name buffer)))
                     (not (sis--string-match-p
			   "^\*Scratch" (buffer-name buffer))))))) ; *Scratch*  仍可使用 C-h/C-x/C-c 前缀
  )
;; }}}
#+end_src

** 中英文空格                                                        :format:

#+begin_src emacs-lisp :tangle yes
;; pangu-spacing
;; {{{
(use-package pangu-spacing
  :defer 1
  :config
  (global-pangu-spacing-mode 1)
  (setq pangu-spacing-real-insert-separtor t)
  )
;; }}}
#+end_src

** 拼写检查 spell

*** wucuo

#+begin_src emacs-lisp :tangle yes
;; ispell flyspell: aspell/hunspell
;; (dolist (hook '(text-mode-hook))                          ;; enable in text-mode
;;   (add-hook hook (lambda () (flyspell-mode 1))))
;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook)) ;; disable in change-log-mode
;;   (add-hook hook (lambda () (flyspell-mode -1))))

;; aspell
;; {{{
(setq ispell-program-name "aspell")
;; You could add extra option "--camel-case" for camel case code spell checking if Aspell 0.60.8+ is installed
;; @see https://github.com/redguardtoo/emacs.d/issues/796

;; FIXME args-out-of-range
(setq ispell-extra-args '(
                          "--sug-mode=ultra"
                          "--lang=en_US"
                          "--camel-case"
                          "--run-together"
                          "--run-together-limit=16"
                          ))

;; ispell-personal-dictionary
;; }}}

;; wucuo
;; {{{
;; [redguardtoo](https://github.com/redguardtoo/emacs.d/lisp/init-spelling.el)
(defvar my-default-spell-check-language "en_US"
  "Language used by aspell and hunspell CLI.")

(use-package flyspell
  :bind
  ("C-c s" . flyspell-auto-correct-word)
  ;; You can also use "M-x ispell-word" or hotkey "M-$". It pop up a multiple choice
  ;; @see http://frequal.com/Perspectives/EmacsTip03-FlyspellAutoCorrectWord.html

  ;; flyspell-lazy is outdated and conflicts with latest flyspell
  :config
  ;; better performance
  (setq flyspell-issue-message-flag nil)
  )

;; Basic Logic Summary:
;; If (aspell is installed) { use aspell}
;; else if (hunspell is installed) { use hunspell }
;; English dictionary is used.
;;
;; I prefer aspell because:
;; - aspell is very stable and easy to install
;; - looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(defun my-detect-ispell-args (&optional run-together)
  "If RUN-TOGETHER is true, spell check the CamelCase words.
RUN-TOGETHER makes aspell less capable to find plain English typo.
So it should be used in `prog-mode-hook' only."
  (let* (args)
    (when ispell-program-name
      (cond
       ;; use aspell
       ((string-match "aspell" ispell-program-name)
        ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
        ;; For aspell's option "--lang", "two letter ISO 3166 country code after a underscore" is OPTIONAL.
        (setq args (list "--sug-mode=ultra"
                         (format "--lang=%s" my-default-spell-check-language)))
        ;; "--run-together-min" could not be 3, see `check` in "speller_impl.cpp".
        ;; The algorithm is not precise.
        ;; Run `echo tasteTableConfig | aspell --lang=en_US -C --run-together-limit=16  --encoding=utf-8 -a` in shell.
        (when run-together
          (cond
           ;; Kevin Atkinson said now aspell supports camel case directly
           ;; https://github.com/redguardtoo/emacs.d/issues/796
           ((string-match "--.*camel-case"
                          (shell-command-to-string
                           (concat ispell-program-name " --help")))
            (setq args (append args '("--camel-case"))))

           ;; old aspell uses "--run-together". Please note we are not dependent on this option
           ;; to check camel case word. wucuo is the final solution. This aspell options is just
           ;; some extra check to speed up the whole process.
           (t
            (setq args
                  (append args
                          '("--run-together" "--run-together-limit=16")))))))

       ;; use hunspell
       ((string-match "hunspell" ispell-program-name)
        (setq args nil))))
    args))

;; Aspell Setup (recommended):
;; It's easy to set up aspell. So the details are skipped.
;;
;; Hunspell Setup:
;; 1. Install hunspell from http://hunspell.sourceforge.net/
;;
;; 2. Download openoffice dictionary extension from
;; http://extensions.openoffice.org/en/project/english-dictionaries-apache-openoffice
;;
;; 3. Say `dict-en.oxt' is downloaded. Rename it to `dict-en.zip' and unzip
;; the contents to a temporary folder. Got "en_US.dic" and "en_US.aff" in
;; that folder.
;;
;; 4. Hunspell's option "-d en_US" means finding dictionary "en_US"
;; Modify `ispell-local-dictionary-alist' to set that option of hunspell
;;
;; 5. Copy "en_US.dic" and "en_US.aff" from that temporary folder to
;; the place for dictionary files. I use "~/usr_local/share/hunspell/".
;;
;; 6. Add that folder to shell environment variable "DICPATH"
;;
;; 7. Restart emacs so when hunspell is run by ispell/flyspell to make
;; "DICPATH" take effect
;;
;; hunspell searches a dictionary named "en_US" in the path specified by
;; "DICPATH" by default.

(defvar my-force-to-use-hunspell nil
  "Force to use hunspell.  If nil, try to detect aspell&hunspell.")

(defun my-configure-ispell-parameters ()
  "Set `ispell-program-name' and other parameters."
  (cond
   ;; use aspell
   ((and (not my-force-to-use-hunspell) (executable-find "aspell"))
    (setq ispell-program-name "aspell"))

   ;; use hunspell
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary my-default-spell-check-language)
    (setq ispell-local-dictionary-alist
          (list (list my-default-spell-check-language
                      "[[:alpha:]]" "[^[:alpha:]]" "[']"
                      nil
                      (list "-d" my-default-spell-check-language)
                      nil
                      'utf-8)))
    ;; New variable `ispell-hunspell-dictionary-alist' is defined in Emacs
    ;; If it's nil, Emacs tries to automatically set up the dictionaries.
    (when (boundp 'ispell-hunspell-dictionary-alist)
      (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))

   (t (setq ispell-program-name nil)
      (message "You need install either aspell or hunspell for ispell"))))

;; You could define your own configuration and call `my-configure-ispell-parameters' in "~/.custom.el"
(my-configure-ispell-parameters)

(defun my-ispell-word-hack (orig-func &rest args)
  "Use Emacs original arguments when calling `ispell-word'.
When fixing a typo, avoid pass camel case option to cli program."
  (let* ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    ;; use emacs original arguments
    (setq ispell-extra-args (my-detect-ispell-args))
    (apply orig-func args)
    ;; restore our own ispell arguments
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)))
(advice-add 'ispell-word :around #'my-ispell-word-hack)
(advice-add 'flyspell-auto-correct-word :around #'my-ispell-word-hack)

(defvar my-disable-wucuo nil
  "Disable wucuo.")

(defun my-ensure (feature)
  "Make sure FEATURE is required."
  (unless (featurep feature)
    (condition-case nil
        (require feature)
      (error nil))))

(defun text-mode-hook-setup ()
  "Set up text mode."
  ;; Turn off RUN-TOGETHER option when spell check text.
  (unless my-disable-wucuo
    (setq-local ispell-extra-args (my-detect-ispell-args))
    (my-ensure 'wucuo)
    (wucuo-start)))
(add-hook 'text-mode-hook 'text-mode-hook-setup)

(defun my-clean-aspell-dict ()
  "Clean ~/.aspell.pws (dictionary used by aspell)."
  (interactive)
  (let* ((dict (file-truename "~/.aspell.en.pws"))
         (lines (my-read-lines dict))
         ;; sort words
         (aspell-words (sort (cdr lines) 'string<)))
    (save-buffer)
    (sit-for 1)
    (with-temp-file dict
      (insert (format "%s %d\n%s"
                      "personal_ws-1.1 en"
                      (length aspell-words)
                      (mapconcat 'identity aspell-words "\n"))))))
;; }}}

;; wucuo: aspell or hunspell
;; {{{
(with-eval-after-load 'wucuo
  ;; (setq wucuo-aspell-language-to-use "en")
  ;; (setq wucuo-hunspell-dictionary-base-name "en_US")
  ;; do NOT turn on `flyspell-mode' automatically.
  ;; check buffer or visible region only
  ;; spell check buffer every 30 seconds
  (setq wucuo-update-interval 2)
  )

(setq wucuo-spell-check-buffer-predicate
      (lambda ()
        (not (memq
              major-mode
              '(dired-mode
                log-edit-mode
                compilation-mode
                help-mode
                profiler-report-mode
                speedbar-mode
                gud-mode
                calc-mode
                Info-mode)
              )
             )
        )
      )
;; }}}
#+end_src

** Bookmark 书签

binky-mode

#+begin_src emacs-lisp :tangle yes
;; binky-mode
;; {{{

;; }}}
#+end_src

** 剪贴板 kill-ring/clipboard

#+begin_src emacs-lisp :tangle no
(use-package browse-kill-ring
  :ensure nil
  :bind
  ("C-c H-k" . browse-kill-ring)
  :load-path  (lambda ()
                (expand-file-name
                 (concat
                  my-user-emacs-directory
                  "contrib/")
                 )
                )
;; :load-path (concat my-user-emacs-directory "contrib/")
  :config
  (browse-kill-ring-default-keybindings); map M-y to browse-kill-ring
  )
#+end_src

** snippet

*** YASnippet

#+begin_src emacs-lisp :tangle yes
;; yasnippet
;; {{{
(use-package yasnippet
  :ensure nil
  :diminish yas-minor-mode
  :hook ((after-init . yas-reload-all)
         ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
         )
  :config
  ;; (yas-global-mode 1)
  ;; Suppress warning for yasnippet code.
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

  ;; (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))

  ;; (defun smarter-yas-expand-next-field ()
  ;;   "Try to `yas-expand' then `yas-next-field' at current cursor position."
  ;;   (interactive)
  ;;   (let ((old-point (point))
  ;;         (old-tick (buffer-chars-modified-tick)))
  ;;     (yas-expand)
  ;;     (when (and (eq old-point (point))
  ;;                (eq old-tick (buffer-chars-modified-tick)))
  ;;       (ignore-errors (yas-next-field))))
  ;;   )
  )
;; }}}
#+end_src

*** yankpad

#+begin_src emacs-lisp :tangle no
(use-package yankpad
  :ensure t
  ;; :defer 10
  :init
  (setq yankpad-file (concat user-emacs-directory "yankpad.org"))
  :bind (:map my-map ("SPC" . yankpad-insert)
              ("y" . yankpad-expand)
              )
  :config
  (bind-key "<f7>" 'yankpad-map)
  (bind-key "<f12>" 'yankpad-expand)
  ;; If you want to complete snippets using company-mode
  (add-to-list 'company-backends #'company-yankpad)
  ;; If you want to expand snippets with hippie-expand
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand))
#+end_src

*** Tempel

** 帮助※文档

#+begin_src emacs-lisp :tangle yes
;; helpful
;; {{{
(use-package helpful
  :ensure nil
  :bind
  ;; ("C-h C" . helpful-command) ;; Look up *C*ommands.
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  ;; ("C-h F" . helpful-function) ; functions only
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  ("C-h f" . helpful-callable)    ; both functions and macros
  ("C-h h" . #'helpful-at-point)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable) ; "C-h v"
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key) ; "C-h k"
  ("C-c C-d" . helpful-at-point) ; Lookup the current symbol at point.
  ;; :config
  ;; helpful + ivy
  ;; (setq counsel-describe-function-function #'helpful-callable)
  ;; (setq counsel-describe-variable-function #'helpful-variable)
  )
;; }}}
#+end_src

** UI 提示

*** header

#+begin_src emacs-lisp :tangle yes
;; sticky header: topsy
;; {{{
(use-package topsy
  :ensure nil
  :hook (prog-mode . topsy-mode) ;; (add-hook 'prog-mode-hook #'topsy-mode)
  )
(use-package org-sticky-header
  :ensure nil
  :hook (org-mode . org-sticky-header-mode)
  :config
  (setq org-sticky-header-full-path 'full)
  )
;; }}}
#+end_src

*** 版本控制

#+begin_src emacs-lisp :tangle yes
;; diff-hl
;; {{{
(use-package diff-hl
  :ensure nil
  :hook (
         (dired-mode         . diff-hl-dired-mode-unless-remote)
         (magit-pre-refresh  . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh)
         )
  :init
  (global-diff-hl-mode t)
  :config
  (unless (display-graphic-p)
    (diff-hl-margin-mode))
  )
;; (global-git-gutter-mode +1) ; BUG/Bad performance when deleting folded 17000+lines

;; }}}
#+end_src

*** region: goggles

#+begin_src emacs-lisp :tangle yes
;; goggles: visual hint for operations
;; {{{
(use-package goggles
  :ensure nil
  :hook ((prog-mode text-mode) . goggles-mode)
  :config
  (setq-default goggles-pulse t) ;; set to nil to disable pulsing
  )
;; }}}
#+end_src

*** 括号: highlight-parentheses

#+begin_src emacs-lisp :tangle yes
;; highlight-parentheses
;; {{{
(use-package highlight-parentheses
  ;; :defer 1
  :hook (after-init . highlight-parentheses-mode)
  :config
  (setq-default global-highlight-parentheses-mode t)
  ;; 括号颜色（由内向外）
  (setq-default highlight-parentheses-colors '(
                                       "Green"
                                       "Blue"
                                       "Orange"
                                       "Purple"
                                       "Yellow"
                                       "Red"
                                       ;; "Pink" ;; only six colors supported ?
                                       ))
  )

;; Apple Six Colors
;; (setq highlight-parentheses-colors '("#61BB46" "#FDB827" "#F5821F" "#E03A3E" "#963D97" "#009DDC"))
;;
;; Emacs builtin
;; (setq show-paren-when-point-inside-paren t
;;       show-paren-when-point-in-periphery t)
;; }}}
#+end_src

*** modeline

#+begin_src emacs-lisp :tangle yes
;; doom-modeline
;; {{{
;; (add-hook 'after-init-hook #'doom-modeline-mode)
;; (setq doom-modeline-support-imenu t)
(use-package doom-modeline
  ;; :init (doom-modeline-mode 1)
  :hook (after-init . doom-modeline-mode)
  :custom
  ;; Don't compact font caches during GC. Windows Laggy Issue
  (inhibit-compacting-font-caches t)
  :config
    (setq doom-modeline-minor-modes nil)
  (setq doom-modeline-icon t)
  (setq doom-modeline-major-mode-color-icon t)
  (setq doom-modeline-height 18)
  (setq doom-modeline-window-width-limit 85)
  (setq doom-modeline-icon (display-graphic-p))
  (setq find-file-visit-truename t)
  (setq doom-modeline-highlight-modified-buffer-name t)
  (setq doom-modeline-project-detection 'auto) ;auto/project
  (setq doom-modeline-buffer-file-name-style 'relative-to-project)
  )
;; }}}
#+end_src

*** ICON 图标

#+begin_src emacs-lisp :tangle yes
;; all-the-icons
;; {{{
(use-package all-the-icons
  :ensure nil
  ;; :when (display-graphic-p)
  :if (display-graphic-p)
  :hook
  (
   (dired-mode . all-the-icons-dired-mode)
   (marginalia-mode . all-the-icons-completion-marginalia-setup)
   )
  )

(use-package all-the-icons-completion
  :ensure nil
  :hook
  (
   (after-init . all-the-icons-completion-mode)
   (marginalia-mode . all-the-icons-completion-marginalia-setup)
   )
  )

(use-package all-the-icons-dired
  :ensure nil
  :when (display-graphic-p)
  :hook
  (dired-mode . all-the-icons-dired-mode)
  )
;; }}}
#+end_src

** 折叠

*** origami

#+begin_src emacs-lisp :tangle yes
;; fold: origami
;; {{{
(add-hook 'prog-mode-hook 'origami-mode)
(with-eval-after-load 'origami
  (define-key origami-mode-map (kbd "C-c f") 'origami-recursively-toggle-node)
  (define-key origami-mode-map (kbd "C-c F") 'origami-toggle-all-nodes)
  )
;; }}}
#+end_src

*** hideshow-orgmode

https://github.com/logangrado/hideshow-orgmode

** 选择

*** selected

#+begin_src emacs-lisp :tangle no
(use-package selected
  :diminish selected-minor-mode
  :demand t   ; So we can use global mode enable in :config
  :commands
  (selected-global-mode selected-minor-mode) ; redundant?
  :bind (
         :map selected-keymap           ; bindings for all active regions
         ("q" . selected-off)
         ("u" . upcase-region)
         ("d" . downcase-region)
         )
  :config
  (selected-global-mode)
  )
#+end_src

*** expand-region

#+begin_src emacs-lisp :tangle yes
;; expand-region
;; {{{
(keymap-global-unset "C-=")
(keymap-global-unset "C--")
(use-package expand-region
  :bind (
	 ("C-=" . er/expand-region)
         ("C--" . er/contract-region)
	 )
  )
;; }}}
#+end_src

*** symbol-overlay

#+begin_src emacs-lisp :tangle yes
;; symbol-overlay
;; {{{
(use-package symbol-overlay
  :bind(
        ("M-I" . symbol-overlay-remove-all)
        ("M-i"  . symbol-overlay-put) ; 高亮或取消高亮当前 symbol
        ("M-n"  . symbol-overlay-switch-forward)
        ("M-p"  . symbol-overlay-switch-backward)
        ;; ("<f7>" . symbol-overlay-mode)
        ;; ("<f8>" . symbol-overlay-remove-all)
        :map symbol-overlay-map
        ("<" . symbol-overlay-jump-first)
        (">" . symbol-overlay-jump-last)
        ("R" . symbol-overlay-query-replace)      ; 查找替换 symbol
        ("c" . symbol-overlay-save-symbol)        ; 复制当前 symbol
        ("d" . symbol-overlay-jump-to-definition) ; 跳转到定义
        ("e" . symbol-overlay-echo-mark)          ; 撤销上一次跳转
        ("i" . symbol-overlay-put)                ; 高亮或取消高亮当前 symbol
        ("n" . symbol-overlay-jump-next)
        ("p" . symbol-overlay-jump-prev)
        ("q" . symbol-overlay-remove-all)
        ("r" . symbol-overlay-rename)
        ("s" . symbol-overlay-isearch-literally)  ; 切换为 isearch 并搜索 symbol
        ("t" . symbol-overlay-toggle-in-scope)    ; 切换高亮范围到作用域
        )
  )
;; }}}
#+end_src

** consult

#+begin_src emacs-lisp :tangle yes
;; consult
;; {{{
;; Example configuration for Consult
(use-package consult
  ;; :defer 1
  :after org
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (
         ("C-c f d" . consult-find)
         ("C-c r e" . consult-grep)
         ("C-c r g" . consult-ripgrep)
         ("C-x H-l" . consult-focus-lines)
         ;; C-c bindings (mode-specific-map)
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
	          ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command) ;; orig. repeat-complex-command
         ;; ("C-x b" . consult-buffer)            ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)           ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer) ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop) ;; orig. yank-pop
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)     ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)   ;; orig. goto-line
         ("M-g M-g" . consult-goto-line) ;; orig. goto-line
         ("M-g o" . consult-outline)     ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings (search-map)
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)   ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history) ;; orig. isearch-edit-string
         ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi) ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)  ;; orig. next-matching-history-element
         ("H-r" . consult-history) ;; orig. previous-matching-history-element
         :map org-mode-map
         ("C-c C-j"  . consult-org-heading)
         :map prog-mode-map
         ("C-c C-j"  . consult-outline)
         )
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  ;; macOS locate doesn't support `--ignore-case --existing' args.
  (setq consult-locate-args (pcase system-type
                              ('gnu/linux
                               "locate --ignore-case --existing --regex")
                              ('darwin
                               "mdfind -name")
                              ))
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key (kbd "M-.")
   )

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
(setq consult-ripgrep-args
      "rg --sortr path --null --line-buffered
--color=never --max-columns=1000 --path-separator /
--smart-case --no-heading --line-number --multiline --type org ."
      )
#+end_src


#+begin_src emacs-lisp :tangle no
(use-package consult-project-extra
  :straight t
  :bind
  (
   ("C-c p f" . consult-project-extra-find)
   ("C-c p o" . consult-project-extra-find-other-window)
   )
  )

;; ;; git@github.com:jdtsmith/consult-jump-project.git
;; (use-package consult-jump-project
;;   :load-path "~/code/emacs/consult-jump-project/"
;;   :straight
;;   (consult-jump-project
;;    :type git
;;    :host github
;;    :repo "jdtsmith/consult-jump-project"
;;    )
;;   :custom
;;   (consult-jump-direct-jump-modes '(dired-mode))
;;   :bind
;;   ("C-x p j" . consult-jump-project)
;;   )
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package consult-yasnippet
  :defer t
  :ensure nil
  )
#+end_src

** vertico+posframe

#+begin_src emacs-lisp :tangle yes
;; vertico
;; {{{
(use-package vertico
  :bind
  (
   :map vertico-map
   ("<tab>" . vertico-insert)    ; Choose selected candidate
   ("<escape>" . minibuffer-keyboard-quit) ; Close minibuffer
   )
  :init
  (fido-mode -1)
  (vertico-mode)
  (vertico-mouse-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )

;; Configure directory extension.
(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; ;;  More convenient directory navigation commands
  :bind
  (:map vertico-map
        ("RET" . vertico-directory-enter)
        ("DEL" . vertico-directory-delete-char)
        ("M-DEL" . vertico-directory-delete-word)
        )
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
;; }}}

;; vertico-posframe
;; {{{
(require 'posframe)
(require 'vertico-posframe)
(vertico-posframe-mode 1)
(setq vertico-multiform-commands
      '((consult-line
         posframe
         (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
         (vertico-posframe-border-width . 10)
         ;; NOTE: This is useful when emacs is used in both in X and
         ;; terminal, for posframe do not work well in terminal, so
         ;; vertico-buffer-mode will be used as fallback at the
         ;; moment.
         (vertico-posframe-fallback-mode . vertico-buffer-mode))
        (t posframe)))
(vertico-multiform-mode 1)
(setq vertico-posframe-parameters
      '((left-fringe . 20)
        (right-fringe . 20)))
;; }}}
#+end_src

** marginalia

#+begin_src emacs-lisp :tangle yes
;; marginalia: minibuffer annotations
;; {{{
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  ;; :bind (("C-M-a" . marginalia-cycle)
  ;;        :map minibuffer-local-map
  ;;        ("C-M-a" . marginalia-cycle))
  ;; :custom (marginalia-align 'right)
  :init
  ;; The :init configuration is always executed (Not lazy!)
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  ;; (marginalia-mode)
  :hook (after-init . marginalia-mode)
  )
;;
;; https://emacs-china.org/t/21-emacs-vertico-orderless-marginalia-embark-consult/19683/
(defun marginalia-annotate-command (cand)
  "Annotate command CAND with its documentation string.
Similar to `marginalia-annotate-symbol', but does not show symbol class."
  (when-let* ((sym (intern-soft cand))
              (mode (if (boundp sym)
                        sym
                      (lookup-minor-mode-from-indicator cand))))
    (concat
     (if (and (boundp mode) (symbol-value mode))
         (propertize " On" 'face 'marginalia-on)
       (propertize " Off" 'face 'marginalia-off))
     (marginalia-annotate-binding cand)
     (marginalia--documentation (marginalia--function-doc sym)))))
;; }}}
#+end_src

** embark

#+begin_src emacs-lisp :tangle yes
(use-package embark
  :ensure t
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :bind
  (
   ("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)  ;; alternative for `describe-bindings'
   :map minibuffer-mode-map
   ("H-o" . embark-export)
   )
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package embark-consult
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)
  )
#+end_src

** 文件对比/文本对比 Diff

** org-download

#+begin_src emacs-lisp :tangle no
(setq  org-download-screenshot-method "screencapture -i %s")
#+end_src

** org-modern

#+begin_src emacs-lisp :tangle yes
(use-package org-modern
  :after org
  ;; :hook (org-mode . global-org-modern-mode)
  :config
  (setq
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")

  (if (display-graphic-p)
      (setq org-modern-table t)
    (setq org-modern-table nil)
    )
  (global-org-modern-mode)
  )
#+end_src

** org-crypt

#+begin_src emacs-lisp :tangle no
(when (my-eval-if-binary-or-warn "gpg")
  (require 'org-crypt)
#+end_src

** org-import-calendar

** org-roam

*** basic config

#+begin_src emacs-lisp :tangle yes
;; org-roam: basic config
;; {{{
(use-package org-roam
  :after (org)
  :defer 1
  :init
  (setq org-roam-directory "~/org-roam")
  (setq org-roam-db-location "~/org-roam/org-roam.db")
  :bind (
         ("C-c n a" . org-roam-alias-add)
         ("C-c n A" . org-roam-alias-remove)
         ("C-c n c" . org-roam-capture)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n h" . org-fold-hide-entry)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n j" . org-roam-dailies-capture-today) ;; Dailies
         ("C-c n l" . org-roam-buffer-toggle)
         ("C-c n o" . org-id-get-create)
         ("C-c n r" . org-roam-node-random)
         ("C-c n t" . org-roam-tag-add)
         ("C-c n T" . org-roam-tag-remove)
         )
  :config
  (setq org-roam-db-gc-threshold most-positive-fixnum)
  (setq org-roam-mode-sections
        '((org-roam-backlinks-section :unique t)
          org-roam-reflinks-section
          org-roam-unlinked-references-section))
  (setq org-roam-completion-everywhere t)
  (setq org-roam-file-extensions '("org" "md")) ;; enable Org-roam for markdown
  ;; (setq org-roam-node-display-template "${title:50} ${tags:30}")
  (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))
  (require 'org-roam-protocol)  ;; org-roam-protocol
  (org-roam-db-autosync-mode)
  ;; (org-roam-db-autosync-mode 1) ;; if md-roam installed, move to md-roam config
  )
;; }}}
#+end_src

*** directory

#+begin_src emacs-lisp :tangle no
;; org-roam: directory
;; {{{
;; }}}
#+end_src

*** node

#+begin_src emacs-lisp :tangle no
(defun org-roam-protocol-open-node (info)
  "This handler simply opens the file with emacsclient.
INFO is a plist containing additional information passed by the protocol URL.
It should contain the FILE key, pointing to the path of the file to open.
  Example protocol string:
org-protocol://roam-node?node=uuid"
  (when-let ((node (plist-get info :node)))
    (raise-frame)
    (org-roam-node-visit (org-roam-populate
                          (org-roam-node-create :id node))
                         nil
                         'force)
    )
  nil)

(push '("org-roam-node"
        :protocol "roam-node"
        :function org-roam-protocol-open-node)
      org-protocol-protocol-alist)
#+end_src

#+begin_src emacs-lisp :tangle no
;; org-roam: node directory                                                       ; FIXME
;; {{{
;; (with-eval-after-load 'org-roam
;;   (cl-defmethod org-roam-node-directories ((node org-roam-node))
;;     (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
;;         (format "(%s)" (car (split-string dirs "/")))
;;       ""))
;;   (setq org-roam-node-display-template
;;         "${title:30} ${tags:30} ${directories:15}")
;;   )
;; }}}

;; org-roam: backlink count & node hierarchy
;; {{{
;; ;; https://github.com/Jousimies/.emacs.d/blob/master/lisp/init-roam.el
;; (require 'org)
;; (require 'org-roam)
;; ;;
;; (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
;;   (let* ((count (caar (org-roam-db-query
;;                        [:select (funcall count source)
;;                                 :from links
;;                                 :where (= dest $s1)
;;                                 :and (= type "id")]
;;                        (org-roam-node-id node)))))
;;     (format "[%d]" count)))
;; ;;
;; ;;   (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
;; ;;     "Return the file TITLE for the node."
;; ;;     (if-let ((file (org-roam-node-file node)))
;; ;;         (with-temp-buffer
;; ;;           (insert-file-contents file nil 0 1024)
;; ;;           (cadr (assoc "TITLE"
;; ;;                        (org-collect-keywords (list "TITLE")))))
;; ;;       (cadr (assoc "TITLE"
;; ;;                    (org-collect-keywords (list "TITLE"))))))

;; ;; (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
;; ;;   "Return the hierarchy for the node."
;; ;;   (let ((title (org-roam-node-title node))
;; ;;         (olp (org-roam-node-olp node))
;; ;;         (level (org-roam-node-level node))
;; ;;         (filetitle (org-roam-node-filetitle node)))
;; ;;     (concat
;; ;;      (if (> level 0) (concat filetitle " > "))
;; ;;      (if (> level 1) (concat (string-join olp " > ") " > "))
;; ;;      title))
;; ;;   )
;; ;;
;; (setq org-roam-node-display-template
;;       "${title:30} ${backlinkscount:5} ${tags:30} ${directories:15}")
;; }}}
#+end_src

*** completion

#+begin_src emacs-lisp :tangle no
;; org-roam: completion
;; {{{
;;roam links support auto-completion via completion-at-point
;; call M-x completion-at-point within a roam link.
;; Where the | character represents the cursor:
;; [[|]] : completes for a file title
;; [[roam:]] : completes for a file title
;; [[*|]] : completes for a headline within this file
;; [[foo*|]] : completes a headline within the file with title “foo”
;; [[roam:foo*|]] completes a headline within the file with title “foo”
;; }}}
#+end_src

*** slug

#+begin_src emacs-lisp :tangle no
;; org-roam: slug (called by org-roam-capture-templates)
;; {{{
;; (cl-defmethod org-roam-node-slug ((node org-roam-node))
;;   "Return the slug of NODE."
;;   (let ((title (org-roam-node-title node))
;;         (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
;;                            768 ; U+0300 COMBINING GRAVE ACCENT
;;                            769 ; U+0301 COMBINING ACUTE ACCENT
;;                            770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
;;                            771 ; U+0303 COMBINING TILDE
;;                            772 ; U+0304 COMBINING MACRON
;;                            774 ; U+0306 COMBINING BREVE
;;                            775 ; U+0307 COMBINING DOT ABOVE
;;                            776 ; U+0308 COMBINING DIAERESIS
;;                            777 ; U+0309 COMBINING HOOK ABOVE
;;                            778 ; U+030A COMBINING RING ABOVE
;;                            780 ; U+030C COMBINING CARON
;;                            795 ; U+031B COMBINING HORN
;;                            803 ; U+0323 COMBINING DOT BELOW
;;                            804 ; U+0324 COMBINING DIAERESIS BELOW
;;                            805 ; U+0325 COMBINING RING BELOW
;;                            807 ; U+0327 COMBINING CEDILLA
;;                            813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
;;                            814 ; U+032E COMBINING BREVE BELOW
;;                            816 ; U+0330 COMBINING TILDE BELOW
;;                            817 ; U+0331 COMBINING MACRON BELOW
;;                            )))
;;     (cl-flet* ((nonspacing-mark-p (char)
;;                                   (memq char slug-trim-chars))
;;                (strip-nonspacing-marks (s)
;;                                        (ucs-normalize-NFC-string
;;                                         (apply #'string (seq-remove #'nonspacing-mark-p
;;                                                                     (ucs-normalize-NFD-string s)))))
;;                (cl-replace (title pair)
;;                            (replace-regexp-in-string (car pair) (cdr pair) title)))
;;       (let* ((pairs `(("[^[:alnum:][:digit:]]" . "-") ;; convert anything not alphanumeric
;;                       ("--*" . "-")                   ;; remove sequential underscores
;;                       ("^-" . "")                     ;; remove starting underscore
;;                       ("-$" . "")))                   ;; remove ending underscore
;;              (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
;;         (downcase slug)))))
;; }}}
#+end_src

*** tag

#+begin_src emacs-lisp :tangle yes
;; org-roam: filter tags
;; {{{
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node)))
  )

(defun my/org-roam-list-notes-by-tag (tag-name)
  (interactive)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list)))
  )
;; }}}

;; org-roam: search tag
;; {{{
;; https://emacs-china.org/t/orgmode-tag/21429/15
(defun my/org-roam-node-find-by-tag ()
  (interactive)
  (let ((chosen-tag
         (completing-read "filter by tag: "
                          (seq-uniq
                           (org-roam-db-query
                            [:select [tag]
                                     :from tags ])))))
    (org-roam-node-find
     nil
     nil
     (lambda (node) (member chosen-tag (org-roam-node-tags node))))))
;; }}}
#+end_src

*** template

#+begin_src emacs-lisp :tangle yes
;; org-roam: template,  id (uuid) timestamps and so on
;; {{{
(setq org-roam-capture-templates
      '(
        ;; #+date: %<%Y-%m-%d-%H:%M:%S %Z>\n
        ;; #+date: %<%FT%T%z>\n
        ;; a: audio & music
        ;; A
        ;; B
        ("b" "图书" plain "%?"
         :target (file+head "图书/${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed  t)
        ("c" "角色" plain "%?"
         :target (file+head "topics/角色/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; C
        ("d" "default" plain "%?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :empty-lines 1
         :immediate-finish t
         :unnarrowed  t)
        ;; D
        ("e" "Emacs" plain "%?"
         :target (file+head "Emacs/${slug}.org"
                            "#+title: ${title}\n#+category:\n")
         :immediate-finish t
         :unnarrowed  t)
        ;; E
        ;; f:
        ("f" "Emacs 命令与函数/Command & Function" plain "%?"
         :target (file+head "Emacs/function/${title}.org"
                            "#+title: ${title}\n#+category:\n")
         :immediate-finish t
         :unnarrowed  t)
        ;; F
        ;; g:
        ("G" "游戏" plain "%?"
         :target (file+head "游戏/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("h" "人物" plain "%?"
         :target (file+head "topics/人物/${slug}.org"
                            "#+title: ${title}\n* ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; H
        ;; i:
        ;; I
        ;; j:
        ;; J
        ("k" "Emacs 快捷键/keymap" plain "%?"
         :target (file+head "Emacs/keymap/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; K
        ;; l:
        ;; L
        ("m" "音乐" plain "%?"
         :target (file+head "音乐/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("M" "电影" plain "%?"
         :target (file+head "电影/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; n:
        ;; N
        ;; o:
        ;; O
        ("p" "project" plain "%?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed t)
        ("P" "Emacs 包/插件" plain "%?"
         :target (file+head "Emacs/package/${title}.org"
                            "#+title: ${title}\n#+filetags: :Emacs:\n")
         :immediate-finish t
         :unnarrowed t)
        ;; q:
        ;; Q
        ("r" "reference" plain "%?"
         :target (file+head "reference/${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed t)
        ("R" "纪录片" plain "%?"
         :target (file+head "纪录片/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; s:
        ("s" "软件" plain "%?"
         :target (file+head "software/${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed t)
        ;; S
        ;; t: topic todo
        ("t" "主题" plain "%?"
         :target (file+head "topics/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("T" "电视剧" plain "%?"
         :target (file+head "电视剧/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; u:
        ;; U
        ("v" "Emacs 变量" plain "%?"
         :target (file+head "Emacs/variable/${title}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; V:
        ;; w:
        ;; W
        ;; x:
        ;; X
        ;; y:
        ;; Y
        ;; z:
        ;; Z
        ))
;; }}}
#+end_src

*** UI & ORUI

#+begin_src emacs-lisp :tangle yes
;; org-roam-ui
;; {{{
(use-package org-roam-ui
  :after (org-roam)
  ;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;; a hookable mode anymore, you're advised to pick something yourself
  ;; if you don't care about startup time, use
  ;; :hook (after-init . org-roam-ui-mode)
  :bind (
	 ("C-c n u" . org-roam-ui-open)
	 ("C-c n z" . org-roam-ui-node-zoom)
         )
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t)
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; org-roam: UI
;; {{{
;; (custom-set-faces
;;   '((org-roam-link org-roam-link-current)
;;     :foreground "#e24888" :underline t))
;;
;; (defface my-org-id-link '((t :inherit org-link :slant italic))
;;   "Face for org-id links."
;;   :group 'org-faces)
;; }}}
#+end_src

*** database

#+begin_src emacs-lisp :tangle yes
;; little hack
;; {{{
;; brew install --cask db-browser-for-sqlite
(defun my/org-roam-view-db ()
  (interactive)
  (cond
   ((eq system-type 'darwin)
    (shell-command
     ;; net.sourceforge.sqlitebrowser
     (format
      "open -b \"net.sourceforge.sqlitebrowser\" --args --table nodes %s"
      org-roam-db-location)))
   (t
    (message "my/org-roam-view-db not yet working on this system-type"))))
;; }}}
#+end_src

*** consult-org-roam

#+begin_src emacs-lisp :tangle yes
;; consult-org-roam
;; {{{
(use-package consult-org-roam
  :ensure nil
  :after (org consult)
  :bind
  ;; Define some convenient keybindings as an addition
  ("C-c n b" . consult-org-roam-backlinks)
  ("C-c n l" . consult-org-roam-forward-links)
  ("C-c n s" . consult-org-roam-search)
  ("C-c n F" . consult-org-roam-file-find)
  :custom
  ;; Use `ripgrep' for searching with `consult-org-roam-search'
  (consult-org-roam-grep-func #'consult-ripgrep)
  ;; Configure a custom narrow key for `consult-buffer'
  (consult-org-roam-buffer-narrow-key ?r)
  ;; Display org-roam buffers right after non-org-roam buffers
  ;; in consult-buffer (and not down at the bottom)
  (consult-org-roam-buffer-after-buffers t)
  :config
  ;; Eventually suppress previewing for certain functions
  (consult-customize
   consult-org-roam-forward-links
   :preview-key (kbd "M-.")
   )
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
(require 'consult-org-roam)
;; Activate the minor mode
(consult-org-roam-mode 1)
#+end_src

*** org-similarity

#+begin_src emacs-lisp :tangle yes
;; org-similarity
;; {{{
(use-package org-similarity
  :ensure nil
  :after (org-roam)
  :config
  (with-suppressed-warnings
      (defvaralias
        'org-similarity-directory
        'org-roam-directory)
    )
  (setq org-similarity-language "english")
  (setq org-similarity-number-of-documents 15)
  (setq org-similarity-show-scores t)
  (setq org-similarity-use-id-links t)
  (setq org-similarity-recursive-search t)
  )
;; }}}
#+end_src

*** md-roam

#+begin_src emacs-lisp :tangle yes
;; md-roam
;; {{{
;; https://emacs.stackexchange.com/questions/5465/how-to-migrate-markdown-files-to-emacs-org-mode-format
;; (require 'org-roam)
;; M-x package-vc-install RET https://github.com/nobiot/md-roam.git RET
;; (require 'md-roam)
;; (md-roam-mode 1)           ; md-roam-mode must be active before org-roam-db-sync
;; (setq md-roam-file-extension "md") ; default "md". Specify an extension such as "markdown"
;; (org-roam-db-autosync-mode 1) ; autosync-mode triggers db-sync. md-roam-mode must be already active
;; }}}
#+end_src

** org-ref

** org-mind-map

[[https://github.com/the-ted/org-mind-map][the-ted/org-mind-map]]: This is an emacs package that creates graphviz directed graphs.

** markdown

#+begin_src emacs-lisp :tangle yes
;; markdown-mode
;; {{{
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . gfm-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc")
  :config
  (setq visual-line-column 90)
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-enable-wiki-links t) ;; wikilink/backlink
  (setq markdown-wiki-link-search-type "project")
  (setq markdown-enable-math t)
  )
;; }}}
#+end_src

** RFC

#+begin_src emacs-lisp :tangle yes
;; RFC
;; {{{
(use-package rfc-mode
  :defer t
  :config
  (setq rfc-mode-directory (expand-file-name "~/Documents/GitHub/RFC-all/txt/"))
  (setq rfc-mode-index-path (concat rfc-mode-directory"rfc-index.txt"))
  )
;; }}}
#+end_src

** frame 管理

*** moom

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load "moom"
  (setq moom-use-font-module nil)
  ;; (moom-recommended-keybindings '(all wof))
  (moom-recommended-keybindings '(move fit expand fill font reset undo))
  (when (require 'moom-transient nil t)
    (moom-transient-hide-cursor) ;; if needed
    (define-key moom-mode-map (kbd "C-c o") #'moom-transient-dispatch)
    )
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; moom + transient
;; {{{
(with-suppressed-warnings '(void-function transient-prefix)) ;FIXME
(add-to-list 'warning-suppress-types '((void-function transient-prefix)))
(use-package moom
  ;; :after transcient
  :defer 1
  :ensure nil
  ;; :if (memq window-system '(mac ns x))
  ;; (keymap-global-set "" #'moom-font-increase)
  :commands (moom-transient-dispatch moom-transient-config)
  :config
  (require 'moom-transient)
  (setq moom-use-font-module nil)
  (moom-mode 1)
  (moom-transient-hide-cursor) ;; if needed
  ;; (define-key moom-mode-map (kbd "C-c o") #'moom-transient-dispatch)
  (moom-recommended-keybindings '(move fit expand fill font reset undo))
  )

;; (unless (and (display-graphic-p) (eq system-type 'darwin))
;;   (add-hook 'after-init-hook 'moom-mode)
;;   )
;; }}}
#+end_src

** window 管理

#+begin_src emacs-lisp :tangle yes
;; {{{ ace-window
;; (require 'ace-window)
;; (keymap-global-set "H-o" #'ace-window)
(use-package ace-window
  :ensure nil
  :bind
  ("H-o" . ace-window)
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  )
;; }}}
#+end_src

** 光标跳转

*** goto-line-preview

#+begin_src emacs-lisp :tangle yes
;; goto-line-preview
;; {{{
(use-package goto-line-preview
  :bind
  ([remap goto-line] . goto-line-preview)
  ("C-c H-l" . goto-line-preview)
  )
;; }}}
#+end_src

** UI

#+begin_src emacs-lisp :tangle no
;; ;; olivetti
;; ;; {{{
;; ;; https://emacs-china.org/t/emacs/19797/4
;; (use-package olivetti
;;   :diminish
;;   :bind ("<f8>" . olivetti-mode)
;;   :init
;;   (setq olivetti-body-width 90)         ; default: fill-column+2
;;   (defun xs-toggle-olivetti-for-org ()
;;     "if current buffer is org and only one visible buffer
;;   enable olivetti mode"
;;     (if (and (eq (buffer-local-value 'major-mode (current-buffer)) 'org-mode)
;;              (or (eq (length (window-list nil nil nil)) 1)
;;                  (window-at-side-p (frame-first-window) 'right))) ;; frame-first-window 的 mode 是 org-mode 并且没有右边 window
;;         (olivetti-mode 1)
;;       (olivetti-mode 0)
;;       (when (eq (buffer-local-value 'major-mode (current-buffer)) 'org-mode)
;;         (visual-line-mode 1))))
;;   (add-hook 'org-mode-hook #'xs-toggle-olivetti-for-org)
;;   (add-hook 'window-configuration-change-hook #'xs-toggle-olivetti-for-org))
;; ;; }}}
#+end_src

*** auto-dark

主题跟随系统 UI

#+begin_src emacs-lisp :tangle yes
;; auto-dark
;; {{{
(use-package auto-dark
  :init (auto-dark-mode t)
  :config
  (setq auto-dark-allow-osascript t
        auto-dark-dark-theme 'solarized-dark)
  )
;; }}}
#+end_src

** 图表

*** Graphviz

#+begin_src emacs-lisp :tangle yes
;; graphviz-dot-mode
;; {{{
(use-package graphviz-dot-mode
  :ensure nil
  :defer t
  ;; :bind
  ;; ()
  :config
  (setq graphviz-dot-indent-width 4)
  (setq graphviz-dot-preview-extension "svg")
  )
;; }}}
#+end_src

*** PlantUML

#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook (lambda ()
                           (require 'plantuml)))
(with-eval-after-load 'plantuml
  (setq plantuml-jar-path
        (concat
         (string-trim
          (shell-command-to-string "readlink -f $(brew --prefix plantuml)"))
         "/libexec/plantuml.jar")))
#+end_src

*** D2

** 地图

#+begin_src emacs-lisp :tangle yes
;; osm: OpenStreetMap
;; {{{
(use-package osm
  :defer t
  ;; :after org
  :init
  ;; Load Org link support
  (with-eval-after-load 'org
    (require 'osm-ol))
  :bind (
         ("C-c m h" . osm-home)
         ("C-c m s" . osm-search)
         ("C-c m v" . osm-server)
         ("C-c m t" . osm-goto)
         ("C-c m x" . osm-gpx-show)
         ("C-c m j" . osm-bookmark-jump)
         :map osm-mode-map
         ("q" . (lambda() (interactive) (quit-window t)))
         )
  :custom
  ;; Take a look at the customization group `osm' for more options.
  (osm-server 'default) ;; Configure the tile server
  (osm-copyright t)     ;; Display the copyright information
  )
;; }}}
#+end_src

** 网页浏览、信息订阅、阅读

*** mybigword

#+begin_src emacs-lisp :tangle yes
;; mybigword
;; {{{
(use-package mybigword
  :defer t
  :config
  (setq mybigword-excluded-words
        (split-string (with-temp-buffer
                        (insert-file-contents  (expand-file-name
                                                "assets/mybigword.txt"
                                                (concat user-emacs-directory)
                                                ))
                        (buffer-string)) "[\r\n]+"))
  )
;; mybigword-excluded-words
;; mybigword-personal-excluded-words
;; mybigword-upper-limit
;; }}}
#+end_src

*** elfeed

#+begin_src emacs-lisp :tangle yes
;; elfeed
;; {{{
;; reference: https://github.com/jiacai2050/jiacai2050.github.io/blob/hugo/playground/mu4e-elfeed-config.el
(use-package elfeed
  :defer t
  :ensure nil
  ;; :bind
  ;; (
  ;;  :map elfeed-search-mode-map
  ;;  ("A" . bjm/elfeed-show-all)
  ;;  ("E" . bjm/elfeed-show-emacs)
  ;;  ("D" . bjm/elfeed-show-daily)
  ;;  ("q" . bjm/elfeed-save-db-and-bury)
  ;;  )
  :custom((elfeed-use-curl t)
          (elfeed-db-directory "~/Downloads/elfeed/")
          (elfeed-curl-timeout 20)
          )
  )

;; elfeed-dashboard
(use-package elfeed-dashboard
  :ensure nil
  :after elfeed
  )

;;elfeed-org
(use-package elfeed-org
  :ensure nil
  :defer t
  ;; :after elfeed
  ;; :hook (elfeed-dashboard-mode . elfeed-org)
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.config/emacs/elfeed.org"))
  )
;; }}}
#+end_src

*** nov + shrface + eww :FIXME:

#+begin_src emacs-lisp :tangle no
;; shrface eww nov
;; {{{
(use-package shrface
  :defer t
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t)
  )

(use-package eww
  :defer t
  :init
  (add-hook 'eww-after-render-hook #'shrface-mode)
  :config
  (require 'shrface)
  )

(use-package nov
  :defer t
  :mode ("\\.[eE][pP][uU][bB]\\'" . nov-mode)
  :init
  (add-hook 'nov-mode-hook #'shrface-mode)
  :config
  (
   ;; (setq nov-text-width 80)
   (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
   (add-to-list 'auto-mode-alist '("\\.epub$" . nov-mode))
   (require 'shrface)
   (setq nov-shr-rendering-functions '(
                                       (img . nov-render-img)
                                       (title . nov-render-title)))
   (setq nov-shr-rendering-functions
         (append nov-shr-rendering-functions
                 shr-external-rendering-functions))
   )
  )
;; }}}
#+end_src

*** PDF

#+begin_src emacs-lisp :tangle no
;; ;; pdf-tools
;; ;; {{{
;; ;; https://github.com/furkanusta/dotfiles/blob/master/emacs/dot-emacs.d/elisp/usta-uncategorized.el
;; (use-package pdf-tools
;;   :ensure nil
;;   ;; :magic ("%PDF" . pdf-view-mode)
;;   :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
;;   ;; :hook (
;;     ;; (pdf-view-mode . disable-line-numbers)
;;          ;; (pdf-view-mode . pdf-sync-minor-mode)
;;          ;; (pdf-view-mode . pdf-links-minor-mode)
;;          ;; (pdf-view-mode . pdf-history-minor-mode)
;;          ;; (pdf-view-mode . pdf-annot-minor-mode)
;;          ;; (pdf-view-mode . pdf-view-themed-minor-mode)
;;     ;; )
;;   :custom
;;   (pdf-view-display-size 'fit-page)
;;   ;; (pdf-annot-activate-created-annotations nil)
;;   (pdf-view-resize-factor 1.1)
;;   :bind (:map pdf-view-mode-map
;;          ("M-w" . pdf-view-kill-ring-save)
;;               ("o" . pdf-outline)
;;               ("O" . pdf-occur)
;;               ("M-g M-g" . pdf-view-goto-page)
;;               ("S-SPC" . pdf-view-scroll-down-or-previous-page)
;;          ("<double-wheel-down>" .  pdf-view-next-line-or-next-page)
;;          ("<triple-wheel-down>" .  pdf-view-next-line-or-next-page)
;;          ("j" . pdf-view-next-line-or-next-page)
;;          ("k" . pdf-view-previous-line-or-previous-page)
;;          ("J" . forward-page)
;;          ("K" . backward-page)
;;          ("=" . pdf-view-enlarge)
;;          ("-" . pdf-view-shrink)
;;          ("w" . pdf-view-fit-width-to-window)
;;          ("h" . pdf-view-fit-height-to-window)
;;          ("p" . pdf-view-fit-page-to-window)
;;          ("/" . isearch-forward)
;;     )
;;   )

;; ;; (keymap-set pdf-view-mode "<double-wheel-down>"  #'pdf-view-next-line-or-next-page)
;; ;; (keymap-set pdf-view-mode "<triple-wheel-down>"  #'pdf-view-next-line-or-next-page)
;; ;; }}}
#+end_src

*** 速读 speed-reading

https://github.com/zk-phi/spray

#+begin_src emacs-lisp :tangle no
(use-package spray
  :ensure nil
  :defer 110
  :config ;; executed after loading package
  :bind (:map my-map ("s" . spray-mode))
  )
#+end_src

** 邮件/邮箱

*** notmuch

** crux

[[https://github.com/bbatsov/crux][bbatsov/crux: A Collection of Ridiculously Useful eXtensions for Emacs]]

** emacs-everywhere

#+begin_src emacs-lisp :tangle no
(use-package emacs-everywhere
  :ensure nil
  :defer 110
  :after org
  :config
  ;;2022-10-17 "Reddit" is causing an error?;  (setq emacs-everywhere-markdown-windows ("Reddit" "Stack Exchange" "Stack Overflow" "Discord" "Element" "Slack" "HedgeDoc" "HackMD" "Zulip" "Pull Request" "Issue" "Comparing .*\\.\\.\\."))
  (setq emacs-everywhere-frame-name-format
        "Emacs Everywhere • C-c C-c • %s — %s")
  (setq emacs-everywhere-frame-parameters
        `((name . "emacs-everywhere")
          (width . 100)
          (height . 30)
          )))
#+end_src

* Package (Git and elsewhere)

** macOS :macOS:

*** org-mac-link

#+begin_src emacs-lisp :tangle yes
;; org-mac-link
;; {{{
(use-package org-mac-link
  :ensure nil
  :bind
  ("H-i H-i" . org-mac-link-get-link)
  )
;; }}}
#+end_src

** mode
*** mode-minder

#+begin_src emacs-lisp :tangle yes
(use-package mode-minder
  :ensure nil
  :defer t
  )
#+end_src

** explain-pause-mode

[[https://github.com/lastquestion/explain-pause-mode][lastquestion/explain-pause-mode: top, but for Emacs.]]

#+begin_src emacs-lisp :tangle yes
(use-package explain-pause-mode
  :ensure nil
  :defer 1
  )
;; (run-with-idle-timer
;;  1 nil
;;  #'(lambda ()
;;      (require 'explain-pause-mode)
;;      ))
#+end_src

** browser-hist

#+begin_src emacs-lisp :tangle yes

(use-package browser-hist
  :ensure nil
  :init
  (use-package sqlite)
  :bind
  ("H-s H-s" . browser-hist-search)
  :config
  (setq browser-hist-db-paths
        '(
          (chrome . "$HOME/Library/Application Support/Google/Chrome/Default/History")
          (brave . "$HOME/Library/Application Support/BraveSoftware/Brave-Browser/Default/History")
          (firefox . "$HOME/Library/Application Support/Firefox/Profiles/*.default-release/places.sqlite")
          (safari . "$HOME/Library/Safari/History.db")
          ))
  (setq browser-hist-default-browser 'safari) ; FIXME
  :commands
  (browser-hist-search)
  )
#+end_src

** 字符

*** 字符统计 advance-words-count

[[https://github.com/LdBeth/advance-words-count.el][LdBeth/advance-words-count.el: Extended `count-words' function]]

#+begin_src emacs-lisp :tangle yes
(use-package advance-words-count
  :ensure nil
  ;; :defer 2
  :bind
  ("C-c w c" . advance-words-count)
  )
#+end_src

*** Fuck

#+begin_src emacs-lisp :tangle no
;; fuck
;; {{{
(require 'fuck)
(keymap-global-set "H-k" #'fuck)
;; }}}
#+end_src

** 快捷键历史记录

#+begin_src emacs-lisp :tangle yes
;; keyfreq: Track Emacs commands frequency
;; {{{
;; keyfreq fork: keyfreq-html-v2 show keyboard heat map
(require 'keyfreq) ;; 导入插件包
(setq keyfreq-folder  (expand-file-name
                       "lib/keyfreq"
                       (concat user-emacs-directory)
                       )
      )
(keyfreq-mode 1)          ;; 启动插件包
(keyfreq-autosave-mode 1) ;; 自动保存模式
(setq-default keyfreq-file (expand-file-name
                            "assets/keyfreq-log"
                            (concat user-emacs-directory)
                            )
              )
;; (defun turnon-keyfreq-mode ()
;;   "Turn on keyfreq."
;;   (interactive)
;;   (my-run-with-idle-timer 4 (lambda () ;; ;; Fire up keyfreq a few seconds later to start up emacs faster
;;                               (keyfreq-mode 1)
;;                               (keyfreq-autosave-mode 1))))
;;
;; }}}

;; keyferq: 排除命令: exclude commands
;; {{{
(with-eval-after-load 'keyfreq
  (setq keyfreq-excluded-commands
        '(
          ;; abort-recursive-edit
          ;; ace-window
          ;; avy-goto-line
          ;; backward-char
          ;; clipboard-kill-ring-save
          ;; comint-previous-input
          ;; comint-send-input
          ;; delete-backward-char
          ;; describe-variable
          ;; electric-pair-delete-pair
          ;; eval-buffer
          ;; exit-minibuffer
          ;; ffip
          ;; forward-char
          ;; goto-line
          ;; hippie-expand
          ;; indent-new-comment-line
          ;; ispell-minor-check
          ;; js-mode
          ;; js2-line-break
          ;; kill-sentence
          ;; left-char
          ;; mac-mwheel-scroll
          ;; magit-next-line
          ;; magit-previous-line
          ;; markdown-exdent-or-delete
          ;; markdown-outdent-or-delete
          ;; minibuffer-complete
          ;; minibuffer-complete-and-exit
          ;; minibuffer-keyboard-quit
          ;; mouse-drag-region
          ;; mouse-set-point
          ;; move-beginning-of-line
          ;; move-end-of-line
          mwheel-scroll
          ;; my-company-number
          ;; my-setup-develop-environment
          ;; newline-and-indent
          ;; next-history-element
          ;; next-line
          ;; package-menu-execute
          ;; pcomplete
          ;; previous-history-element
          ;; previous-line
          ;; push-button
          ;; pwd
          ;; quit-window
          ;; recenter-top-bottom
          ;; right-char
          ;; rjsx-electric-gt
          ;; rjsx-electric-lt
          org-self-insert-command
          self-insert-command
          ;; shellcop-erase-buffer
          ;; smarter-move-beginning-of-line
          ;; suspend-frame
          ;; term-send-raw
          ;; turnon-keyfreq-mode
          ;; typescript-insert-and-indent
          ;; undefined ;; lambda function
          ;; wgrep-finish-edit
          ;; xterm-paste
          ;; yank
          )) )
;; }}}

;; keyfreq: 正则表达式排除模式, excluded regexp
;; {{{
;; (with-eval-after-load 'keyfreq
;; (setq keyfreq-excluded-regexp
;;       '(
;;         "^ace-jump-"
;;         "^backward-"
;;         "^company-"
;;         "^dired"
;;         "^evil-"
;;         "^forward-"
;;         "^general-dispatch-self-insert-command-"
;;         "^gnus-"
;;         "^ido-"
;;         "^isearch-"
;;         "^ivy-"
;;         "^keyboard-"
;;         "^keyfreq-"
;;         "^my-hydra-.*/body"
;;         "^next-"
;;         "^org-"
;;         "^paredit-"
;;         "^save-"
;;         "^scroll-"
;;         "^select-window-"
;;         "^undo-"
;;         "^w3m-"
;;         "^web-mode"
;;         "^y-or-n-"
;;         "^yas-"
;;         "emms-"
;;        )))
;; }}}
#+end_src

** 帮助※文档

#+begin_src emacs-lisp :tangle yes
;; elisp-demos
;; {{{
(advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
;; }}}
#+end_src

** Minibuffer

#+begin_src emacs-lisp :tangle no
;; minibuffer + aggressive-completion
;; https://emacs-china.org/t/helm-ivy-selectrum-completions-buffer/17148/44
;; {{{
(use-package minibuffer
  :init
  (keymap-unset minibuffer-local-completion-map "SPC")
  :bind
  (:map completion-list-mode-map
        ("z" . switch-to-minibuffer))
  :custom
  (isearch-allow-scroll t)
  ;; (enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode t)
  (minibuffer-electric-default-mode t)
  ;; Don't insert completion at point into minibuffer
  (minibuffer-completion-auto-choose nil)
  ;; One frame one minibuffer.
  (minibuffer-follows-selected-frame nil)
  (read-buffer-completion-ignore-case t)
  (read-file-name-completion-ignore-case t)
  (minibuffer-default-prompt-format " [%s]")
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  (resize-mini-windows t)
  (completion-auto-help t)
  (completion-show-help nil)
                                        ;(completion-show-inline-help nil)
  (completion-cycle-threshold nil)
  ;; `t' `second-tab' `nil'
  (completion-auto-select 'seond-tab)
  (completions-detailed t)
  ;; Ignore cases when complete
  (completion-ignore-case t)
  ;; vertical display
  (completions-format 'one-column)
  (completions-max-height 7)
  (completions-sort #'completion:list-sort)
  :config
  ;; Hide the mode line of the Completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Completions\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  (defun completion:list-sort (all)
    "对 `Completions-buffer' 中的补全项进行排序"
    (let ((hist (minibuffer-history-value)))
      (thread-first all
                    (sort (lambda (c1 c2) (< (length c1) (length c2))))
                    (sort (lambda (c1 c2) (> (length (member c1 hist))
                                             (length (member c2 hist)))))))))

(use-package all-the-icons-completion
  :straight t
  :hook (after-init-hook . all-the-icons-completion-mode))

(use-package aggressive-completion
  :straight t
  :bind
  (:map aggressive-completion-minibuffer-map
        ("TAB" . completion:auto-select))
  :hook
  (after-init-hook . aggressive-completion-mode)
  :config
  (add-hook 'aggressive-completion-mode-hook #'completion:disable-auto-select)
  (defun completion:disable-auto-select ()
    ;; 避免自动切换至 `Completions-buffer' 中的补全项
    (setq completion-auto-select nil
          ;; 禁止 `minibuffer' 中的补全
          completion-cycle-threshold nil))

  (defun completion:auto-select ()
    "`TAB' 键可切换至 `Completions-buffer' 中的补全项"
    (interactive)
    (let ((completion-auto-select t))
      (minibuffer-complete))))
;; }}}
#+end_src

** LSP

*** lsp-bridge

#+begin_src emacs-lisp :tangle yes
;; lsp-bridge                                        ; FIXME
;; {{{
(use-package lsp-bridge
  :ensure nil
  :after (yasnippet)
  :hook (prog-mode . lsp-bridge-mode)
  :init
  (setq-default lsp-bridge-enable-mode-line nil)
  ;; (setq lsp-bridge-use-ds-pinyin-in-org-mode t)
  ;; (setq lsp-bridge-use-wenls-in-org-mode t)
  (setq acm-enable-quick-access t)
  (setq acm-quick-access-modifier 'meta)
  ;; :hook ((prog-mode org-mode) . lsp-bridge-mode)

  :bind (
         :map acm-mode-map
         ("C-j"       . acm-insert-common)
         ;; complete
         ("SPC"       . acm-complete)
         ("RET"       . acm-complete)
         ;; select
         ("TAB"       . acm-select-next)
         ("<backtab>" . acm-select-prev)
         ;; ("H-TAB" . acm-select-prev)
         ("H-j"       . acm-select-next)
         ("H-k" . acm-select-prev)
         )
  ;; :custom
  :config
  ;; lsp-bridge-org-babel-lang-list
  ;; default: clojure latex python
  (add-to-list 'lsp-bridge-org-babel-lang-list "emacs-lisp")
  (add-to-list 'lsp-bridge-org-babel-lang-list "shell")
  )
;; }}}
#+end_src

#+begin_src emacs-lisp
(setq lsp-bridge-default-mode-hooks
      (remove 'org-mode-hook lsp-bridge-default-mode-hooks))
#+end_src

#+begin_src emacs-lisp :tangle no
;; (keymap-set acm-mode-map "H-;" 'lsp-bridge-toggle-sdcv-helper)
;; (define-key map [remap next-line] #'acm-select-next)
;; (define-key map [remap previous-line] #'acm-select-prev)
;; (define-key map [down] #'acm-select-next)
;; (define-key map [up] #'acm-select-prev)
;; (define-key map [tab]  #'acm-complete)
;; (define-key map "\M-n" #'acm-select-next)
;; (define-key map "\M-p" #'acm-select-prev)
;; (define-key map "\M-," #'acm-select-last)
;; (define-key map "\M-." #'acm-select-first)
;; (define-key map "\C-m" #'acm-complete)
;; (define-key map "\t" #'acm-complete)
;; (define-key map "\n" #'acm-complete)
;; (define-key map "\M-h" #'acm-complete)
;; (define-key map "\M-H" #'acm-insert-common)
;; (define-key map "\M-u" #'acm-filter)
;; (define-key map "\M-d" #'acm-doc-toggle)
;; (define-key map "\M-j" #'acm-doc-scroll-up)
;; (define-key map "\M-k" #'acm-doc-scroll-down)
;; (define-key map "\M-l" #'acm-hide)
;; (define-key map "\C-g" #'acm-hide)
#+end_src

#+begin_src emacs-lisp :tangle no
;; (run-with-idle-timer
;;  1 nil
;;  #'(lambda ()
;;      (require 'yasnippet)
;;      (yas-global-mode 1)
;;      (require 'lsp-bridge)
;;      (global-lsp-bridge-mode)
;;      ))
(require 'yasnippet)
(yas-global-mode 1)
(require 'lsp-bridge)
;; (keymap-set acm-mode-map "ESC"       'acm-hide)   ; FIXME
(keymap-unset acm-mode-map "SPC")
(keymap-unset acm-mode-map "RET")
(keymap-unset acm-mode-map "TAB")
(keymap-unset acm-mode-map "<tab>")
;; complete
(keymap-set acm-mode-map "SPC"       'acm-complete)
(keymap-set acm-mode-map "RET"       'acm-complete)
;; select 方案一
(keymap-set acm-mode-map "TAB"       'acm-select-next)
(keymap-set acm-mode-map "H-TAB"       'acm-select-next)
(keymap-set acm-mode-map "<backtab>" 'acm-select-prev)
;; select 方案二
(keymap-set acm-mode-map "H-j"       'acm-select-next)
(keymap-set acm-mode-map "H-k"       'acm-select-prev)
;; select 方案三
;; (keymap-set acm-mode-map "RET"     'acm-select-next)
;; (keymap-set acm-mode-map "<tab>"     'acm-select-prev)
;; abort
(keymap-set acm-mode-map "C-j"       'acm-insert-common)

(global-lsp-bridge-mode)
#+end_src

** Unicode

#+begin_src emacs-lisp :tangle yes
;; unicode
;; {{{
(use-package modeline-char
  :ensure nil
  :hook
  (after-init . mlc-char-in-mode-line-mode-global)
  )
;; }}}
#+end_src

** org-auto-tangle

~~谁在自动导出时给文件开始位置添加了一个 feff 字符？~~

#+begin_src emacs-lisp :tangle yes
;; org-auto-tangle
;; {{{
(use-package org-auto-tangle
  :ensure nil
  :hook (org-mode . org-auto-tangle-mode)
  )
;; }}}
#+end_src

** 折叠

#+begin_src emacs-lisp :tangle yes
;; ts-fold
;; {{{
;; (use-package ts-fold
;;   :ensure nil
;;   )
;; (add-hook 'tree-sitter-after-on-hook #'ts-fold-indicators-mode)
;; }}}
#+end_src

** Diff

#+begin_src emacs-lisp :tangle yes
(use-package diff-lisp
  :ensure nil
  :bind
  ("s-/" . diff-lisp-set-a-and-b)
  :config
  (defvar diff-lisp-set-a-and-b nil)
  (defun diff-lisp-set-a-and-b ()
    (interactive)
    (if (eq diff-lisp-set-a-and-b nil)
        (progn
          (diff-lisp-mark-selected-text-as-a)
          (setq diff-lisp-set-a-and-b t)
          )
      (progn
        (diff-lisp-diff-a-and-b)
        (setq diff-lisp-set-a-and-b nil)
        ))
    )
  )
#+end_src

** 多媒体

*** 音乐播放器

#+begin_src emacs－lisp :tangle no
(require 'netease-cloud-music)
(require 'netease-cloud-music-ui) ; TUI
(require 'netease-cloud-music-comment)
#+end_src

*** 字幕※歌词 Subtitle & Lyric

#+begin_src emacs-lisp :tangle yes
;; subed: subtitle edit
;; {{{
(use-package subed
  :defer t
  :ensure nil
  :config
  ;; Disable automatic movement of point by default
  (add-hook 'subed-mode-hook 'subed-disable-sync-point-to-player)
  ;; Remember cursor position between sessions
  (add-hook 'subed-mode-hook 'save-place-local-mode)
  ;; Break lines automatically while typing
  (add-hook 'subed-mode-hook 'turn-on-auto-fill)
  ;; Break lines at 40 characters
  (add-hook 'subed-mode-hook (lambda () (setq-local fill-column 40))))
;; }}}
#+end_src

*** STT

*** TTS

*** Video

** 图表

*** D2

#+begin_src emacs-lisp :tangle yes
(use-package d2-mode
  :ensure nil
  :defer t
  ;; :bind
  ;; (
  ;;  :map d2-mode-map
  ;;  )
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; D2 Mode
;; {{{
(add-to-list 'auto-mode-alist '("\\.d2" . d2-mode))
(defvar d2-mode-map
  (let ((map (make-sparse-keymap)))
    (keymap-set map "C-c C-c" #'d2-compile)
    (keymap-set map "C-c C-f" #'d2-compile-file)
    (keymap-set map "C-c C-b" #'d2-compile-buffer)
    (keymap-set map "C-c C-r" #'d2-compile-region)
    (keymap-set map "C-c C-h" #'d2-compile-file-and-browse)
    (keymap-set map "C-c C-j" #'d2-compile-buffer-and-browse)
    (keymap-set map "C-c C-k" #'d2-compile-region-and-browse)
    (keymap-set map "C-c C-o" #'d2-open-browser)
    (keymap-set map "C-x C-o" #'d2-view-current-svg)
    (keymap-set map "C-c C-d" #'d2-open-doc)
    map))
;; (org-babel-do-load-languages
;;     'org-babel-load-languages
;;     '(
;;       ;; (mermaid . t)
;;       (scheme . t)
;;       (d2 . t)))
;; }}}
#+end_src

** 阅读

*** dictionary-overlay

*** nov-xwidget

#+begin_src emacs-lisp :tangle yes
(use-package nov-xwidget
  :ensure nil
  :demand t
  :after nov
  :config
  (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
  (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files))
#+end_src

** 图像

#+begin_src emacs-lisp :tangle yes
;; image-roll
;; {{{
(use-package image-roll
  :defer t
  :ensure nil
  )
;; }}}

#+end_src

* File End

#+begin_src emacs-lisp :tangle yes
;;; init.el ends here.
#+end_src

* Misc

[[https://github.com/HerculeWu/HubbleEmacs/blob/main/Emacs.org][HerculeWu/HubbleEmacs/Emacs.org]]

[[https://github.com/novoid/dot-emacs/blob/master/config.org][novoid/dot-emacs/config.org]]

[[https://karl-voit.at/2017/06/03/emacs-org/][My Emacs Configuration In Org-mode]]

[[https://emacs-china.org/t/org-mode-python/16834][org-mode 记录学习时间，用 python数据可视化 - Emacs China]]
