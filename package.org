#+startup: indent
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       BAD14AD7-016D-4E24-AEFD-097C46F62E2F
:END:
#+title: 我使用的 Emacs 第三方包/插件与相关配置
#+date: 2023-02-08T23:06:43+0800
#+auto_tangle: t

sibling file: [[file:README.org][Emacs config]]

* File Header
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       3FBD2109-C9EB-4FC6-A137-E5F21AC8E20D
:END:

#+begin_src emacs-lisp
;; -*- coding: utf-8; lexical-binding: t; -*-
;;; my-package.el

;; DATE 2023-02-09T02:38:27+0800
#+end_src

* emacs-everywhere
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle no
:ID:       76AD93CA-493F-4E43-A320-E8B9B52DC86E
:END:

#+begin_src emacs-lisp :tangle no
(use-package emacs-everywhere
  :ensure nil
  :defer 110
  :after org
  :config
  ;;2022-10-17 "Reddit" is causing an error?;  (setq emacs-everywhere-markdown-windows ("Reddit" "Stack Exchange" "Stack Overflow" "Discord" "Element" "Slack" "HedgeDoc" "HackMD" "Zulip" "Pull Request" "Issue" "Comparing .*\\.\\.\\."))
  (setq emacs-everywhere-frame-name-format
        "Emacs Everywhere • C-c C-c • %s — %s")
  (setq emacs-everywhere-frame-parameters
        `((name . "emacs-everywhere")
          (width . 100)
          (height . 30)
          )))
#+end_src

* Benchmark/Debug/Discover/Monitor Emacs
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle no
:ID:       D28281D0-F365-46D2-BF08-E76AFC6D0F20
:END:
** bug-hunter

[[https://github.com/Malabarba/elisp-bug-hunter/][Malabarba/elisp-bug-hunter: Hunt down errors in elisp files.]]

#+begin_src emacs-lisp :tangle no

#+end_src

** explain-pause-mode

[[https://github.com/lastquestion/explain-pause-mode][lastquestion/explain-pause-mode: top, but for Emacs.]]

#+begin_src emacs-lisp
(use-package explain-pause-mode
  :ensure nil
  :defer 2
  :config
  (setq explain-pause-top-auto-refresh-interval 0.1)
  )

;; (run-with-idle-timer
;;  1 nil
;;  #'(lambda ()
;;      (require 'explain-pause-mode)
;;      ))
#+end_src

** benchmark-init                                                    :FIXME:

#+begin_src emacs-lisp
(use-package benchmark-init
  :ensure nil
  :init (benchmark-init/activate)
  ;; To disable collection of benchmark data after init is done.
  :hook (after-init . benchmark-init/deactivate)
  ;; (add-hook 'after-init-hook 'benchmark-init/deactivate)
  )

;; (add-hook 'after-init-hook
;;           (lambda () (message "loaded in %s" (emacs-init-time))))
#+end_src

#+begin_src emacs-lisp :tangle no
;; profile: benchmark-init
;; {{{
;; (require 'benchmark-init-modes)  ; FIXME
;; (require 'benchmark-init)
;; (benchmark-init/activate)
;; ;; To disable collection of benchmark data after init is done.
;; (add-hook 'after-init-hook 'benchmark-init/deactivate)
;; }}}
#+end_src

** esup

#+begin_src emacs-lisp
(use-package esup
  :ensure nil
  :pin melpa ; To use MELPA Stable use ":pin melpa-stable"
  )
#+end_src

** mode-minder :Git:

#+begin_src emacs-lisp
(use-package mode-minder
  :ensure nil
  :defer 3
  )
#+end_src

** elisp-demos

#+begin_src emacs-lisp
(use-package elisp-demos
  :ensure nil
  :after helpful
  :bind
  (
   :map help-mode-map
   ("C-c M-d" . elisp-demos-add-demo)
   )
  ;; :config
  :init
  (advice-add
   'describe-function-1
   :after #'elisp-demos-advice-describe-function-1)
  (advice-add 'helpful-update :after #'elisp-demos-advice-helpful-update)
  )
#+end_src

* Emacs Package Database epkg+epkgs
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       1898178B-9C71-436F-9593-8F16548E5522
:END:

#+begin_src emacs-lisp
(use-package epkg
  :ensure nil
  :defer t
  ;; :custom (epkg-database-connector 'sqlite-builtin)
  :config
  (setq epkg-repository "~/Documents/GitHub/epkgs")
  (setq package-list-unversioned t) ;; unversioned packages(ibuffer and so on)
  ;; 怎样快速找到 elpa 目录下那些重复的包 - Emacs China
  ;; https://emacs-china.org/t/topic/4244
  (defun my/list-packages-and-versions ()
    "Returns a list of all installed packages and their versions"
    (interactive)
    (mapcar
     (lambda (pkg)
       `(,pkg ,(package-desc-version
                (cadr (assq pkg package-alist)))))
     package-activated-list))
  )

(use-package epkgs
  :ensure nil
  :defer t
  )
#+end_src

* 通知帮助与文档
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       3C4FF7DB-9E02-43B9-8E27-F8504FDC1EE6
:END:
** notify

[[https://github.com/netjune/my_elisp/blob/master/misc/notify.el][netjune/my_elisp/misc/notify.el]]

** helpful

#+begin_src emacs-lisp
;; helpful
;; {{{
(use-package helpful
  :ensure nil
  :bind
  ;; ("C-h C" . helpful-command) ;; Look up *C*ommands.
  ;; By default, C-h C is bound to describe `describe-coding-system'. I
  ;; don't find this very useful, but it's frequently useful to only
  ;; look at interactive functions.
  ;; ("C-h F" . helpful-function) ; functions only
  ;; By default, C-h F is bound to `Info-goto-emacs-command-node'. Helpful
  ;; already links to the manual, if a function is referenced there.
  ("C-h h" . #'helpful-at-point) ; Lookup the current symbol at point.
  ([remap describe-command] . helpful-command) ; C-h x
  ([remap describe-function] . helpful-callable)    ; both functions and macros
  ([remap describe-key] . helpful-key) ; C-h k
  ([remap describe-symbol] . helpful-symbol) ; C-h o
  ([remap describe-variable] . helpful-variable) ; C-h v
  ;; :config
  ;; helpful + ivy
  ;; (setq counsel-describe-function-function #'helpful-callable)
  ;; (setq counsel-describe-variable-function #'helpful-variable)
  )
;; }}}
#+end_src

** RFC

#+begin_src emacs-lisp
;; RFC
;; {{{
(use-package rfc-mode
  :ensure nil
  :defer t
  :config
  (setq rfc-mode-directory (expand-file-name "~/Documents/GitHub/RFC-all/txt/"))
  (setq rfc-mode-index-path (concat rfc-mode-directory "rfc-index.txt"))
  )
;; }}}
#+end_src

* macOS :macOS:
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       7598153B-E306-41AC-8BF5-98CD3F73ABBE
:END:

** osx-dictionary

#+begin_src emacs-lisp
;; dictionary: Apple 词典: osx-dictionary
;; {{{
(use-package osx-dictionary
  :ensure nil
  :defer t
  :bind
  ("C-c d f" . osx-dictionary-search-word-at-point) ; DeFine word
  )
;; }}}
#+end_src

** org-mac-link :macOS:Git:

#+begin_src emacs-lisp
;; org-mac-link
;; {{{
(use-package org-mac-link
  :ensure nil
  :bind
  ("H-i H-i" . org-mac-link-get-link)
  )
;; }}}
#+end_src

* 环境变量
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       18EB739C-4A18-4495-BC88-3757F4B2CBD3
:END:

[[https://emacs-china.org/t/topic/5507][Mac 下给 Emacs 设置 PATH 和 exec-path - Emacs China]]

=~/.profile= : [[https://emacs-china.org/t/emacs-mac-port-profile/2895/30][Emacs Mac Port 能自动从 ~/.profile 继承环境变量 - Emacs China]]

#+begin_src emacs-lisp
;; exec-path-from-shell
;; {{{
;; https://emacs-china.org/t/exec-path-from-shell/2515/10
(use-package exec-path-from-shell
  :defer 1
  ;; :if (memq window-system '(mac ns x))
  ;; :when (or (memq window-system '(mac ns x))
  ;;           (unless (memq system-type '(windows-nt dos))
  ;;             (daemonp)))
  :init
  ;; 设成 nil 则不从 .zshrc 读取，只从 .zshenv 读取可以加快速度
  ;; 但需要将环境变量都放到 .zshenv 中，而非 .zshrc 中
  (setq exec-path-from-shell-check-startup-files nil)
  (setq exec-path-from-shell-arguments '("-l" )) ;remove -i read form .zshenv
  (setq exec-path-from-shell-variables '("PATH"))
  :config
  ;; (setq exec-path-from-shell-variables
  ;;       '(
  ;;         "PATH"
  ;;         "MANPATH"
  ;;         "GOROOT"
  ;;         "GOPATH"
  ;;         "EDITOR"
  ;;         "PYTHONPATH"
  ;;         ))

  (progn
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize))

    (when (daemonp)
      (exec-path-from-shell-initialize)
      )
    )
  )
;; (exec-path-from-shell-initialize)
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://emacs-china.org/t/emacs-q-emacs/18380/28
;; Load env
(defconst my-env-file (concat user-emacs-directory "env"))
(when (and (or (display-graphic-p)
               (daemonp))
           (file-exists-p my-env-file))
  (defun my-load-envvars-file (file &optional noerror)
    "Read and set envvars from FILE.
If NOERROR is non-nil, don't throw an error if the file doesn't exist or is
unreadable. Returns the names of envvars that were changed."
    (if (not (file-readable-p file))
        (unless noerror
          (signal 'file-error (list "Couldn't read envvar file" file)))
      (let (envvars environment)
        (with-temp-buffer
          (save-excursion
            (insert "\n")
            (insert-file-contents file))
          (while (re-search-forward "\n *\\([^#= \n]*\\)=" nil t)
            (push (match-string 1) envvars)
            (push (buffer-substring
                   (match-beginning 1)
                   (1- (or (save-excursion
                             (when (re-search-forward "^\\([^= ]+\\)=" nil t)
                               (line-beginning-position)))
                           (point-max))))
                  environment)))
        (when environment
          (setq process-environment
                (append (nreverse environment) process-environment)
                exec-path
                (if (member "PATH" envvars)
                    (append (split-string (getenv "PATH") path-separator t)
                            (list exec-directory))
                  exec-path)
                shell-file-name
                (if (member "SHELL" envvars)
                    (or (getenv "SHELL") shell-file-name)
                  shell-file-name))
          envvars))))

  (my-load-envvars-file my-env-file))
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://emacs-china.org/t/exec-path-from-shell/2515/14

(defun exec-path-from-shell-setenv (name value)
  "Set the value of environment var NAME to VALUE.
Additionally, if NAME is \"PATH\" then also set corresponding
variables such as `exec-path'."
  (setenv name value)
  (when (string-equal "PATH" name)
    (setq eshell-path-env value
          exec-path (append (parse-colon-path value) (list exec-directory)))))

;; 复用 exec-path-from-shell 内的一个方法，其实自己实现也可以
(defun exec-path-from-shell-setenv (name value)
  "Set the value of environment var NAME to VALUE.
Additionally, if NAME is \"PATH\" then also set corresponding
variables such as `exec-path'."
  (setenv name value)
  (when (string-equal "PATH" name)
    (setq eshell-path-env value
          exec-path (append (parse-colon-path value) (list exec-directory)))))
;;调用 exec-path-from-shell-setenv，手动传入参数，每次修改 PATH 都要重新修改一次。
(exec-path-from-shell-setenv
 "PATH"
 "/Users/n/.cask/bin:/opt/theos/bin:/Users/n/wsybin:/usr/local/opt/coreutils/libexec/gnubin:/usr/local/sbin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Applications/Server.app/Contents/ServerRoot/usr/bin:/Applications/Server.app/Contents/ServerRoot/usr/sbin:/usr/local/git/bin:/Users/n/.rvm/bin"
 )
#+end_src

#+begin_src emacs-lisp :tangle no
;; {{{
(require 'exec-path-from-shell)

(setq exec-path-from-shell-check-startup-files nil)

(defvar cache-path-from-shell-loaded-p nil)

(defadvice exec-path-from-shell-initialize (around cache-path-from-shell-advice activate)
  (if cache-path-from-shell-loaded-p
      (message "All shell environment variables has loaded in Emacs, yow!")
    (setq cache-path-from-shell-loaded-p t)
    ad-do-it
    ))

(provide 'cache-path-from-shell)
;; }}}

(require 'cache-path-from-shell)
#+end_src

* 系统/软件交互           :输入法:
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       298DCAED-8681-41C7-B229-38CD63B8DE5A
:END:
** browser-hist :Git:

#+begin_src emacs-lisp
(use-package browser-hist
  :ensure nil
  :defer t
  :after (sqlite)
  :bind
  ("H-s H-s" . browser-hist-search)
  :config
  (setq browser-hist-db-paths
        '(
          (chrome . "$HOME/Library/Application Support/Google/Chrome/Default/History")
          (brave . "$HOME/Library/Application Support/BraveSoftware/Brave-Browser/Default/History")
          (firefox . "$HOME/Library/Application Support/Firefox/Profiles/*.default-release/places.sqlite")
          (safari . "$HOME/Library/Safari/History.db")
          ))
  (setq browser-hist-default-browser 'safari) ; FIXME
  :commands
  (browser-hist-search)
  )
#+end_src

** 输入法切换

| 当前输入法 | 光标前两个单词中是否有中文 | 空格或制表符数量 | 是否切换 |
|------------+----------------------------+------------------+----------|
| 中文       | 是                         |                0 | 否       |
| 中文       | 是                         |                1 | 否       |
| 中文       | 是                         |                2 | 是       |
| 中文       | 否                         |                0 |          |
| 中文       | 否                         |                1 |          |
| 中文       | 否                         |                2 |          |
| 英文       | 是                         |                0 | 否       |
| 英文       | 是                         |                1 |          |
| 英文       | 是                         |                2 |          |
| 英文       | 否                         |                0 |          |
| 英文       | 否                         |                1 |          |
| 英文       | 否                         |                2 |          |

** sis

#+begin_src emacs-lisp :tangle no
;; smart-input-source
;; {{{
(use-package sis
  :bind
  ;; ("<f9>" . sis-log-mode) ; 开启日志
  :init
  ;; `C-s/r' 默认优先使用英文 必须在 sis-global-respect-mode 前配置
  (setq sis-respect-go-english-triggers
        (list 'isearch-forward 'isearch-backward) ; isearch-forward 时默认进入 en
        sis-respect-restore-triggers
        (list 'isearch-exit 'isearch-abort))
  :config
  (sis-ism-lazyman-config
   "com.apple.keylayout.ABC"
   "com.apple.inputmethod.SCIM.ITABC"
   'macism
   )
  (sis-global-cursor-color-mode t)
  (sis-global-respect-mode t)
  (sis-global-context-mode t)
  (sis-global-inline-mode t)   ; 中文状态下，中文后<spc>切换英文，结束后切回中文

  ;; 特殊定制
  (setq sis-default-cursor-color "blue" ;; 英文光标色
        sis-other-cursor-color "orange"  ;; 中文光标色 green
        ;; sis-inline-tighten-head-rule 'all ; 删除头部空格，默认 1，删除一个空格，1/0/'all
        sis-inline-tighten-tail-rule 'all ; 删除尾部空格，默认 1，删除一个空格，1/0/'all
        sis-inline-with-english t ; 默认是 t, 中文 context 下输入<spc>进入内联英文
        sis-inline-with-other t) ; 默认是 nil，而且 prog-mode 不建议开启, 英文 context 下输入<spc><spc>进行内联中文
  ;; 特殊 buffer 禁用 sis 前缀,使用 Emacs 原生快捷键  setqsis-prefix-override-buffer-disable-predicates
  (setq sis-prefix-override-buffer-disable-predicates
        (list 'minibufferp
              (lambda (buffer) ; magit revision magit 的 keymap 是基于 text property 的，优先级比 sis 更高。进入 magit 后，disable sis 的映射
                (sis--string-match-p "^magit-revision:" (buffer-name buffer)))
              (lambda (buffer) ; special buffer，所有*打头的 buffer，但是不包括*Scratch* *New, *About GNU 等 buffer
                (and (sis--string-match-p
                      "^\*" (buffer-name buffer))
                     (not (sis--string-match-p
                           "^\*About GNU Emacs" (buffer-name buffer))) ; *About GNU Emacs" 仍可使用 C-h/C-x/C-c 前缀
                     (not (sis--string-match-p
                           "^\*New" (buffer-name buffer)))
                     (not (sis--string-match-p
                           "^\*Scratch" (buffer-name buffer))))))) ; *Scratch*  仍可使用 C-h/C-x/C-c 前缀
  )
;; }}}
#+end_src

* Emacs Lisp
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       075EC11F-FDC4-424B-A200-5B6ADBA7B580
:END:

** 代码分析

elisp-depmap

#+begin_src emacs-lisp
(use-package elisp-depmap
  :ensure nil
  :init
  ;; read-symbol-positions-list is deleted from Emacs 29
  (defvar read-symbol-positions-list nil)
  :bind
  (
   ("C-c H-d" . elisp-depmap-graphviz-digraph)
   ("C-c H-g" . elisp-depmap-graphviz)
   ("C-c H-s" . elisp-depmap-makesummarytable)
   )
  :config
  (setq elisp-depmap-parse-hashtablesize 1024)
  (setq elisp-depmap-exec-file
        (expand-file-name "assets/elisp-dep-ana.dot" user-emacs-directory))
  )
#+end_src

** 辅助编辑

#+begin_src emacs-lisp :tangle no
(use-package lisp
  :hook
  (after-save . check-parens))

(use-package elisp-mode
  :bind
  (
   :map emacs-lisp-mode-map
   ("C-c C-d C-d" . describe-function)
   ("C-c C-d d" . describe-function)
   ("C-c C-k" . eval-buffer))
  )

(use-package highlight-defined
  :ensure t
  :custom
  (highlight-defined-face-use-itself t)
  :hook
  (help-mode . highlight-defined-mode)
  (emacs-lisp-mode . highlight-defined-mode))

(use-package highlight-quoted
  :ensure t
  :hook
  (emacs-lisp-mode . highlight-quoted-mode))

(use-package highlight-sexp
  :quelpa
  (highlight-sexp
   :repo "daimrod/highlight-sexp" :fetcher github :version original)
  :hook
  (clojure-mode . highlight-sexp-mode)
  (emacs-lisp-mode . highlight-sexp-mode)
  (lisp-mode . highlight-sexp-mode))

(use-package eros
  :ensure t
  :hook
  (emacs-lisp-mode . eros-mode))

(use-package suggest
  :ensure t
  :defer t)

(use-package ipretty
  :defer t
  :ensure t
  :config
  (ipretty-mode 1))

(use-package nameless
  :ensure t
  :hook
  (emacs-lisp-mode .  nameless-mode)
  :custom
  (nameless-global-aliases '())
  (nameless-private-prefix t))

(use-package erefactor
  :ensure t
  :defer t)

(use-package flycheck-package
  :ensure t
  :hook
  (emacs-lisp-mode . flycheck-package-setup))

(use-package elsa
  :defer t
  :ensure t)

(use-package flycheck-elsa
  :ensure t
  :hook
  (emacs-lisp-mode . flycheck-elsa-setup))
#+end_src

** 格式化 elisp-autofmt

#+begin_src emacs-lisp
(use-package elisp-autofmt
  :commands
  (elisp-autofmt-mode elisp-autofmt-buffer)
  :hook (emacs-lisp-mode . elisp-autofmt-mode)
  :config
  (setq elisp-autofmt-cache-directory
        (expand-file-name "var/elisp-autofmt-cache" user-emacs-directory))
  (setq elisp-autofmt-python-bin "/opt/homebrew/bin/python3")
  )
#+end_src

* 快捷键
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       D6B399A8-B6C6-474F-B63C-BC0C9E40C591
:END:
** region-bindings

[[https://github.com/andreyorst/region-bindings.el][andreyorst/region-bindings.el]]

#+begin_src emacs-lisp :tangle no

#+end_src

** 快捷键历史记录 keyfreq :Git:

Track Emacs commands frequency

#+begin_src emacs-lisp :tangle no
;; keyferq: 排除命令: exclude commands
;; abort-recursive-edit
;; ace-window
;; avy-goto-line
;; backward-char
;; clipboard-kill-ring-save
;; comint-previous-input
;; comint-send-input
;; delete-backward-char
;; describe-variable
;; electric-pair-delete-pair
;; eval-buffer
;; exit-minibuffer
;; ffip
;; forward-char
;; goto-line
;; hippie-expand
;; indent-new-comment-line
;; ispell-minor-check
;; js-mode
;; js2-line-break
;; kill-sentence
;; left-char
;; mac-mwheel-scroll
;; magit-next-line
;; magit-previous-line
;; markdown-exdent-or-delete
;; markdown-outdent-or-delete
;; minibuffer-complete
;; minibuffer-complete-and-exit
;; minibuffer-keyboard-quit
;; mouse-drag-region
;; mouse-set-point
;; move-beginning-of-line
;; move-end-of-line
;; my-company-number
;; my-setup-develop-environment
;; newline-and-indent
;; next-history-element
;; next-line
;; package-menu-execute
;; pcomplete
;; previous-history-element
;; previous-line
;; push-button
;; pwd
;; quit-window
;; recenter-top-bottom
;; right-char
;; rjsx-electric-gt
;; rjsx-electric-lt
;; shellcop-erase-buffer
;; smarter-move-beginning-of-line
;; suspend-frame
;; term-send-raw
;; turnon-keyfreq-mode
;; typescript-insert-and-indent
;; undefined ;; lambda function
;; wgrep-finish-edit
;; xterm-paste
;; yank
#+end_src

#+begin_src emacs-lisp :tangle no
;; keyfreq: 正则表达式排除模式, excluded regexp

;;         "^ace-jump-"
;;         "^backward-"
;;         "^company-"
;;         "^dired"
;;         "^evil-"
;;         "^forward-"
;;         "^general-dispatch-self-insert-command-"
;;         "^gnus-"
;;         "^ido-"
;;         "^isearch-"
;;         "^ivy-"
;;         "^keyboard-"
;;         "^keyfreq-"
;;         "^my-hydra-.*/body"
;;         "^next-"
;;         "^org-"
;;         "^paredit-"
;;         "^save-"
;;         "^scroll-"
;;         "^select-window-"
;;         "^undo-"
;;         "^web-mode"
;;         "^y-or-n-"
;;         "^yas-"
;;         "emms-"

#+end_src

#+begin_src emacs-lisp
;; keyfreq fork: keyfreq-html-v2 show keyboard heat map
(use-package keyfreq
  :ensure nil
  :defer 1
  :config
  (keyfreq-mode 1) ;; 启动插件包
  (keyfreq-autosave-mode 1) ;; 自动保存模式

  (setq keyfreq-folder
        (expand-file-name
         "lib/keyfreq"
         (concat user-emacs-directory)))

  (setq-default keyfreq-file
                (expand-file-name
                 "assets/keyfreq-log"
                 (concat user-emacs-directory)))

  (setq-default keyfreq-file-lock
                (expand-file-name
                 "var/keyfreq-log.lock"
                 (concat user-emacs-directory)))

  (setq keyfreq-excluded-commands
        '(
          mwheel-scroll
          org-self-insert-command
          self-insert-command
          ))

  ;; (setq keyfreq-excluded-regexp
  ;;       '(
  ;;         "^w3m-"
  ;;        ))

  ;; (defun turnon-keyfreq-mode ()
  ;;   "Turn on keyfreq."
  ;;   (interactive)
  ;;   (my-run-with-idle-timer 4 (lambda () ; lazy load keyfreq
  ;;                               (keyfreq-mode 1)
  ;;                               (keyfreq-autosave-mode 1))))
  )
#+end_src

** 空闲快捷键 free-keys

modifire prefix

#+begin_src text :tangle no
"A"
"C"
"H"
"M"
"S"
"s"
"A-C"
"A-H"
"A-M"
"A-S"
"A-s"
"C-S"
"M-S"
"M-s"
"S-s"
"C-M-S"
"C-M-s"
#+end_src

#+begin_src emacs-lisp
;; free-keys
;; {{{
(use-package free-keys
  :ensure nil
  :defer 2
  :config
  (setq free-keys-modifiers '(
                              ""
                              "C"     ; Ctrl/Capslock                 + <key>
                              "H"     ; Hyper/right_command           + <key>
                              "M"     ; Meta/ESC/Option               + <key>
                              "s"     ; super/Command                 + <key>
                              "ESC M" ; ESC             ESC             <key>
                              "C-c M" ; C-c             ESC             <key>
                              "C-x M" ; C-x             ESC             <key>
                              "C-H"   ; Ctrl          + right_command + <key>
                              "C-M"   ; Ctrl                          + <key>
                              "C-s"   ; Ctrl          + Command       + <key>
                              "H-M"   ; right_command + Option        + <key>
                              "H-s"   ; right_command + left_command  + <key>
                              ))
  )
;; }}}
#+end_src

** loophole

#+begin_src emacs-lisp :tangle no

#+end_src

** keycast

#+begin_src emacs-lisp
(use-package keycast
  :ensure nil
  :defer t
  :config
  (setq keycast-log-newest-first nil)
  )
#+end_src

** keycast + embark

#+begin_src emacs-lisp :tangle no
(defun store-action-key+cmd (cmd)
  (setq keycast--this-command-keys (this-single-command-keys)
        keycast--this-command cmd))

(advice-add 'embark-keymap-prompter :filter-return #'store-action-key+cmd)

(defun force-keycast-update (&rest _)
  (force-mode-line-update t))

(dolist (cmd '(embark-act embark-become))
  (advice-add cmd :before #'force-keycast-update))
#+end_src

** which-key + posframe

#+begin_src emacs-lisp
(use-package which-key
  :ensure nil
  :hook
  (
   (after-init . which-key-mode)
   ;; (repeat-mode . which-key-mode) ; :init (which-key-mode)
   )
  ;; :custom
  ;; for repeat-mode
  ;; Disable the built-in repeat-mode hinting
  ;; (repeat-echo-function 'ignore)
  :init
  ;; for repeat-mode
  ;; Spawn or hide a which-key popup
  ;; (advice-add
  ;;  'repeat-post-hook
  ;;  :after
  ;;  (defun repeat-help--which-key-popup ()
  ;;    (if-let ((cmd (or this-command real-this-command))
  ;;             (keymap (or repeat-map (repeat--command-property 'repeat-map))))
  ;;      (run-at-time
  ;;       0 nil
  ;;       (lambda ()
  ;;         (which-key--create-buffer-and-show nil (symbol-value keymap))))
  ;;      (which-key--hide-popup))))
  :config (setq which-key-popup-type 'minibuffer)
  (setq
   which-key-idle-delay 0.5
   which-key-idle-secondary-delay 0.5
   which-key-show-operator-state-maps t)
  )
#+end_src

#+begin_src emacs-lisp
(use-package which-key-posframe
  :ensure nil
  :config
  (which-key-posframe-mode)
  ;; (setq which-key-posframe-poshandler
  ;;       'posframe-poshandler-window-top-right-corner)
  )
#+end_src

** repeat-help

#+begin_src emacs-lisp
(use-package repeat-help
  :ensure nil
  :hook (repeat-mode . repeat-help-mode)
  :config
  (setq repeat-echo-function 'ignore)
  (setq repeat-help-popup-type 'which-key)
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://karthinks.com/software/it-bears-repeating/
;; https://karthinks.com/software/a-consistent-structural-editing-interface/
(use-package which-key
  :ensure nil
  :hook
  (repeat-mode . repeat-help--which-key-popup)
  :custom
  ;; for repeat-mode
  ;; Disable the built-in repeat-mode hinting
  (repeat-echo-function 'ignore)
  ;; :init
  :config
  ;; for repeat-mode
  ;; Spawn or hide a which-key popup
  (advice-add
   'repeat-post-hook
   :after
   (defun repeat-help--which-key-popup ()
     (if-let ((cmd (or this-command real-this-command))
              (keymap (or repeat-map (repeat--command-property 'repeat-map))))
         (run-at-time
          0 nil
          (lambda ()
            (which-key--create-buffer-and-show nil (symbol-value keymap))))
       (which-key--hide-popup))))
  )
#+end_src

* Macro & 光标/鼠标/触控板
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       43CF0A72-38FD-4D18-9646-EF28FCF6687C
:END:

** iedit

#+begin_src emacs-lisp :tangle no

#+end_src

** multiple-cursors

#+begin_src emacs-lisp
;; multiple-cursors
;; {{{
;; multiple-cursors-mode-enabled-hook
;; multiple-cursors-mode-disabled-hook
(use-package multiple-cursors
  :bind (
         ("H-c H-a" . mc/edit-beginnings-of-lines)
         ("H-c H-e" . mc/edit-ends-of-lines)
         ("H-c H-l" . mc/edit-lines)
         ("H-c H-n" . mc/mark-next-like-this)
         ("H-c H-p" . mc/mark-previous-like-this)
         ("H-c H-h" . mc/mark-all-like-this)
         ([remap cua-rectangle-mark-mode] . set-rectangular-region-anchor)
         )
  :config
  (add-hook 'activate-mark-hook '(lambda ()
                                   (local-set-key
                                    (kbd "C-@")
                                    'set-rectangular-region-anchor)
                                   ))

  (add-hook 'deactivate-mark-hook '(lambda ()
                                     (local-unset-key
                                      (kbd "C-@"))
                                     ))
  )
;; }}}
#+end_src

** macrostep

https://github.com/joddie/macrostep

** markmacro

** 光标跳转: avy

https://karthinks.com/software/avy-can-do-anything

#+begin_src emacs-lisp
(use-package avy
  :ensure nil
  :bind
  ;; ("" . avy-goto-char-timer)
  ("H-j H-j"   . avy-goto-char)
  ("H-j 2"     . avy-goto-char-2)
  ("H-j H-k"   . avy-goto-line)
  ;; ("M-g w"   . avy-goto-word-1)
  ;; ("M-g e"   . avy-goto-word-0)
  ("C-c H-j" . avy-resume)
  :custom
  (avy-background t)
  (avy-keys '(?a ?s ?d ?f ?g ?h ?j ?l ?q ?e ?r ?u ?i ?p ?n))
  :config
  (defun avy-action-embark (pt)
    (unwind-protect
        (save-excursion
          (goto-char pt)
          (embark-act))
      (select-window
       (cdr (ring-ref avy-ring 0))))
    t)
  (setf (alist-get ?e avy-dispatch-alist) 'avy-action-embark)
  )
#+end_src

** 二分/模糊移动: bln-mode

#+begin_src emacs-lisp :tangle no
(use-package bln-mode
  :ensure nil
  ;; :config
  )

;; (defhydra hydra-bln ()
;;   "Binary line navigation mode"
;;   ("j" bln-backward-half "Backward in line")
;;   ("k" bln-forward-half "Forward in line")
;;   ("u" bln-backward-half-v "Backward in window")
;;   ("i" bln-forward-half-v "Forward in window")
;;   ("h" bln-backward-half-b "Backward in buffer")
;;   ("l" bln-forward-half-b "Forward in buffer"))
;; (define-key bln-mode-map (kbd "M-j") ’hydra-bln/body)
#+end_src

** goto-line-preview

#+begin_src emacs-lisp :tangle no
;; goto-line-preview
;; {{{
(use-package goto-line-preview
  :ensure nil
  :defer 2
  :bind
  ([remap goto-line] . goto-line-preview)
  )
;; }}}
#+end_src

** Hyperbole

** 右键菜单: embark

[[https://karthinks.com/software/fifteen-ways-to-use-embark/][Fifteen ways to use Embark | Karthinks]]

#+begin_src emacs-lisp
(use-package embark
  :ensure nil
  :defer 1
  :bind
  (
   ;; ("C-<return>" . embark-act)
   ("C-;"        . embark-act)
   ("H-M-o"      . embark-collect) ; equals `ESC H-o'
   ("M-."        . embark-dwim)
   ([remap describe-bindings]  . embark-bindings)
   ;; ("C-h B"      . embark-bindings)
   :map minibuffer-mode-map
   ;; ("C-c C-l" . embark-collect)
   ("H-o"     . embark-export)
   ;; ("C-c C-e" . embark-export)
   ;; ("C-d" . embark-act)
   )
  :custom
  ;; (embark-quit-after-action nil)
  ;; (embark-indicators '(embark-minimal-indicator
  ;;                      embark-highlight-indicator
  ;;                      ;; embark-verbose-indicator
  ;;                      embark-isearch-highlight-indicator
  ;;                      ))
  (embark-cycle-key ".")
  (embark-help-key "?")
  :config
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  (defvar embark--target-mode-timer nil)
  (defvar embark--target-mode-string "")

  (defun embark--target-mode-update ()
    (setq embark--target-mode-string
          (if-let (targets (embark--targets))
              (format "[%s%s] "
                      (propertize (symbol-name (plist-get (car targets) :type)) 'face 'bold)
                      (mapconcat (lambda (x) (format ", %s" (plist-get x :type)))
                                 (cdr targets)
                                 ""))
            "")))

  (define-minor-mode embark-target-mode
    "Shows the current targets in the modeline."
    :global t
    (setq mode-line-misc-info (assq-delete-all 'embark-target-mode mode-line-misc-info))
    (when embark--target-mode-timer
      (cancel-timer embark--target-mode-timer)
      (setq embark--target-mode-timer nil))
    (when embark-target-mode
      (push '(embark-target-mode (:eval embark--target-mode-string)) mode-line-misc-info)
      (setq embark--target-mode-timer
            (run-with-idle-timer 0.1 t #'embark--target-mode-update))))
  )
#+end_src

*** embark + consult

#+begin_src emacs-lisp
(use-package embark-consult
  :ensure nil
  :hook
  (embark-collect-mode . consult-preview-at-point-mode)
  )
#+end_src

*** embark + which-key

#+begin_src emacs-lisp :tangle no
(use-package embark
  :ensure nil
  :config
  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
The which-key help message will show the type and value of the
current target followed by an ellipsis if there are further
targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets)
                       "…"
                     "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil
         nil
         t
         (lambda (binding) (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add
   #'embark-completing-read-prompter
   :around #'embark-hide-which-key-indicator))
#+end_src

* 字符/字符串/文本编辑
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       AC7651CB-507C-4F19-BD48-94C766A61A59
:END:

** Unicode: modeline-char :Git:

#+begin_src emacs-lisp
;; unicode
;; {{{
(use-package modeline-char
  :ensure nil
  :hook
  (after-init . mlc-char-in-mode-line-mode-global)
  )
;; }}}
#+end_src

** 括号: puni

[[https://github.com/AmaiKinono/puni][AmaiKinono/puni]]

Structured editing (soft deletion, expression navigating & manipulating) that
supports many major modes out of box.

#+begin_src emacs-lisp
(use-package puni
  :ensure nil
  :defer t
  )
#+end_src

** 近义词/反义词等: parrot

[[https://github.com/dp12/parrot][dp12/parrot: A package to rotate text and party with parrots at the same time]]

#+begin_src emacs-lisp
(use-package parrot
  ;; :defer t
  :ensure nil
  :hook (after-init . parrot-mode)
  :bind (
         ;;
         ;; ("H-r k" . parrot-rotate-prev-word-at-point)
         ("H-k H-j" . parrot-rotate-prev-word-at-point)
         ;; ("H-r j" . parrot-rotate-next-word-at-point)
         ("H-k H-k" . parrot-rotate-next-word-at-point)

         )
  :config
  (parrot-set-parrot-type 'emacs)
  (setq parrot-rotate-dict
        '(
          ;; personal setting
          (:rot ("¥" "$" "￥"))
          (:rot ("nil" "t"))
          (:rot ("setq" "defvar"))
          ;;
          (:rot ("alpha" "beta") :caps t :lower nil)
          ;; => rotations are "Alpha" "Beta"

          (:rot ("snek" "snake" "stawp"))
          ;; => rotations are "snek" "snake" "stawp"

          (:rot ("yes" "no") :caps t :upcase t)
          ;; => rotations are "yes" "no", "Yes" "No", "YES" "NO"

          (:rot ("&" "|"))
          ;; => rotations are "&" "|"

          ;; default dictionary starts here ('v')
          (:rot ("begin" "end") :caps t :upcase t)
          (:rot ("enable" "disable") :caps t :upcase t)
          (:rot ("enter" "exit") :caps t :upcase t)
          (:rot ("forward" "backward") :caps t :upcase t)
          (:rot ("front" "rear" "back") :caps t :upcase t)
          (:rot ("get" "set") :caps t :upcase t)
          (:rot ("high" "low") :caps t :upcase t)
          (:rot ("in" "out") :caps t :upcase t)
          (:rot ("left" "right") :caps t :upcase t)
          (:rot ("min" "max") :caps t :upcase t)
          (:rot ("on" "off") :caps t :upcase t)
          (:rot ("prev" "next"))
          (:rot ("start" "stop") :caps t :upcase t)
          (:rot ("true" "false") :caps t :upcase t)
          (:rot ("&&" "||"))
          (:rot ("==" "!="))
          (:rot ("." "->"))
          (:rot ("if" "cond" "else" "elif"))
          (:rot ("ifdef" "ifndef"))
          (:rot ("int8_t" "int16_t" "int32_t" "int64_t"))
          (:rot ("uint8_t" "uint16_t" "uint32_t" "uint64_t"))
          (:rot ("0" "1" "2" "3" "4" "5" "6" "7" "8" "9"))
          (:rot ("1st" "2nd" "3rd" "4th" "5th" "6th" "7th" "8th" "9th" "10th"))
          )
        )
  )
#+end_src

** Fuck :Git:

#+begin_src emacs-lisp :tangle no
;; fuck
;; {{{
(require 'fuck)
(keymap-global-set "H-k" #'fuck)
;; }}}
#+end_src

** 大小写

** 中英文空格: pangu-spacing                                        :format:

#+begin_src emacs-lisp
(use-package pangu-spacing
  :defer 3
  :custom
  (pangu-spacing-inhibit-mode-alist
   '(eshell-mode shell-mode term-mode fundamental-mode))
  :config
  (global-pangu-spacing-mode 1)
  (setq pangu-spacing-real-insert-separtor t))
#+end_src

** 字符统计 advance-words-count :Git:

[[https://github.com/LdBeth/advance-words-count.el][LdBeth/advance-words-count.el: Extended `count-words' function]]

#+begin_src emacs-lisp
(use-package advance-words-count
  :ensure nil
  ;; :defer 2
  :bind
  ("C-c w c" . advance-words-count)
  )
#+end_src

** combobulate :Git:

#+begin_src emacs-lisp :tangle no
(use-package combobulate
  ;; Ensure `combobulate-mode` is activated when you launch a mode it supports
  :hook
  ((python-mode . combobulate-mode)
   ;; (js-mode . combobulate-mode)
   ;; (typescript-mode . combobulate-mode)
   ))
#+end_src

* 正则表达式
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       34BEAD6F-6451-44D4-8B8F-73BA5B029B69
:END:

#+begin_src emacs-lisp :tangle no
;; whatthefuck
;; whatthehack
#+end_src

** visual-regexp

#+begin_src emacs-lisp
(use-package visual-regexp
  :ensure nil
  :defer 1
  :bind
  (
   ("C-c r e" . vr/query-replace)
   ("C-c r r" . vr/replace)
   ("C-c m m" . vr/mc-mark)        ; for multiple-cursors
   )
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package visual-regexp-steroids
  :ensure nil
  :defer 1
  :bind
  (
   :map esc-map
   ("C-r" . vr/isearch-backward)
   ("C-s" . vr/isearch-forward)
   )
  ;; :config
  ;;  (setq vr/engine 'pcre2el) ; emacs python
  ;; (defvar vr--command-python-default
  ;;   (format
  ;;    "python3 %s"
  ;;    (expand-file-name "regexp.py" (file-name-directory load-file-name))))
  )
#+end_src

** pcre2el

[[https://github.com/joddie/pcre2el][joddie/pcre2el: convert between PCRE, Emacs and rx regexp syntax]]

| Convert from | convert to |
|--------------+------------|
| ELISP        | RX         |
| ELISP        | SRE        |
| ELISP        | string     |
| PCRE         | ELISP      |
| PCRE         | RX         |
| PCRE         | SRE        |
| PCRE         | string     |
| RX           | ELISP      |
| RX           | PCRE       |
| RX           | SRE        |

test

Why python code block is tangled when without =:tangle no= ?

#+begin_src python :tangle no
re="(([\u2e80-\u9fff]+)([\n\r]{1,2})?([\s\t])?(([\u2e80-\u9fff]+)|(\w)+)([\s\t])?)"
#+end_src

#+begin_src emacs-lisp :tangle no
(submatch
 (submatch
  (+ (any (48 . 117)))
  )
 (\?
  (submatch (* 1 2 (any 10 13)))
  )
 (\?
  (submatch (any 9 10 12 13 32))
  )
 (submatch (or
            (submatch
             (+ (any (48 . 117))))
            (+
             (submatch (any 95 alnum))
             )
            )
           )
 (\?
  (submatch (any 9 10 12 13 32))
  )
 )
#+end_src

** xr

* 选择 & region
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       A1BE32E1-FC11-4644-A1BF-1B2EF86C7CF3
:END:

** zones

#+begin_src emacs-lisp :tangle no
(use-package zones
  :ensure nil
  :defer t
  )
#+end_src

** selected

#+begin_src emacs-lisp :tangle no
(use-package selected
  :diminish selected-minor-mode
  :demand t   ; So we can use global mode enable in :config
  :commands
  (selected-global-mode selected-minor-mode) ; redundant?
  :bind (
         :map selected-keymap           ; bindings for all active regions
         ("q" . selected-off)
         ("u" . upcase-region)
         ("d" . downcase-region)
         )
  :config
  (selected-global-mode)
  )
#+end_src

** expand-region

#+begin_src emacs-lisp
;; expand-region
;; {{{
(keymap-global-unset "C-=")
(keymap-global-unset "C--")
(use-package expand-region
  :bind
  (
   ("C-=" . er/expand-region)
   ("C--" . er/contract-region)
   )
  :config
  (defun treesit-mark-bigger-node ()
    (let* ((root (treesit-buffer-root-node))
           (node
            (treesit-node-descendant-for-range
             root (region-beginning) (region-end)))
           (node-start (treesit-node-start node))
           (node-end (treesit-node-end node)))
      ;; Node fits the region exactly. Try its parent node instead.
      (when (and (= (region-beginning) node-start) (= (region-end) node-end))
        (when-let ((node (treesit-node-parent node)))
          (setq
           node-start (treesit-node-start node)
           node-end (treesit-node-end node))))
      (set-mark node-end)
      (goto-char node-start)))

  (add-to-list 'er/try-expand-list 'treesit-mark-bigger-node))
;; }}}
#+end_src

** symbol-overlay

#+begin_src emacs-lisp
;; symbol-overlay
;; {{{
(use-package symbol-overlay
  :bind(
        ("M-I" . symbol-overlay-remove-all)
        ("M-i"  . symbol-overlay-put) ; 高亮或取消高亮当前 symbol
        ("M-n"  . symbol-overlay-switch-forward)
        ("M-p"  . symbol-overlay-switch-backward)
        ;; ("<f7>" . symbol-overlay-mode)
        ;; ("<f8>" . symbol-overlay-remove-all)
        :map symbol-overlay-map
        ;; quit
        ("q" . symbol-overlay-remove-all)
        ("<escape>" . symbol-overlay-remove-all)
        ;; jump/move/scope
        ("n" . symbol-overlay-jump-next)
        ("p" . symbol-overlay-jump-prev)
        ("<" . symbol-overlay-jump-first)
        (">" . symbol-overlay-jump-last)
        ("d" . symbol-overlay-jump-to-definition) ; 跳转到定义
        ("e" . symbol-overlay-echo-mark)          ; 撤销上一次跳转
        ("t" . symbol-overlay-toggle-in-scope)    ; 切换高亮范围到作用域
        ;; copy/edit/search/rename/replace
        ("c" . symbol-overlay-save-symbol)        ; 复制当前 symbol
        ("r" . symbol-overlay-rename)
        ("R" . symbol-overlay-query-replace)      ; 查找替换 symbol
        ("s" . symbol-overlay-isearch-literally)  ; 切换为 isearch 并搜索 symbol
        ;; toggle
        ("i" . symbol-overlay-put)                ; 高亮或取消高亮当前 symbol
        )
  )
;; }}}
#+end_src

** separedit

#+begin_src emacs-lisp :tangle no
(use-package separedit
  :ensure nil
  :defer t
  :bind
  ("C-c e" . separedit)
  :config
  (setq separedit-default-mode 'org-mode)
  ;; (setq separedit-preserve-string-indentation t)
  ;; (setq separedit-continue-fill-column t)
  ;; (setq separedit-write-file-when-execute-save t)
  ;; (setq separedit-remove-trailing-spaces-in-comment t)
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(defun separedit//region-of-el-commentary ()
  (save-excursion
    (goto-char (point-min))
    (when (re-search-forward "^;;; Commentary:\n+")
      (let ((begin (point)))
        (when (re-search-forward  "\n;;; .*$" nil t)
          (goto-char (match-beginning 0))
          (list begin (point)))))))

(defun separedit/edit-el-commentary ()
  "Edit whole commentary section as a single block."
  (interactive)
  (let ((separedit-leave-blank-line-in-comment t))
    (separedit-dwim
     (apply #'separedit-mark-region
            `(,@(separedit//region-of-el-commentary)
              markdown-mode)))))

(defun separedit/re-fill ()
  (interactive)
  (let ((separedit-continue-fill-column t))
    (with-current-buffer (separedit-dwim)
      (fill-region (point-min) (point-max))
      (execute-kbd-macro (kbd "C-c C-c")))))

(defun separedit/eval-last-sexp-in-comment ()
  (interactive)
  (let ((separedit-default-mode 'emacs-lisp-mode)
        (separedit-inhibit-edit-window-p t))
    (with-current-buffer (separedit)
      (unwind-protect (call-interactively #'eval-last-sexp)
        (separedit-abort)))))

(define-key emacs-lisp-mode-map (kbd "C-x C-e")
            (lambda ()
              (interactive)
              (call-interactively
               (if (separedit--point-at-comment)
                   #'separedit/eval-last-sexp-in-comment
                 #'eval-last-sexp))))
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://stackoverflow.com/questions/35243271/emacs-select-multiple-regions-and-switch-to-inverse
#+end_src

* 拼写检查 spell
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       D84D227C-5554-4544-AB1B-8F8F048F4A8C
:END:

** wucuo

#+begin_src emacs-lisp
;; ispell flyspell: aspell/hunspell
;; (dolist (hook '(text-mode-hook))                          ;; enable in text-mode
;;   (add-hook hook (lambda () (flyspell-mode 1))))
;; (dolist (hook '(change-log-mode-hook log-edit-mode-hook)) ;; disable in change-log-mode
;;   (add-hook hook (lambda () (flyspell-mode -1))))

;; aspell
;; {{{
(setq ispell-program-name "aspell")
;; You could add extra option "--camel-case" for camel case code spell checking if Aspell 0.60.8+ is installed
;; @see https://github.com/redguardtoo/emacs.d/issues/796

;; FIXME args-out-of-range
(setq ispell-extra-args '(
                          "--sug-mode=ultra"
                          "--lang=en_US"
                          "--camel-case"
                          "--run-together"
                          "--run-together-limit=16"
                          ))

;; ispell-personal-dictionary
;; }}}

;; wucuo
;; {{{
;; [redguardtoo](https://github.com/redguardtoo/emacs.d/lisp/init-spelling.el)
(defvar my-default-spell-check-language "en_US"
  "Language used by aspell and hunspell CLI.")

(use-package flyspell
  :bind
  ("C-c s" . flyspell-auto-correct-word)
  ;; You can also use "M-x ispell-word" or hotkey "M-$". It pop up a multiple choice
  ;; @see http://frequal.com/Perspectives/EmacsTip03-FlyspellAutoCorrectWord.html

  ;; flyspell-lazy is outdated and conflicts with latest flyspell
  :config
  ;; better performance
  (setq flyspell-issue-message-flag nil)
  )

;; Basic Logic Summary:
;; If (aspell is installed) { use aspell}
;; else if (hunspell is installed) { use hunspell }
;; English dictionary is used.
;;
;; I prefer aspell because:
;; - aspell is very stable and easy to install
;; - looks Kevin Atkinson still get some road map for aspell:
;; @see http://lists.gnu.org/archive/html/aspell-announce/2011-09/msg00000.html
(defun my-detect-ispell-args (&optional run-together)
  "If RUN-TOGETHER is true, spell check the CamelCase words.
RUN-TOGETHER makes aspell less capable to find plain English typo.
So it should be used in `prog-mode-hook' only."
  (let* (args)
    (when ispell-program-name
      (cond
       ;; use aspell
       ((string-match "aspell" ispell-program-name)
        ;; force the English dictionary, support Camel Case spelling check (tested with aspell 0.6)
        ;; For aspell's option "--lang", "two letter ISO 3166 country code after a underscore" is OPTIONAL.
        (setq args (list "--sug-mode=ultra"
                         (format "--lang=%s" my-default-spell-check-language)))
        ;; "--run-together-min" could not be 3, see `check` in "speller_impl.cpp".
        ;; The algorithm is not precise.
        ;; Run `echo tasteTableConfig | aspell --lang=en_US -C --run-together-limit=16  --encoding=utf-8 -a` in shell.
        (when run-together
          (cond
           ;; Kevin Atkinson said now aspell supports camel case directly
           ;; https://github.com/redguardtoo/emacs.d/issues/796
           ((string-match "--.*camel-case"
                          (shell-command-to-string
                           (concat ispell-program-name " --help")))
            (setq args (append args '("--camel-case"))))

           ;; old aspell uses "--run-together". Please note we are not dependent on this option
           ;; to check camel case word. wucuo is the final solution. This aspell options is just
           ;; some extra check to speed up the whole process.
           (t
            (setq args
                  (append args
                          '("--run-together" "--run-together-limit=16")))))))

       ;; use hunspell
       ((string-match "hunspell" ispell-program-name)
        (setq args nil))))
    args))

;; Aspell Setup (recommended):
;; It's easy to set up aspell. So the details are skipped.
;;
;; Hunspell Setup:
;; 1. Install hunspell from http://hunspell.sourceforge.net/
;;
;; 2. Download openoffice dictionary extension from
;; http://extensions.openoffice.org/en/project/english-dictionaries-apache-openoffice
;;
;; 3. Say `dict-en.oxt' is downloaded. Rename it to `dict-en.zip' and unzip
;; the contents to a temporary folder. Got "en_US.dic" and "en_US.aff" in
;; that folder.
;;
;; 4. Hunspell's option "-d en_US" means finding dictionary "en_US"
;; Modify `ispell-local-dictionary-alist' to set that option of hunspell
;;
;; 5. Copy "en_US.dic" and "en_US.aff" from that temporary folder to
;; the place for dictionary files. I use "~/usr_local/share/hunspell/".
;;
;; 6. Add that folder to shell environment variable "DICPATH"
;;
;; 7. Restart emacs so when hunspell is run by ispell/flyspell to make
;; "DICPATH" take effect
;;
;; hunspell searches a dictionary named "en_US" in the path specified by
;; "DICPATH" by default.

(defvar my-force-to-use-hunspell nil
  "Force to use hunspell.  If nil, try to detect aspell&hunspell.")

(defun my-configure-ispell-parameters ()
  "Set `ispell-program-name' and other parameters."
  (cond
   ;; use aspell
   ((and (not my-force-to-use-hunspell) (executable-find "aspell"))
    (setq ispell-program-name "aspell"))

   ;; use hunspell
   ((executable-find "hunspell")
    (setq ispell-program-name "hunspell")
    (setq ispell-local-dictionary my-default-spell-check-language)
    (setq ispell-local-dictionary-alist
          (list (list my-default-spell-check-language
                      "[[:alpha:]]" "[^[:alpha:]]" "[']"
                      nil
                      (list "-d" my-default-spell-check-language)
                      nil
                      'utf-8)))
    ;; New variable `ispell-hunspell-dictionary-alist' is defined in Emacs
    ;; If it's nil, Emacs tries to automatically set up the dictionaries.
    (when (boundp 'ispell-hunspell-dictionary-alist)
      (setq ispell-hunspell-dictionary-alist ispell-local-dictionary-alist)))

   (t (setq ispell-program-name nil)
      (message "You need install either aspell or hunspell for ispell"))))

;; You could define your own configuration and call `my-configure-ispell-parameters' in "~/.custom.el"
(my-configure-ispell-parameters)

(defun my-ispell-word-hack (orig-func &rest args)
  "Use Emacs original arguments when calling `ispell-word'.
When fixing a typo, avoid pass camel case option to cli program."
  (let* ((old-ispell-extra-args ispell-extra-args))
    (ispell-kill-ispell t)
    ;; use emacs original arguments
    (setq ispell-extra-args (my-detect-ispell-args))
    (apply orig-func args)
    ;; restore our own ispell arguments
    (setq ispell-extra-args old-ispell-extra-args)
    (ispell-kill-ispell t)))
(advice-add 'ispell-word :around #'my-ispell-word-hack)
(advice-add 'flyspell-auto-correct-word :around #'my-ispell-word-hack)

(defvar my-disable-wucuo nil
  "Disable wucuo.")

(defun my-ensure (feature)
  "Make sure FEATURE is required."
  (unless (featurep feature)
    (condition-case nil
        (require feature)
      (error nil))))

(defun text-mode-hook-setup ()
  "Set up text mode."
  ;; Turn off RUN-TOGETHER option when spell check text.
  (unless my-disable-wucuo
    (setq-local ispell-extra-args (my-detect-ispell-args))
    (my-ensure 'wucuo)
    (wucuo-start)))
(add-hook 'text-mode-hook 'text-mode-hook-setup)

(defun my-clean-aspell-dict ()
  "Clean ~/.aspell.pws (dictionary used by aspell)."
  (interactive)
  (let* ((dict (file-truename "~/.aspell.en.pws"))
         (lines (my-read-lines dict))
         ;; sort words
         (aspell-words (sort (cdr lines) 'string<)))
    (save-buffer)
    (sit-for 1)
    (with-temp-file dict
      (insert (format "%s %d\n%s"
                      "personal_ws-1.1 en"
                      (length aspell-words)
                      (mapconcat 'identity aspell-words "\n"))))))
;; }}}

;; wucuo: aspell or hunspell
;; {{{
(with-eval-after-load 'wucuo
  ;; (setq wucuo-aspell-language-to-use "en")
  ;; (setq wucuo-hunspell-dictionary-base-name "en_US")
  ;; do NOT turn on `flyspell-mode' automatically.
  ;; check buffer or visible region only
  ;; spell check buffer every 30 seconds
  (setq wucuo-update-interval 2)
  )

(setq wucuo-spell-check-buffer-predicate
      (lambda ()
        (not (memq
              major-mode
              '(dired-mode
                log-edit-mode
                compilation-mode
                help-mode
                profiler-report-mode
                speedbar-mode
                gud-mode
                calc-mode
                Info-mode)
              )
             )
        )
      )
;; }}}
#+end_src

* buffer
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       AE8D7706-B1DF-48F1-8DC9-A5B7461CA8C1
:END:
** consult

#+begin_src emacs-lisp
;; consult
;; {{{
;; Example configuration for Consult
(use-package consult
  :ensure nil
  :after org
  :defer 1
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind
  (
   ("C-c H-f H-d" . consult-find)
   ("C-c H-k" . consult-mark)
   ("C-c H-l" . consult-line)
   ("C-c H-r H-e" . consult-grep)
   ("C-c H-r H-g" . consult-ripgrep)
   ([remap bookmark-jump] . consult-bookmark)
   ([remap goto-line] . consult-goto-line)
   ([remap imenu] . consult-imenu)
   ([remap load-theme] . consult-theme)
   ([remap locate] . consult-locate)
   ([remap man] . consult-man)
   ([remap recentf-open-files] . consult-recent-file)
   ([remap repeat-complex-command] . consult-complex-command)
   ([remap switch-to-buffer-other-frame] . consult-buffer-other-frame)
   ([remap switch-to-buffer-other-window] . consult-buffer-other-window)
   ([remap switch-to-buffer] . consult-buffer)
   ([remap yank-pop] . consult-yank-pop)
   ;; ([remap apropos] . consult-apropos)
   ;; ;; ("C-x H-l" . consult-focus-lines)
   ;; ;; C-c bindings (mode-specific-map)
   ("C-c M-x" . consult-mode-command)
   ;; ("C-c h" . consult-history)
   ;; ("C-c k" . consult-kmacro)
   ;; ("C-c i" . consult-info)
   ;; ([remap Info-search] . consult-info)
   ;; ;; C-x bindings (ctl-x-map)
   ;; ("C-x p b" . consult-project-buffer) ;; orig. project-switch-to-buffer
   ;; ;; Custom M-# bindings for fast register access
   ;; ("M-#" . consult-register-load)
   ;; ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
   ;; ("C-M-#" . consult-register)
   ;; ;; Other custom bindings

   ;; ;; M-g bindings (goto-map)
   ;; ("M-g e" . consult-compile-error)
   ;; ("M-g f" . consult-flymake)     ;; Alternative: consult-flycheck
   ;; ("M-g g" . consult-goto-line)   ;; orig. goto-line
   ;; ("M-g M-g" . consult-goto-line) ;; orig. goto-line
   ;; ("M-g o" . consult-outline)     ;; Alternative: consult-org-heading
   ;; ("M-g m" . consult-mark)
   ;; ("M-g k" . consult-global-mark)

   ;; ("M-g I" . consult-imenu-multi)
   ;; ;; M-s bindings (search-map)
   ;; ("M-s d" . consult-find)
   ;; ("M-s D" . consult-locate)
   ;; ("M-s g" . consult-grep)
   ;; ("M-s G" . consult-git-grep)
   ;; ("M-s r" . consult-ripgrep)
   ;; ("M-s l" . consult-line) ; goto line with string
   ;; ("M-s L" . consult-line-multi)
   ;; ("M-s k" . consult-keep-lines)
   ;; ("M-s u" . consult-focus-lines)
   ;; Isearch integration
   ;; ("M-s e" . consult-isearch-history)
   ("M-s s" . consult-isearch-history)
   :map org-mode-map
   ([remap imenu]          . consult-org-heading)
   ([remap consult-imenu]  . consult-org-heading)
   ([remap org-goto]       . consult-org-heading) ; C-c C-j
   :map prog-mode-map
   ("C-c C-j"  . consult-outline)
   :map isearch-mode-map
   ([remap isearch-edit-string] . consult-isearch-history)
   ("M-s l" . consult-line) ;; needed by consult-line to detect isearch
   ("M-s L" . consult-line-multi) ;; needed by consult-line to detect isearch
   ;; Minibuffer history
   :map minibuffer-local-map
   ("M-s" . consult-history)  ;; orig. next-matching-history-element
   ("H-h" . consult-history) ;; orig. previous-matching-history-element
   )
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  ;; macOS locate doesn't support `--ignore-case --existing' args.
  (setq consult-locate-args (pcase system-type
                              ('gnu/linux
                               "locate --ignore-case --existing --regex")
                              ('darwin
                               "mdfind -name")
                              ))
  :config

  (setq consult-narrow-key "<" ;; (kbd "C-+")
        consult-async-min-input 2
        consult-async-refresh-delay 0.15
        consult-async-input-throttle 0.2
        consult-async-input-debounce 0.2)
  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-."))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  ;; (consult-customize
  ;;  consult-theme
  ;;  consult-ripgrep consult-git-grep consult-grep
  ;;  consult-bookmark consult-recent-file consult-xref
  ;;  consult--source-bookmark consult--source-file-register
  ;;  consult--source-recent-file consult--source-project-recent-file
  ;; consult-completion-in-region
  ;; :completion-styles (basic partial-completion flex) ; FIXME
  ;; :cycle-threshold 3
  ;; )

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;; There are multiple reasonable alternatives to chose from.
;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
;;;; 2. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
;;;; 3. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
;;;; 4. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))

  ;; Use `consult-completion-in-region' if Vertico is enabled.
  ;; Otherwise use the default `completion--in-region' function.
  ;; (setq-default completion-in-region-function
  ;;               (lambda (&rest args)
  ;;                 (apply (if vertico-mode
  ;;                            #'consult-completion-in-region
  ;;                          #'completion--in-region)
  ;;                        args)))
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
(setq consult-ripgrep-args
      "rg --sortr path --null --line-buffered
--color=never --max-columns=1000 --path-separator /
--smart-case --no-heading --line-number --multiline --type org ."
      )
#+end_src

#+begin_src emacs-lisp
(use-package consult-dir
  :ensure nil
  ;; :after (consult vertico)
  :bind
  (
   ([remap list-directory] . consult-dir)
   :map  vertico-map ; minibuffer-local-completion-map
   ("C-c C-d" . consult-dir)
   ("C-c C-j" . consult-dir-jump-file)
   )
  :config
  (setq consult-dir-default-command 'consult-find)
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package consult-project-extra
  :straight t
  :bind
  (
   ("C-c p f" . consult-project-extra-find) ; project-find-regexp
   ("C-c p o" . consult-project-extra-find-other-window)
   )
  )

;; ;; git@github.com:jdtsmith/consult-jump-project.git
;; (use-package consult-jump-project
;;   :load-path "~/code/emacs/consult-jump-project/"
;;   :straight
;;   (consult-jump-project
;;    :type git
;;    :host github
;;    :repo "jdtsmith/consult-jump-project"
;;    )
;;   :custom
;;   (consult-jump-direct-jump-modes '(dired-mode))
;;   :bind
;;   ("C-x p j" . consult-jump-project)
;;   )
#+end_src

#+begin_src emacs-lisp
(use-package consult-yasnippet
  :ensure nil
  ;; :defer t
  ;; :demand t
  :after (consult yasnippet)
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://emacs-china.org/t/helm-ivy-selectrum-completions-buffer/17148/26
(use-package embark
  :ensure t
  :bind
  (:map
   minibuffer-local-completion-map
   ;; 默认情况下 TAB 绑定的是 minibuffer-complete，但是在补全候选项数量超
   ;; 过 completion-cycle-threshold 的限制时， minibuffer-complete 则不会
   ;; 遍历所有的补全候选项。我个人感觉这种行为有点不符合直觉，TAB 如果可以
   ;; 无视 completion-cycle-threshold 限制，不论数量多少都进行遍历。正好这
   ;; 个行为就是对应的 minibuffer-force-complete 函数.
   ("TAB" . minibuffer-force-complete)
   ;; 这个键绑定就是为了解决在执行 consult-ripgrep 异步命令时如何有效的选
   ;; 择补全项。在前面提到，如果在 consult-ripgrep 时按 TAB (即
   ;; minibuffer-force-complete) 会覆盖用户的输入，这样就无法对输入进行二
   ;; 次修改了，显然是反直觉的。于是我就给 C-o 赋于了这样的一种能力: 在
   ;; minibuffer 里时如果想浏览 `*Embark Collect Completions*` buffer 的内
   ;; 容，按一下 C-o 就会跳到那个窗口中。然后就可以使用正常浏览 buffer 的
   ;; 方式浏览对应的补全项了。如果正好的对应的结果的话，也是按一下 RET 就
   ;; 好了。如果想二次修改输入，那么当前的 `*Embark Collect Completions*`
   ;; buffer 回到 minibuffer 也只需要再按一下 C-o 即可。我个人感觉这种处理
   ;; 方式更加满足一般人的需求，而不是像 oantolin 那样直接用
   ;; embark-collect-snapshot 来浏览结果，毕竟这样二次修改搜索内容。
   ("C-o" . toggle-between-minibuffer-and-embark-collect-completions)
   ("SPC" . nil))
  ;; 这里就是关键的一个了，在 minibuffer 建立的时候，如果用户有输入那么自
  ;; 动就打开 embark 的 embark-collect-completions 功能。这里除了可以是
  ;; embark-collect-completions-after-input 外还可以是
  ;; embark-collect-completions-after-delay. 如字面意思，一个是在有用户输
  ;; 入后，一个是在等待了一段时间后。
  ;;
  ;; 这里有一个小插曲。如果同时开启了 `minibuffer-eldef-shorten-default`
  ;; 和 `minibuffer-electric-default-mode`，C-h v 时会发现即使用户没有输
  ;; 入，在使用 `embark-collect-completions-after-input` 的情况下它过一段
  ;; 时间还是会弹出来对应的窗口。这是因为
  ;; `minibuffer-eldef-shorten-default` 在实现的时间会修改 minibuffer
  ;; prompt, 所以自然也就会让 `embark` 认为有用户输入了。因此规避的措施是
  ;; 关闭 `minibuffer-eldef-shorten-default`.
  :hook
  ((minibuffer-setup . embark-collect-completions-after-input)
   ;; 令 `*Embark Collect Completion*` 的窗口最大不超过当前 frame 的 40%。
   ;; 不然一个补全窗口占据太多视野功能就有点过了.
   (embark-collect-post-revert . resize-embark-collect-completions))
  :config
  (defun resize-embark-collect-completions ()
    (fit-window-to-buffer (get-buffer-window) (floor (* 0.4 (frame-height))) 1))

  (defun toggle-between-minibuffer-and-embark-collect-completions ()
    (interactive)
    (let ((w
           (if (eq (active-minibuffer-window) (selected-window))
               (get-buffer-window "*Embark Collect Completions*")
             (active-minibuffer-window))))
      (when (window-live-p w)
        (select-window w t)
        (select-frame-set-input-focus (selected-frame) t))))

  ;; evil 用户才需要这个，不然就可以定义在 use-package 的 :map 里了
  (with-eval-after-load 'evil-collection
    (evil-collection-define-key
     'normal
     'embark-collect-mode-map
     (kbd "C-o")
     'toggle-between-minibuffer-and-embark-collect-completions))

  ;; 不显示 `*Embark Collect Completions*` 窗口的 modeline，看起来简洁一点
  (add-to-list
   'display-buffer-alist
   '("\\*Embark Collect \\(Live\\|Completions\\)\\*"
     (display-buffer-at-bottom)
     (window-parameters . ((no-other-window . t) (mode-line-format . none)))))
  :custom
  ;; 永远使用单列来显示补全候选项
  (embark-collect-initial-view-alist '((t . list)))
  (embark-collect-live-initial-delay 0.15)
  (embark-collect-live-update-delay 0.15))
#+end_src

* minibuffer
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       ACE87324-3F5F-49FC-B886-1FE7B1EB58C7
:END:

** marginalia

#+begin_src emacs-lisp
;; marginalia: minibuffer annotations
;; {{{
;; Enable rich annotations using the Marginalia package
(use-package marginalia
  :ensure nil
  ;; Either bind `marginalia-cycle' globally or only in the minibuffer
  ;; :bind (("C-M-a" . marginalia-cycle)
  ;;        :map minibuffer-local-map
  ;;        ("C-M-a" . marginalia-cycle))
  ;; :custom (marginalia-align 'right)
  ;; :init
  ;; The :init configuration is always executed (Not lazy!)
  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  ;; (marginalia-mode)
  :hook (after-init . marginalia-mode)
  :config
  ;; https://emacs-china.org/t/21-emacs-vertico-orderless-marginalia-embark-consult/19683/
  (defun marginalia-annotate-command (cand)
    "Annotate command CAND with its documentation string.
Similar to `marginalia-annotate-symbol', but does not show symbol class."
    (when-let* ((sym (intern-soft cand))
                (mode (if (boundp sym)
                          sym
                        (lookup-minor-mode-from-indicator cand))))
      (concat
       (if (and (boundp mode) (symbol-value mode))
           (propertize " On" 'face 'marginalia-on)
         (propertize " Off" 'face 'marginalia-off))
       (marginalia-annotate-binding cand)
       (marginalia--documentation (marginalia--function-doc sym)))))
  )
;; }}}
#+end_src

** vertico+posframe

#+begin_src emacs-lisp
(use-package vertico
  :ensure nil
  :bind
  (
   :map vertico-map
   ([backtab] . vertico-previous)
   ("<tab>" . vertico-insert)    ; Choose selected candidate
   ;; ("<escape>" . minibuffer-keyboard-quit) ; Close minibuffer
   ("<escape>" . vertico-exit)
   :map minibuffer-local-map
   ("M-h" . backward-kill-word)
   )
  :init
  (fido-mode -1)
  (fido-vertical-mode -1)
  (vertico-mode)
  (vertico-mouse-mode)
  ;; (setq vertico-scroll-margin 0) ; Different scroll margin
  (setq vertico-count 20)  ; Show more candidates
  (setq vertico-resize nil) ; Grow and shrink the Vertico minibuffer
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  (setq vertico-cycle t)
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; Configure directory extension.
(use-package vertico-directory
  :ensure nil
  :after vertico
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy)
  ;; More convenient directory navigation commands
  :bind
  (
   :map vertico-map
   ("H-k" . vertico-directory-up)
   ("RET" . vertico-directory-enter)
   ("DEL" . vertico-directory-delete-char)
   ("M-DEL" . vertico-directory-delete-word)
   )
  )
#+end_src

#+begin_src emacs-lisp
;; A few more useful configurations...
(use-package emacs
  :ensure nil
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
  )
#+end_src

#+begin_src emacs-lisp
(use-package vertico-posframe
  :ensure nil
  :after (vertico posframe)
  :config
  (vertico-multiform-mode 1)
  ;; (setq vertico-multiform-commands
  ;;       '((consult-line
  ;;          posframe
  ;;          (vertico-posframe-poshandler . posframe-poshandler-frame-top-center)
  ;;          (vertico-posframe-border-width . 10)
  ;;          ;; NOTE: This is useful when emacs is used in both in X and
  ;;          ;; terminal, for posframe do not work well in terminal, so
  ;;          ;; vertico-buffer-mode will be used as fallback at the
  ;;          ;; moment.
  ;;          (vertico-posframe-fallback-mode . vertico-buffer-mode))
  ;;         (t posframe)))

  (vertico-posframe-mode 1)
  (setq vertico-posframe-parameters
        '(
          (left-fringe . 20)
          (right-fringe . 20)
          ))
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(defun with-minibuffer-keymap (keymap)
  (lambda (fn &rest args)
    (minibuffer-with-setup-hook
        (lambda ()
          (use-local-map
           (make-composed-keymap keymap (current-local-map))))
      (apply fn args))))

(defvar embark-completing-read-prompter-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "<tab>") 'abort-recursive-edit)
    map))

(advice-add 'embark-completing-read-prompter :around
            (with-minibuffer-keymap embark-completing-read-prompter-map))
(define-key vertico-map (kbd "<tab>") 'embark-act-with-completing-read)

(defun embark-act-with-completing-read (&optional arg)
  (interactive "P")
  (let* ((embark-prompter 'embark-completing-read-prompter)
         (act (propertize "Act" 'face 'highlight))
         (embark-indicator (lambda (_keymap targets) nil)))
    (embark-act arg)))
#+end_src

** aggressive-completion

#+begin_src emacs-lisp :tangle no
(use-package aggressive-completion
  :straight t
  :bind
  (:map aggressive-completion-minibuffer-map
        ("TAB" . completion:auto-select))
  :hook
  (after-init-hook . aggressive-completion-mode)
  :config
  (add-hook 'aggressive-completion-mode-hook #'completion:disable-auto-select)
  (defun completion:disable-auto-select ()
    ;; 避免自动切换至 `Completions-buffer' 中的补全项
    (setq completion-auto-select nil
          ;; 禁止 `minibuffer' 中的补全
          completion-cycle-threshold nil))

  (defun completion:auto-select ()
    "`TAB' 键可切换至 `Completions-buffer' 中的补全项"
    (interactive)
    (let ((completion-auto-select t))
      (minibuffer-complete))))
#+end_src

#+begin_src emacs-lisp :tangle no
;; minibuffer + aggressive-completion
;; https://emacs-china.org/t/helm-ivy-selectrum-completions-buffer/17148/44
;; {{{
(use-package minibuffer
  :init
  (keymap-unset minibuffer-local-completion-map "SPC")
  :bind
  (:map completion-list-mode-map
        ("z" . switch-to-minibuffer))
  :custom
  (isearch-allow-scroll t)
  ;; (enable-recursive-minibuffers t)
  (minibuffer-depth-indicate-mode t)
  (minibuffer-electric-default-mode t)
  ;; Don't insert completion at point into minibuffer
  (minibuffer-completion-auto-choose nil)
  ;; One frame one minibuffer.
  (minibuffer-follows-selected-frame nil)
  (read-buffer-completion-ignore-case t)
  (read-file-name-completion-ignore-case t)
  (minibuffer-default-prompt-format " [%s]")
  (minibuffer-prompt-properties
   '(read-only t cursor-intangible t face minibuffer-prompt))
  (resize-mini-windows t)
  (completion-auto-help t)
  (completion-show-help nil)
                                        ;(completion-show-inline-help nil)
  (completion-cycle-threshold nil)
  ;; `t' `second-tab' `nil'
  (completion-auto-select 'seond-tab)
  (completions-detailed t)
  ;; Ignore cases when complete
  (completion-ignore-case t)
  ;; vertical display
  (completions-format 'one-column)
  (completions-max-height 7)
  (completions-sort #'completion:list-sort)
  :config
  ;; Hide the mode line of the Completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Completions\\*"
                 nil
                 (window-parameters (mode-line-format . none))))

  (defun completion:list-sort (all)
    "对 `Completions-buffer' 中的补全项进行排序"
    (let ((hist (minibuffer-history-value)))
      (thread-first all
                    (sort (lambda (c1 c2) (< (length c1) (length c2))))
                    (sort (lambda (c1 c2) (> (length (member c1 hist))
                                             (length (member c2 hist)))))))))
;; }}}
#+end_src

* tree-sitter
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       84F714FD-7024-4C24-8065-5338BEAFA376
:END:

** treesit-auto

#+begin_src emacs-lisp :tangle no
(use-package treesit-auto
  :config
  (global-treesit-auto-mode))
#+end_src

* 补全 & LSP
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       B7CF8CED-3844-4A68-B89F-A9E7294AD72C
:END:

** corfu+cape

https://www.youtube.com/watch?v=Vx0bSKF4y78

#+begin_src emacs-lisp :tangle no
(use-package corfu
  :ensure t
  :custom
  (corfu-cycle t)
  (corfu-auto t)
  (corfu-quit-at-boundary nil)
  (corfu-scroll-margin 5)
  (corfu-echo-documentation t)
  (corfu-quit-no-match t)
  :bind
  (
   :map corfu-map
   ("TAB" . corfu-insert)
   ([tab] . corfu-insert)
   ("C-n" . corfu-next)
   ("C-p" . corfu-previous)
   )
  :init (global-corfu-mode))

(use-package corfu-popupinfo
  :after corfu
  :ensure nil
  :init
  (corfu-popupinfo-mode)
  :config
  (setq corfu-popupinfo-delay 0.1)
  )

;; https://codeberg.org/akib/emacs-corfu-terminal

;; https://github.com/manateelazycat/corfu-english-helper
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package cape
  :ensure t
  :config
  (defun granddaifuku/eglot-capf ()
    (setq-local completion-at-point-functions
                (list
                 (cape-super-capf
                  #'eglot-completion-at-point
                  (cape-company-to-capf #'company-yasnippet)))))
  (add-hook 'eglot-managed-mode-hook #'granddaifuku/eglot-capf)
  )

;; cape-yasnippet
#+end_src

#+begin_src emacs-lisp :tangle no
;; https://github.com/granddaifuku/.emacs.d

;; for company
(add-hook
 'eglot-managed-mode-hook
 (lambda ()
   (add-to-list 'company-backends '(company-capf :with company-yasnippet))))

;; for corfu
(use-package cape)

(defun my/eglot-capf ()
  (setq-local completion-at-point-functions
              (list
               (cape-super-capf
                #'eglot-completion-at-point
                (cape-company-to-capf #'company-yasnippet)))))

(add-hook 'eglot-managed-mode-hook #'my/eglot-capf)
#+end_src

** company

company-box

company-quickhelp

** lsp-bridge :FIXME:Git:

*** use-package

#+begin_src emacs-lisp :tangle no
(use-package lsp-bridge
  :ensure nil
  ;; :after (yasnippet posframe)
  ;; :hook
  ;; (after-init . lsp-bridge-mode)
  ;; ((prog-mode org-mode) . lsp-bridge-mode)
  :defer 1
  ;; :commands lsp-bridge-mode
  :bind
  (
   :map acm-mode-map
   ;; ("RET" . nil)
   ;; ("<escape>"  . acm-hide)
   ;; insert common/abort completion
   ("<escape>"  . acm-insert-common)
   ("C-j"       . acm-insert-common)
   ;; ("RET"       . acm-insert-common)
   ;; complete
   ("SPC"       . acm-complete)
   ;; ("RET"       . acm-complete)
   ;; ([remap yas-expand] . acm-complete)
   ;; select
   ("TAB"       . acm-select-next)
   ("<tab>"       . acm-select-next)
   ("<backtab>" . acm-select-prev)
   ;; ("H-TAB"    . acm-select-prev)
   ("H-j"       . acm-select-next)
   ("H-k"      . acm-select-prev)
   ;; :map lsp-bridge-mode-map
   ;; ("M-." . lsp-bridge-find-def)
   ;; ("M-," . lsp-bridge-return-from-def)
   ;; ("M-?" . lsp-bridge-find-references)
   ;; ("M-i" . lsp-bridge-lookup-documentation)
   ;; ("M-n" . lsp-bridge-popup-documentation-scroll-up)
   ;; ("M-p" . lsp-bridge-popup-documentation-scroll-down)
   ;; ("s-C-n" . lsp-bridge-jump-to-next-diagnostic)
   ;; ("s-C-p" . lsp-bridge-jump-to-prev-diagnostic)
   )
  :init
  (setq-default lsp-bridge-enable-mode-line nil)
  :config
  (require 'yasnippet)
  (yas-global-mode 1)
  (require 'lsp-bridge)
  (global-lsp-bridge-mode)
  (setq acm-enable-quick-access t)
  (setq acm-quick-access-modifier 'meta)
  ;; (setq lsp-bridge-auto-format-code t)
  ;; (setq lsp-bridge-python-lsp-server "jedi")
  ;; (setq lsp-bridge-use-ds-pinyin-in-org-mode t)
  ;; (setq lsp-bridge-use-wenls-in-org-mode t)
  ;; ;; lsp-bridge-org-babel-lang-list ; default: clojure latex python
  ;; (add-to-list 'lsp-bridge-org-babel-lang-list "emacs-lisp")
  ;; (add-to-list 'lsp-bridge-org-babel-lang-list "shell")
  )
#+end_src

*** vanilla

#+begin_src emacs-lisp :tangle no
(require 'yasnippet)
(yas-global-mode 1)
(require 'lsp-bridge)
(global-lsp-bridge-mode)
;; (keymap-set acm-mode-map "ESC"       'acm-hide)   ; FIXME
(keymap-unset acm-mode-map "SPC")
(keymap-unset acm-mode-map "RET")
(keymap-unset acm-mode-map "TAB")
(keymap-unset acm-mode-map "<tab>")
;; complete
(keymap-set acm-mode-map "SPC" 'acm-complete)
;; (keymap-set acm-mode-map "RET" 'acm-complete)
;; select 方案一
(keymap-set acm-mode-map "TAB" 'acm-select-next)
(keymap-set acm-mode-map "<backtab>" 'acm-select-prev)
;; (keymap-set acm-mode-map "H-TAB"       'acm-select-next)
;; select 方案二
(keymap-set acm-mode-map "H-j" 'acm-select-next)
(keymap-set acm-mode-map "H-k" 'acm-select-prev)
;; select 方案三
;; (keymap-set acm-mode-map "RET"     'acm-select-next)
;; (keymap-set acm-mode-map "<tab>"     'acm-select-prev)
;; abort
(keymap-set acm-mode-map "C-j" 'acm-insert-common)
;; hide
(keymap-set acm-mode-map "<escape>" 'acm-hide)
#+end_src

*** idle

#+begin_src emacs-lisp :tangle no
(run-with-idle-timer
 1 nil
 #'(lambda ()
     (require 'yasnippet)
     (yas-global-mode 1)
     (require 'lsp-bridge)
     (global-lsp-bridge-mode)
     ;; (keymap-set acm-mode-map "ESC"       'acm-hide)   ; FIXME
     (keymap-unset acm-mode-map "SPC")
     (keymap-unset acm-mode-map "RET")
     (keymap-unset acm-mode-map "TAB")
     (keymap-unset acm-mode-map "<tab>")
     ;; complete
     (keymap-set acm-mode-map "SPC" 'acm-complete)
     (keymap-set acm-mode-map "RET" 'acm-complete)
     ;; select 方案一
     (keymap-set acm-mode-map "TAB" 'acm-select-next)
     (keymap-set acm-mode-map "<backtab>" 'acm-select-prev)
     ;; (keymap-set acm-mode-map "H-TAB"       'acm-select-next)
     ;; select 方案二
     (keymap-set acm-mode-map "H-j" 'acm-select-next)
     (keymap-set acm-mode-map "H-k" 'acm-select-prev)
     ;; select 方案三
     ;; (keymap-set acm-mode-map "RET"     'acm-select-next)
     ;; (keymap-set acm-mode-map "<tab>"     'acm-select-prev)
     ;; abort
     (keymap-set acm-mode-map "C-j" 'acm-insert-common)
     ;; hide
     (keymap-set acm-mode-map "<escape>" 'acm-hide)
     ))
#+end_src

*** misc

#+begin_src emacs-lisp :tangle no
(setq lsp-bridge-default-mode-hooks
      (remove 'org-mode-hook lsp-bridge-default-mode-hooks))
#+end_src

#+begin_src emacs-lisp :tangle no
;; (keymap-set acm-mode-map "H-;" 'lsp-bridge-toggle-sdcv-helper)
;; (define-key map [remap next-line] #'acm-select-next)
;; (define-key map [remap previous-line] #'acm-select-prev)
;; (define-key map [down] #'acm-select-next)
;; (define-key map [up] #'acm-select-prev)
;; (define-key map [tab]  #'acm-complete)
;; (define-key map "\M-n" #'acm-select-next)
;; (define-key map "\M-p" #'acm-select-prev)
;; (define-key map "\M-," #'acm-select-last)
;; (define-key map "\M-." #'acm-select-first)
;; (define-key map "\C-m" #'acm-complete)
;; (define-key map "\t" #'acm-complete)
;; (define-key map "\n" #'acm-complete)
;; (define-key map "\M-h" #'acm-complete)
;; (define-key map "\M-H" #'acm-insert-common)
;; (define-key map "\M-u" #'acm-filter)
;; (define-key map "\M-d" #'acm-doc-toggle)
;; (define-key map "\M-j" #'acm-doc-scroll-up)
;; (define-key map "\M-k" #'acm-doc-scroll-down)
;; (define-key map "\M-l" #'acm-hide)
;; (define-key map "\C-g" #'acm-hide)
#+end_src

* snippet
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       AA2CF138-2651-49C1-A005-B1B7B7363A69
:END:

** YASnippet

#+begin_src emacs-lisp
;; yasnippet
;; {{{
(use-package yasnippet
  :ensure nil
  ;; :diminish yas-minor-mode
  :hook
  (after-init . yas-reload-all)
  ;; ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
  :config
  (yas-global-mode 1)
  ;; Suppress warning for yasnippet code.
  (require 'warnings)
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

  ;; (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))

  ;; (defun smarter-yas-expand-next-field ()
  ;;   "Try to `yas-expand' then `yas-next-field' at current cursor position."
  ;;   (interactive)
  ;;   (let ((old-point (point))
  ;;         (old-tick (buffer-chars-modified-tick)))
  ;;     (yas-expand)
  ;;     (when (and (eq old-point (point))
  ;;                (eq old-tick (buffer-chars-modified-tick)))
  ;;       (ignore-errors (yas-next-field))))
  ;;   )
  )
;; }}}
#+end_src

** yankpad

#+begin_src emacs-lisp :tangle no
(use-package yankpad
  :ensure t
  ;; :defer 10
  :init
  (setq yankpad-file (concat user-emacs-directory "yankpad.org"))
  :bind (:map my-map ("SPC" . yankpad-insert)
              ("y" . yankpad-expand)
              )
  :config
  (bind-key "<f7>" 'yankpad-map)
  (bind-key "<f12>" 'yankpad-expand)
  ;; If you want to complete snippets using company-mode
  (add-to-list 'company-backends #'company-yankpad)
  ;; If you want to expand snippets with hippie-expand
  (add-to-list 'hippie-expand-try-functions-list #'yankpad-expand))
#+end_src

** Tempel

* 中文：拼音输入与搜索
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       82FC09E4-AC1A-4AE0-82D7-1145D1CA45AB
:END:

** pyim                                                              :输入法:

*** 基础设置

#+begin_src emacs-lisp
;; pyim
;; {{{
(use-package pyim
  :ensure nil
  :defer 1
  :bind
  (
   ("H-e" . toggle-input-method)
   ([remap backward-word] . pyim-backward-word)
   ([remap forward-word]  . pyim-forward-word)
   ;; ("H-b" . pyim-backward-word)
   ;; ("H-f" . pyim-forward-word)
   ("H-c H-c" . pyim-convert-string-at-point) ; 金手指：将字符串转换为中文。
   :map minibuffer-local-map
   ("H-c" . pyim-cregexp-convert-at-point) ; 将光标前字符转换为搜索中文的 regexp.
   :map pyim-mode-map
   ("-"   . pyim-page-previous-page)
   ("+"   . pyim-page-next-page)
   ("H-h" . pyim-page-previous-page)
   ("H-l" . pyim-page-next-page)
   ("H-j" .  pyim-forward-imelem)
   ("H-k" . pyim-backward-imelem)
   )
  :init
  ;; (setq default-input-method "pyim")
  (setq pyim-default-scheme 'quanpin) ; shaungpin/rime
  ;; (setq default-input-method "pyim")
  (setq pyim-page-style 'vertical)
  (setq pyim-page-tooltip '(posframe minibuffer popup))
  (setq pyim-page-length 9)
  :config
  (require 'pyim-cregexp-utils)
  (require 'pyim-cstring-utils)

  ;; (require 'pyim-basedict) ; 拼音词库设置
  ;; (pyim-basedict-enable)   ; 拼音词库
  ;; (require 'pyim-greatdict)
  ;; (pyim-greatdict-enable)
  (require 'pyim-tsinghua-dict)
  (pyim-tsinghua-dict-enable)

  (setq-default pyim-punctuation-translate-p '(auto)) ;; 全角半角

  ;; 让 avy 支持拼音搜索
  (with-eval-after-load 'avy
    (defun my-avy--regex-candidates (fun regex &optional beg end pred group)
      (let ((regex (pyim-cregexp-build regex)))
        (funcall fun regex beg end pred group)))
    (advice-add 'avy--regex-candidates :around #'my-avy--regex-candidates))

  ;; 让 vertico, selectrum 等补全框架，通过 orderless 支持拼音搜索候选项功能。
  (defun my-orderless-regexp (orig-func component)
    (let ((result (funcall orig-func component)))
      (pyim-cregexp-build result)))

  (advice-add 'orderless-regexp :around #'my-orderless-regexp)

  (pyim-isearch-mode -1) ; 性能差，不启用
  )
;; }}}
#+end_src

*** 光标颜色

#+begin_src emacs-lisp :tangle no
(use-package pyim
  :ensure nil
  :config
  (setq pyim-indicator-list
        (list
         #'my-pyim-indicator-with-cursor-color #'pyim-indicator-with-modeline))

  (defun my-pyim-indicator-with-cursor-color (input-method chinese-input-p)
    (if (not (equal input-method "pyim"))
        (progn
          ;; 用户在这里定义 pyim 未激活时的光标颜色设置语句
          (set-cursor-color "grey"))
      (if chinese-input-p
          (progn
            ;; 用户在这里定义 pyim 输入中文时的光标颜色设置语句
            (set-cursor-color "purple"))
        ;; 用户在这里定义 pyim 输入英文时的光标颜色设置语句
        (set-cursor-color "green"))))
  )
#+end_src

*** 输入法切换探针

#+begin_src emacs-lisp
(use-package pyim
  :ensure nil
  :config
  ;; 探针
  (setq-default pyim-english-input-switch-functions
                '(pyim-probe-auto-english
                  pyim-probe-program-mode
                  pyim-probe-dynamic-english
                  pyim-probe-isearch-mode
                  pyim-probe-org-structure-template
                  pyim-probe-org-speed-commands))

  (setq-default pyim-punctuation-half-width-functions
                '(pyim-probe-punctuation-line-beginning
                  pyim-probe-punctuation-after-punctuation))
  )
#+end_src

** pinyinlib

#+begin_src emacs-lisp
(use-package pinyinlib
  :ensure nil
  :defer t
  )
#+end_src

竞品：pyim

** ace-pinyin

#+begin_src emacs-lisp
;; ace-pinyin
;; {{{
(use-package ace-pinyin
  :defer 1
  :config
  (setq ace-pinyin-use-avy t)
  (ace-pinyin-global-mode +1)
  )
;; }}}
#+end_src

** emacs-rime

#+begin_src emacs-lisp :tangle no
(defun change-cursor-color-on-input-method ()
  "Set cursor color depending on whether an input method is used or not."
  (interactive)
  (set-cursor-color (if (and (rime--should-enable-p)
                             (not (rime--should-inline-ascii-p))
                             current-input-method)
                        input-method-cursor-color
                      default-cursor-color)))
#+end_src

[[https://github.com/DogLooksGood/emacs-rime][DogLooksGood/emacs-rime: RIME ㄓ in Emacs]]

[[https://github.com/Eason0210/im-cursor-chg][Eason0210/im-cursor-chg]]

* 搜索工具
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       61B1EF66-4E1B-4A45-AEB7-07F5A30FC68E
:END:

** orderless

#+begin_src emacs-lisp
;; orderless: minibuffer filter, works with icomplete
;; {{{
(use-package orderless
  :ensure nil
  :init
  ;; basic partial-completion emacs22 substring initials flex
  (setq completion-styles '(basic partial-completion orderless))
  ;; (setq completion-styles
  ;;       '(orderless basic initials substring partial-completion flex)
  (setq completion-category-defaults nil)
  (setq completion-category-overrides nil)
  ;; (setq completion-category-overrides
  ;;       '((file
  ;;          (styles basic partial-completion)
  ;;          )))
  (setq orderless-component-separator "[ &]") ; & is for company because space will break completion
  ;; :config
  ;; ;; make completion support pinyin, refer to
  ;; ;; https://emacs-china.org/t/vertico/17913/2
  ;; ;; list 版
  ;; (defun completion--regex-pinyin (str)
  ;;   (orderless-regexp (pinyinlib-build-regexp-string str))
  ;;   )
  ;; (add-to-list 'orderless-matching-styles 'completion--regex-pinyin)
  ;; ;; advice 版
  ;; (defun orderless-regexp-pinyin (str)
  ;;   (setf (car str) (pinyinlib-build-regexp-string (car str)))
  ;;   str)
  ;; (advice-add 'orderless-regexp :filter-args #'orderless-regexp-pinyin)

  ;; https://emacs-china.org/t/consult-ripgrep/23237/9
  (defun without-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))
  :config
  (add-to-list 'orderless-style-dispatchers #'without-if-bang)
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package
  orderless
  :config
  (defmacro dispatch: (regexp style)
    (cl-flet
        ((symcat (a b) (intern (concat a (symbol-name b)))))
      `(defun ,(symcat "dispatch:" style) (pattern _index _total)
         (when (string-match ,regexp pattern)
           (cons ',(symcat "orderless-" style) (match-string 1 pattern))))))
  (cl-flet
      ((pre/post (str) (format "^%s\\(.*\\)$\\|^\\(?1:.*\\)%s$" str str)))
    (dispatch: (pre/post "=") literal)
    (dispatch: (pre/post "`") regexp)
    (dispatch:
     (pre/post
      (if (or minibuffer-completing-file-name (derived-mode-p 'eshell-mode))
          "%"
        "[%.]"))
     initialism))
  (dispatch: "^{\\(.*\\)}$" flex)
  (dispatch: "^\\([^][^\\+*]*[./-][^][\\+*$]*\\)$" prefixes)
  (dispatch: "^!\\(.+\\)$" without-literal)

  (orderless-define-completion-style
      +orderless-with-initialism
    (orderless-matching-styles
     '(orderless-initialism orderless-literal orderless-regexp)))
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides
   '((file (styles partial-completion))
     (command (styles +orderless-with-initialism))
     (variable (styles +orderless-with-initialism))
     (symbol (styles +orderless-with-initialism))
     (eglot (styles +orderless-with-initialism))))
  (orderless-style-dispatchers
   '(dispatch:literal
     dispatch:regexp
     dispatch:without-literal
     dispatch:initialism
     dispatch:flex
     dispatch:prefixes))
  (orderless-component-separator #'orderless-escapable-split-on-space))
#+end_src

** isearch-mb

[[https://github.com/astoff/isearch-mb][astoff/isearch-mb]]

[[https://emacs-china.org/t/isearch-mb-minibuffer-isearch-query/17878][isearch-mb: 在 minibuffer 中编辑 isearch query - Emacs China]]

** wgrep

#+begin_src emacs-lisp
(use-package wgrep
  :ensure nil
  :bind
  (
   :map grep-mode-map
   ("C-c C-q" . wgrep-change-to-wgrep-mode)
   )
  :config
  (setq wgrep-auto-save-buffer t)
  )
#+end_src

** ripgrep: deadgrep

#+begin_src emacs-lisp
;; deadgrep
;; {{{
(use-package deadgrep
  :ensure nil
  ;; :defer 1.5
  :bind
  (
   ("C-c d g" . deadgrep)
   ("C-c g o"   . my/grep-org-files)
   :map deadgrep-mode-map
   ("e" . deadgrep-edit-mode)
   :map deadgrep-edit-mode-map ; wgrep
   ("C-c C-c" . deadgrep-mode)
   )
  :config
  (setq deadgrep-max-buffers 1)
  (setq kill-buffer-query-functions nil)

  (defun my/grep-org-files (words)
    (interactive "sSearch(ripgrep) org-roam files: ")
    (let ((default-directory org-roam-directory)
          (deadgrep--file-type '(glob . "*.org"))
          (deadgrep--context '(1 . 1))
          (deadgrep--search-type 'regexp))
      (deadgrep words)
      )
    )

  (setq my/home-directory "~/")
  (defun my/deadgrep-home-dir ()
    (interactive)
    (if (equal major-mode 'dired-mode)
        (setq search-term
              (read-from-minibuffer "Search : "))
      (setq search-term
            (read-from-minibuffer "Search : " (thing-at-point 'symbol)))
      )
    (deadgrep search-term my/home-directory)
    )

  (defun my/deadgrep ()
    (interactive)
    (if (equal major-mode 'dired-mode)
        (setq search-term
              (read-from-minibuffer "Search : "))
      (setq search-term
            (read-from-minibuffer "Search : " (thing-at-point 'symbol)))
      )
    (deadgrep search-term)
    )
  )
;; }}}
#+end_src

** khoj

Natural Language Search

#+begin_src emacs-lisp :tangle no
;; khoj
;; {{{
;; Install Khoj Package from MELPA Stable
(use-package khoj
  :ensure nil
  :defer t
  :bind ("C-c n l" . 'khoj))
;; }}}
#+end_src

** color-rg :Git:

#+begin_src emacs-lisp :tangle no
(use-package color-rg
  ;; git@github.com:manateelazycat/color-rg.git
  :ensure nil
  :bind
  (
   :map isearch-mode-map
   ("M-s M-s" . isearch-toggle-color-rg)
   )
  )
#+end_src

* 文件管理
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       D49C1FE4-58E7-49DA-A075-48EA626A51D2
:END:

** dired-hacks

https://github.com/Fuco1/dired-hacks

** dired-recent

** dired-narrow

** dired-isearch

** ebib

#+begin_src emacs-lisp :tangle no
;; https://github.com/tshu-w/.emacs.d/blob/master/lisp/lang-latex.el
(use-package ebib
  :ensure nil
  :defer t
  :bind
  (
   :map ebib-multiline-mode-map
   ("C-c C-c" . ebib-quit-multiline-buffer-and-save)
   ("C-c C-q" . ebib-cancel-multiline-buffer)
   ("C-c C-s" . ebib-save-from-multiline-buffer)
   )
  :custom
  (bibtex-autokey-name-case-convert-function 'capitalize)
  (bibtex-autokey-titlewords 0)
  (bibtex-autokey-year-length 4)
  (ebib-uniquify-keys t)
  (ebib-bibtex-dialect 'biblatex)
  (ebib-index-window-size 10)
  (ebib-preload-bib-files '("~/Documents/Bibliography/references.bib"))
  (ebib-notes-use-single-file "~/Documents/Bibliography/Notes.org")
  (ebib-file-search-dirs '("~/Documents/Bibliography/bibtex-pdfs/"))
  (ebib-reading-list-file "~/Documents/Bibliography/ReadingList.org")
  (ebib-keywords-file "~/Documents/Bibliography/ebib-keywords.txt")
  (ebib-keywords-field-keep-sorted t)
  (ebib-keywords-file-save-on-exit 'always)
  (ebib-file-associations '(("pdf")) "using Emacs to open pdf")
  (ebib-use-timestamp t "recording the time that entries are added")
  (ebib-index-columns
   '(
     ("Entry Key" 20 t)
     ("Author/Editor" 40 nil)
     ("Year" 6 t)
     ("Title" 50 t)
     ))
  (ebib-index-default-sort '("timestamp" . descend))
  )
#+end_src

** bibtex-completion

#+begin_src emacs-lisp :tangle no
;; https://github.com/jousimies/.emacs.d/blob/master/lisp/init-bibtex.el
(use-package bibtex-completion
  :ensure nil
  :config
  (setq bibtex-completion-bibliography
        `(,(concat my-galaxy "/bibtexs/References.bib")
          ,(expand-file-name "L.Calibre/calibre.bib" my-cloud)))
  (setq bibtex-completion-notes-path (expand-file-name "roam/ref" my-galaxy))
  (setq bibtex-completion-pdf-field "File")
  (setq bibtex-completion-additional-search-fields '(keywords journal booktitle))
  (setq bibtex-completion-pdf-symbol "P")
  (setq bibtex-completion-notes-symbol "N")
  (setq bibtex-completion-display-formats
        '(
          (article . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
          (inbook . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
          (incollection . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (inproceedings . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
          (t . "${=has-pdf=:1} ${=has-note=:1} ${year:4} ${author:36} ${title:*}")
          ))
  )
#+end_src

** citar

#+begin_src emacs-lisp :tangle no

#+end_src

** org-ref

#+begin_src emacs-lisp :tangle no
(use-package org-ref
  :ensure nil
  :defer t
  ;; :general
  ;; (z-spc-leader-def "r" 'org-ref-hydra/body)
  ;; :pretty-hydra
  ;; ((:color red :quit-key "q")
  ;;  ("Insert"
  ;;   (("i" org-ref-helm-insert-cite-link "citation key")
  ;;    ("r" org-ref-helm-insert-ref-link "ref link")
  ;;    ("l" org-ref-helm-insert-label-link "label link"))
  ;;   "Browse"
  ;;   (("b" helm-bibtex "bibtex")
  ;;    ("s" crossref-lookup "lookup"))
  ;;   "Add"
  ;;   (("a" crossref-add-bibtex-entry "new entry")
  ;;    ("d" doi-add-bibtex-entry "doi"))))
  :custom
  (bibtex-dialect 'biblatex)
  (org-ref-bibliography-notes "~/Dropbox/Bibliography/Notes.org")
  (org-ref-default-bibliography '("~/Dropbox/Bibliography/references.bib"))
  (org-ref-pdf-directory "~/Dropbox/Bibliography/bibtex-pdfs/")
  (org-ref-show-broken-links nil)
  (org-ref-default-ref-type "eqref")
  (org-ref-default-citation-link "citet")
  :config
  (require 'org-ref-citeproc)
  ;; (defun org-ref-grep-pdf (&optional _candidate)
  ;;   "Search pdf files of marked CANDIDATEs."
  ;;   (interactive)
  ;;   (let ((keys (helm-marked-candidates))
  ;;         (get-pdf-function org-ref-get-pdf-filename-function))
  ;;     (helm-do-pdfgrep-1
  ;;      (-remove (lambda (pdf)
  ;;                 (string= pdf ""))
  ;;               (mapcar (lambda (key)
  ;;                         (funcall get-pdf-function key))
  ;;                       keys))))
  ;;   )

  ;; (helm-add-action-to-source "Grep PDF" 'org-ref-grep-pdf helm-source-bibtex 1)

  ;; (setq helm-bibtex-map
  ;;       (let ((map (make-sparse-keymap)))
  ;;         (set-keymap-parent map helm-map)
  ;;         (define-key map (kbd "C-s") (lambda () (interactive)
  ;;                                       (helm-run-after-exit 'org-ref-grep-pdf)))
  ;;         map))
  ;; (push `(keymap . ,helm-bibtex-map) helm-source-bibtex)
  )
#+end_src

** calibredb

Calibre sucks !

#+begin_src emacs-lisp :tangle no
(use-package calibredb
  :ensure nil
  :defer t
  ;; :bind
  ;; (
  ;;  :map calibredb-show-mode-map
  ;;  ()
  ;;  :map calibredb-search-mode-map
  ;;  ()
  ;;  )
  :config
  ;; (setq sql-sqlite-program
  ;;       "/usr/bin/sqlite3")
  ;; (setq calibredb-program
  ;;       "/Applications/calibre.app/Contents/MacOS/calibredb")
  (setq calibredb-root-dir "~/Documents/Calibre")
  (setq calibredb-db-dir
        (expand-file-name "metadata.db" calibredb-root-dir))
  (setq calibredb-library-alist
        '(
          ("~/Documents/Calibre")
          ("~/Downloads/apps")
          ("~/Downloads/docs")
          ("~/Downloads/image")
          ("~/Downloads/audio")
          ("~/Downloads/video")
          ))
  (setq calibredb-virtual-library-alist
        '(
          ("1. Reading" . "Read \\(pdf\\|epub\\)")
          ;; ("2. Read it later" . "Readit epub")
          ;; ("3. Development - rust" . "rust")
          ))
  (setq calibredb-format-all-the-icons t)
  (setq calibredb-format-icons-in-terminal t)
  ;; (setq calibredb-format-character-icons t)
  (setq calibredb-fetch-metadata-source-list
        '("Amazon.com" "Douban Books" "Google"))
  ;; (setq calibredb-id-width 4)
  (setq calibredb-size-show t)
  )
#+end_src

* 版本管理: git: Magit
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       8262274A-F276-4FFE-8534-4DE23ED1F17D
:END:

[[https://emacs-china.org/t/magit-add-commit-push/22457][magit一键add, commit, push - Emacs China]]

#+begin_src emacs-lisp
;; difftastic + magit
;; {{{
;; (with-eval-after-load 'magit
(use-package magit
  ;; :defer 1
  :bind
  (
   ("C-x g"   . magit-status)
   ("C-c v g" . magit-status)
   ("H-m H-m" . magit-status)
   :map magit-status-mode-map
   ("#" . my/magit-aux-commands)
   )
  :custom
  (magit-diff-refine-hunk t)
  (magit-module-sections-nested nil)
  :config
  (defun my/magit--with-difftastic (buffer command)
    "Run COMMAND with GIT_EXTERNAL_DIFF=difft then show result in BUFFER."
    (let ((process-environment
           (cons (concat "GIT_EXTERNAL_DIFF=difft --width="
                         (number-to-string (frame-width)))
                 process-environment)))
      ;; Clear the result buffer (we might regenerate a diff, e.g., for
      ;; the current changes in our working directory).
      (with-current-buffer buffer
        (setq buffer-read-only nil)
        (erase-buffer))
      ;; Now spawn a process calling the git COMMAND.
      (make-process
       :name (buffer-name buffer)
       :buffer buffer
       :command command
       ;; Don't query for running processes when emacs is quit.
       :noquery t
       ;; Show the result buffer once the process has finished.
       :sentinel (lambda (proc event)
                   (when (eq (process-status proc) 'exit)
                     (with-current-buffer (process-buffer proc)
                       (goto-char (point-min))
                       (ansi-color-apply-on-region (point-min) (point-max))
                       (setq buffer-read-only t)
                       (view-mode)
                       (end-of-line)
                       ;; difftastic diffs are usually 2-column side-by-side,
                       ;; so ensure our window is wide enough.
                       (let ((width (current-column)))
                         (while (zerop (forward-line 1))
                           (end-of-line)
                           (setq width (max (current-column) width)))
                         ;; Add column size of fringes
                         (setq width (+ width
                                        (fringe-columns 'left)
                                        (fringe-columns 'right)))
                         (goto-char (point-min))
                         (pop-to-buffer
                          (current-buffer)
                          `(;; If the buffer is that wide that splitting the frame in
                            ;; two side-by-side windows would result in less than
                            ;; 80 columns left, ensure it's shown at the bottom.
                            ,(when (> 80 (- (frame-width) width))
                               #'display-buffer-at-bottom)
                            (window-width
                             . ,(min width (frame-width))))))))))))

  (defun my/magit-show-with-difftastic (rev)
    "Show the result of \"git show REV\" with GIT_EXTERNAL_DIFF=difft."
    (interactive
     (list (or
            ;; If REV is given, just use it.
            (when (boundp 'rev) rev)
            ;; If not invoked with prefix arg, try to guess the REV from
            ;; point's position.
            (and (not current-prefix-arg)
                 (or (magit-thing-at-point 'git-revision t)
                     (magit-branch-or-commit-at-point)))
            ;; Otherwise, query the user.
            (magit-read-branch-or-commit "Revision"))))
    (if (not rev)
        (error "No revision specified")
      (my/magit--with-difftastic
       (get-buffer-create (concat "*git show difftastic " rev "*"))
       (list "git" "--no-pager" "show" "--ext-diff" rev))))

  (defun my/magit-diff-with-difftastic (arg)
    "Show the result of \"git diff ARG\" with GIT_EXTERNAL_DIFF=difft."
    (interactive
     (list (or
            ;; If RANGE is given, just use it.
            (when (boundp 'range) range)
            ;; If prefix arg is given, query the user.
            (and current-prefix-arg
                 (magit-diff-read-range-or-commit "Range"))
            ;; Otherwise, auto-guess based on position of point, e.g., based on
            ;; if we are in the Staged or Unstaged section.
            (pcase (magit-diff--dwim)
              ('unmerged (error "unmerged is not yet implemented"))
              ('unstaged nil)
              ('staged "--cached")
              (`(stash . ,value) (error "stash is not yet implemented"))
              (`(commit . ,value) (format "%s^..%s" value value))
              ((and range (pred stringp)) range)
              (_ (magit-diff-read-range-or-commit "Range/Commit"))))))
    (let ((name (concat "*git diff difftastic"
                        (if arg (concat " " arg) "")
                        "*")))
      (my/magit--with-difftastic
       (get-buffer-create name)
       `("git" "--no-pager" "diff" "--ext-diff" ,@(when arg (list arg))))))

  (transient-define-prefix my/magit-aux-commands ()
    "My personal auxiliary magit commands."
    ["Auxiliary commands"
     ("d" "Difftastic Diff (dwim)" my/magit-diff-with-difftastic)
     ("s" "Difftastic Show" my/magit-show-with-difftastic)])

  (transient-append-suffix 'magit-dispatch "!"
    '("#" "My Magit Cmds" my/magit-aux-commands))
  )
;; }}}

;; ;; delta + magit + magit-delta
;; ;; {{{
;; ;; https://scripter.co/using-git-delta-with-magit/
;; (use-package magit-delta
;;  :hook (magit-mode . magit-delta-mode)
;;   )
;; (add-hook 'magit-mode-hook (lambda () (magit-delta-mode +1)))
;; ;; }}}
#+end_src

git-auto-commit

[[https://emacs-china.org/t/magit-blame-git-commit/7025][用 magit-blame 反向追踪 git commit - Emacs China]]

* 文件对比/文本对比 Diff
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       A3638E98-F0B9-4304-AE07-B0DFEC70922B
:END:
** 文件对比 diff-lisp                                                  :Git:

#+begin_src emacs-lisp
(use-package diff-lisp
  :ensure nil
  :bind
  ("s-/" . diff-lisp-set-a-and-b)
  :config
  (defvar diff-lisp-set-a-and-b nil)
  (defun diff-lisp-set-a-and-b ()
    (interactive)
    (if (eq diff-lisp-set-a-and-b nil)
        (progn
          (diff-lisp-mark-selected-text-as-a)
          (setq diff-lisp-set-a-and-b t)
          )
      (progn
        (diff-lisp-diff-a-and-b)
        (setq diff-lisp-set-a-and-b nil)
        ))
    )
  )
#+end_src

* undo
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       88545EEC-9A57-40CD-AB8B-1623729B63F4
:END:

** vundo

#+begin_src emacs-lisp
(use-package vundo
 :ensure nil
 :bind
 (
  ("H-z" . vundo)
  :map vundo-mode-map
  ;;
  ("j" . vundo-forward) ; f
  ("k" . vundo-backward) ; b
  ;; ("j" . vundo-next)     ; n
  ;; ("k" . vundo-previous) ; p
  ("ESC" . vundo-quit) ("SPC" . vundo-confirm)
  ;; ("a"   . vundo-stem-root)
  ;; ("d"   . vundo--debug)
  ;; ("e"   . vundo-stem-end)
  ;; ("i"   . vundo--inspect)
  ;; ("q"   . vundo-quit)
  ))
#+end_src

* 书签 Bookmark 
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       32BD08DE-090F-4FC9-93DC-10A36723EA5E
:END:

binky-mode

#+begin_src emacs-lisp
;; binky-mode
;; {{{

;; }}}
#+end_src

* 剪贴板 kill-ring/clipboard
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       D92B0D57-EB04-43B7-86F9-50339674562E
:END:

#+begin_src emacs-lisp :tangle no
(use-package browse-kill-ring
  :ensure nil
  :bind
  ;; ("C-c H-k" . browse-kill-ring)
  :load-path  (lambda ()
                (expand-file-name
                 (concat
                  my-user-emacs-directory
                  "contrib/")
                 )
                )
  ;; :load-path (concat my-user-emacs-directory "contrib/")
  :config
  (browse-kill-ring-default-keybindings); map M-y to browse-kill-ring
  )
#+end_src

* UI
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       181557E2-40BD-4061-A865-94312CFF85AE
:END:

** posframe

#+begin_src emacs-lisp
(use-package posframe
  :ensure nil
  :defer 1
  ;; posframe-poshandler-window-top-center
  )
#+end_src

** header

#+begin_src emacs-lisp
;; sticky header: topsy
;; {{{
(use-package topsy
  :ensure nil
  :hook (prog-mode . topsy-mode) ;; (add-hook 'prog-mode-hook #'topsy-mode)
  )

;; https://github.com/alphapapa/org-sticky-header/issues/14
(use-package org-sticky-header
  :ensure nil
  :hook (org-mode . org-sticky-header-mode)
  :config
  (setq org-sticky-header-full-path 'full)
  )
;; }}}
#+end_src

** 版本控制

#+begin_src emacs-lisp
;; diff-hl
;; {{{
(use-package diff-hl
  :ensure nil
  :hook (
         (after-init . global-diff-hl-mode)
         (dired-mode         . diff-hl-dired-mode-unless-remote)
         (magit-pre-refresh  . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh)
         )
  :bind
  (
   :map diff-hl-mode-map
   ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk)
   )
  :config
  (unless (display-graphic-p)
    (diff-hl-margin-mode))
  )

;; (global-git-gutter-mode +1) ; BUG/Bad performance when deleting folded 17000+lines
;; }}}
#+end_src

** region: goggles

Emacs 29: copy-region-blink-predicate

#+begin_src emacs-lisp
;; goggles: visual hint for operations
;; {{{
(use-package goggles
  :ensure nil
  :hook ((prog-mode text-mode) . goggles-mode)
  :config
  (setq goggles-pulse-delay 0.35)
  (setq-default goggles-pulse t) ;; set to nil to disable pulsing
  )
;; }}}
#+end_src

** structure: highlight-sexps

[[https://david.rysdam.org/src/emacs/highlight-sexps.el][highlight-sexps.el]]

** 分隔符: rainbow-delimiters

#+begin_src emacs-lisp :tangle no
(use-package rainbow-delimiters
  :ensure nil
  :hook (prog-mode . rainbow-delimiters-mode)
  )
#+end_src

** 括号: highlight-parentheses

#+begin_src emacs-lisp
;; highlight-parentheses
;; {{{
(use-package highlight-parentheses
  :defer 1
  ;; :hook (after-init . highlight-parentheses-mode)
  :config
  (setq  highlight-parentheses-colors ; 括号颜色（由内向外）
         '(
           "green1"
           "blue1"
           "orange1"
           "purple1"
           "yellow1"
           "red1"
           ;; "pink" ; only six colors supported ?
           ))
  (global-highlight-parentheses-mode t)
  )

;; Apple Six Colors
;; (setq highlight-parentheses-colors
;; '(
;;   "#61BB46"
;;   "#FDB827"
;;   "#F5821F"
;;   "#E03A3E"
;;   "#963D97"
;;   "#009DDC"
;;   ))
;; }}}
#+end_src

** doom-modeline

#+begin_src emacs-lisp
;; doom-modeline
;; {{{
;; (add-hook 'after-init-hook #'doom-modeline-mode)
;; (setq doom-modeline-support-imenu t)
(use-package doom-modeline
  :ensure nil
  ;; :init (doom-modeline-mode 1)
  :hook (after-init . doom-modeline-mode)
  :custom
  ;; Don't compact font caches during GC. Windows Laggy Issue
  (inhibit-compacting-font-caches t)
  :config
  ;; Buffer File Project
  (setq doom-modeline-buffer-file-name-style 'relative-to-project)
  (setq doom-modeline-highlight-modified-buffer-name t)
  (setq doom-modeline-project-detection 'auto) ;auto/project
  ;; Mode
  (setq doom-modeline-major-mode-color-icon (display-graphic-p))
  (setq doom-modeline-minor-modes nil)
  ;; UI
  (setq doom-modeline-height 18)
  (setq doom-modeline-icon (display-graphic-p))
  (setq doom-modeline-window-width-limit 85)
  )
;; }}}
#+end_src

** 主题 theme

#+begin_src emacs-lisp :tangle no
(use-package timu-macos-theme
  :ensure nil
  :defer 3
  :custom
  (
   ;; (timu-macos-flavour "light")
   (timu-macos-mode-line-border t))
  :config (load-theme 'timu-macos t))
#+end_src

** ICON 图标

** all-the-icons

#+begin_src emacs-lisp
;; all-the-icons
;; {{{
(use-package all-the-icons
  :ensure nil
  ;; :when (display-graphic-p)
  :if (display-graphic-p)
  )

(use-package all-the-icons-completion
  :ensure nil
  :if (display-graphic-p)
  :hook
  (
   (after-init . all-the-icons-completion-mode)
   (marginalia-mode . all-the-icons-completion-marginalia-setup)
   )
  )

(use-package all-the-icons-dired
  :ensure nil
  :when (display-graphic-p)
  :hook
  (dired-mode . all-the-icons-dired-mode)
  )
;; }}}
#+end_src

** rainbow-delimiters

#+begin_src emacs-lisp :tangle no

#+end_src

** rainbow-blocks

#+begin_src emacs-lisp :tangle no

#+end_src

* 折叠
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       F9BC2CD6-E690-47C1-AED9-71A98B5C79A3
:END:

** ts-fold :Git:

#+begin_src emacs-lisp
;; ts-fold
;; {{{
;; (use-package ts-fold
;;   :ensure nil
;;   )
;; (add-hook 'tree-sitter-after-on-hook #'ts-fold-indicators-mode)
;; }}}
#+end_src

** ts-fold
** origami

#+begin_src emacs-lisp
;; fold: origami
;; {{{
(add-hook 'prog-mode-hook 'origami-mode)
(with-eval-after-load 'origami
  (define-key origami-mode-map (kbd "C-c f") 'origami-recursively-toggle-node)
  (define-key origami-mode-map (kbd "C-c F") 'origami-toggle-all-nodes)
  )
;; }}}
#+end_src

** hideshow-orgmode

https://github.com/logangrado/hideshow-orgmode

* frame 管理
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       79C8DC5B-DA42-4A27-8615-9A382380B698
:END:

** moom

#+begin_src emacs-lisp :tangle no
(with-suppressed-warnings '(void-function transient-prefix)) ;FIXME
(add-to-list 'warning-suppress-types '((void-function transient-prefix)))
  (with-eval-after-load "moom"
    (setq moom-use-font-module nil)
    ;; (moom-recommended-keybindings '(all wof))
    (moom-recommended-keybindings '(move fit expand fill font reset undo))
    (when (require 'moom-transient nil t)
      (moom-transient-hide-cursor) ;; if needed
      (define-key moom-mode-map (kbd "C-c o") #'moom-transient-dispatch)
      )
    )
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package moom
    :ensure nil
    :if (display-graphic-p)
    :after transient
    ;; :bind
    ;; (
    ;;  :map moom-mode-map
    ;;       ("H-o H-o" . moom-transient-dispatch)
    ;;       )
    :config
    (setq moom-use-font-module nil)
    (moom-mode 1)
    ;; (moom-transient-hide-cursor)
    (moom-recommended-keybindings '(move fit expand fill font reset undo))
    )
#+end_src

#+begin_src emacs-lisp :tangle no
;; moom + transient
;; {{{
(with-suppressed-warnings '(void-function transient-prefix)) ;FIXME
(add-to-list 'warning-suppress-types '((void-function transient-prefix)))
(use-package moom
  ;; :after transcient
  :ensure nil
  ;; :defer 1
  ;; :if (memq window-system '(mac ns x))
  ;; (keymap-global-set "" #'moom-font-increase)
  :commands (moom-transient-dispatch moom-transient-config)
  :config
  (require 'moom-transient)
  (setq moom-use-font-module nil)
  (moom-mode 1)
  (moom-transient-hide-cursor) ;; if needed
  ;; (define-key moom-mode-map (kbd "C-c o") #'moom-transient-dispatch)
  (moom-recommended-keybindings '(move fit expand fill font reset undo))
  )

;; (unless (and (display-graphic-p) (eq system-type 'darwin))
;;   (add-hook 'after-init-hook 'moom-mode)
;;   )
;; }}}
#+end_src

* window 管理
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       F78BB24E-0E25-4C5A-A754-23AD22847736
:END:

** zoom

** ace-window

#+begin_src emacs-lisp
;; {{{ ace-window
;; (require 'ace-window)
;; (keymap-global-set "H-w H-w" #'ace-window)
(use-package ace-window
  :ensure nil
  :bind
  ("H-w H-w" . ace-window)
  :config
  (setq aw-keys '(?e ?a ?s ?d ?f ?g ?h ?j ?k ?l ?v ?n))
  )
;; }}}
#+end_src

* Org family
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       CE9D175A-8FE9-4C90-A87C-62B3BB2C0748
:END:

** org-download

#+begin_src emacs-lisp :tangle no
(setq  org-download-screenshot-method "screencapture -i %s")
#+end_src

** org-modern

#+begin_src emacs-lisp
(use-package org-modern
  :hook (org-mode . org-modern-mode)
  :config
  (setq
   org-auto-align-tags nil
   org-tags-column 0
   org-catch-invisible-edits 'show-and-error
   org-special-ctrl-a/e t
   org-insert-heading-respect-content t

   ;; Org styling, hide markup etc.
   org-hide-emphasis-markers t
   org-pretty-entities t
   org-ellipsis "…"

   ;; Agenda styling
   org-agenda-tags-column 0
   org-agenda-block-separator ?─
   org-agenda-time-grid
   '((daily today require-timed)
     (800 1000 1200 1400 1600 1800 2000)
     " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string
   "⭠ now ─────────────────────────────────────────────────")

  (if (display-graphic-p)
      (setq org-modern-table t)
    (setq org-modern-table nil)
    )
  )
#+end_src

** org-crypt

#+begin_src emacs-lisp :tangle no
(when (my-eval-if-binary-or-warn "gpg")
  (require 'org-crypt)
#+end_src

** org-import-calendar

** org-ref

** org-mind-map

[[https://github.com/the-ted/org-mind-map][the-ted/org-mind-map]]: This is an emacs package that creates graphviz directed graphs.

** org-auto-tangle :Git:

~~谁在自动导出时给文件开始位置添加了一个 feff 字符？~~

#+begin_src emacs-lisp
;; org-auto-tangle
;; {{{
(use-package org-auto-tangle
  :ensure nil
  :hook (org-mode . org-auto-tangle-mode)
  )
;; }}}
#+end_src

* org-roam
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       850BDBA1-B6FD-4149-8741-D9AC0F74F8BD
:END:

** basic config

#+begin_src emacs-lisp
;; org-roam: basic config
;; {{{
(use-package org-roam
  ;; :after (org)
  :defer 2
  :init
  (setq org-roam-directory "~/org-roam")
  (setq org-roam-db-location "~/org-roam/org-roam.db")
  :bind
  (
   :map org-mode-map
   ("C-c n a" . org-roam-alias-add)
   ("C-c n A" . org-roam-alias-remove)
   ("C-c n c" . org-roam-capture)
   ("C-c n f" . org-roam-node-find)
   ("C-c n g" . org-roam-graph)
   ("C-c n h" . org-fold-hide-entry)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n j" . org-roam-dailies-capture-today) ;; Dailies
   ("C-c n l" . org-roam-buffer-toggle)
   ("C-c n o" . org-id-get-create)
   ("C-c n r" . org-roam-node-random)
   ("C-c n s" . org-roam-db-sync)
   ("C-c n t" . org-roam-tag-add)
   ("C-c n T" . org-roam-tag-remove)
   )
  :config
  (setq org-roam-db-gc-threshold most-positive-fixnum)
  (setq org-roam-mode-sections
        '((org-roam-backlinks-section :unique t)
          org-roam-reflinks-section
          org-roam-unlinked-references-section))
  ;; (setq org-roam-completion-everywhere t)
  (setq org-roam-file-extensions '("org" "md")) ;; enable Org-roam for markdown
  ;; (setq org-roam-node-display-template "${title:50} ${tags:30}")
  (setq org-roam-node-display-template
        (concat "${title:*} "
                (propertize "${tags:10}" 'face 'org-tag)))

  (require 'org-roam-protocol)  ;; org-roam-protocol

  (org-roam-db-autosync-mode)
  ;; (org-roam-db-autosync-mode 1) ;; if md-roam installed, move to md-roam config

  (add-to-list 'display-buffer-alist
               '("\\*org-roam\\*"
                 (display-buffer-in-direction)
                 (direction . right)
                 (window-width . 0.33)
                 (window-height . fit-window-to-buffer)))
  )
;; }}}
#+end_src

** directory

#+begin_src emacs-lisp :tangle no
;; org-roam: directory
;; {{{
;; }}}
#+end_src

** node

#+begin_src emacs-lisp :tangle no
(defun org-roam-protocol-open-node (info)
  "This handler simply opens the file with emacsclient.
INFO is a plist containing additional information passed by the protocol URL.
It should contain the FILE key, pointing to the path of the file to open.
  Example protocol string:
org-protocol://roam-node?node=uuid"
  (when-let ((node (plist-get info :node)))
    (raise-frame)
    (org-roam-node-visit (org-roam-populate
                          (org-roam-node-create :id node))
                         nil
                         'force)
    )
  nil)

(push '("org-roam-node"
        :protocol "roam-node"
        :function org-roam-protocol-open-node)
      org-protocol-protocol-alist)
#+end_src

#+begin_src emacs-lisp :tangle no
;; org-roam: node directory                                                       ; FIXME
;; {{{
;; (with-eval-after-load 'org-roam
;;   (cl-defmethod org-roam-node-directories ((node org-roam-node))
;;     (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
;;         (format "(%s)" (car (split-string dirs "/")))
;;       ""))
;;   (setq org-roam-node-display-template
;;         "${title:30} ${tags:30} ${directories:15}")
;;   )
;; }}}

;; org-roam: backlink count & node hierarchy
;; {{{
;; ;; https://github.com/Jousimies/.emacs.d/blob/master/lisp/init-roam.el
;; (require 'org)
;; (require 'org-roam)
;; ;;
;; (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
;;   (let* ((count (caar (org-roam-db-query
;;                        [:select (funcall count source)
;;                                 :from links
;;                                 :where (= dest $s1)
;;                                 :and (= type "id")]
;;                        (org-roam-node-id node)))))
;;     (format "[%d]" count)))
;; ;;
;; ;;   (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
;; ;;     "Return the file TITLE for the node."
;; ;;     (if-let ((file (org-roam-node-file node)))
;; ;;         (with-temp-buffer
;; ;;           (insert-file-contents file nil 0 1024)
;; ;;           (cadr (assoc "TITLE"
;; ;;                        (org-collect-keywords (list "TITLE")))))
;; ;;       (cadr (assoc "TITLE"
;; ;;                    (org-collect-keywords (list "TITLE"))))))

;; ;; (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
;; ;;   "Return the hierarchy for the node."
;; ;;   (let ((title (org-roam-node-title node))
;; ;;         (olp (org-roam-node-olp node))
;; ;;         (level (org-roam-node-level node))
;; ;;         (filetitle (org-roam-node-filetitle node)))
;; ;;     (concat
;; ;;      (if (> level 0) (concat filetitle " > "))
;; ;;      (if (> level 1) (concat (string-join olp " > ") " > "))
;; ;;      title))
;; ;;   )
;; ;;
;; (setq org-roam-node-display-template
;;       "${title:30} ${backlinkscount:5} ${tags:30} ${directories:15}")
;; }}}
#+end_src

** completion

#+begin_src emacs-lisp :tangle no
;; org-roam: completion
;; {{{
;;roam links support auto-completion via completion-at-point
;; call M-x completion-at-point within a roam link.
;; Where the | character represents the cursor:
;; [[|]] : completes for a file title
;; [[roam:]] : completes for a file title
;; [[*|]] : completes for a headline within this file
;; [[foo*|]] : completes a headline within the file with title “foo”
;; [[roam:foo*|]] completes a headline within the file with title “foo”
;; }}}
#+end_src

** slug

#+begin_src emacs-lisp :tangle no
;; org-roam: slug (called by org-roam-capture-templates)
;; {{{
;; (cl-defmethod org-roam-node-slug ((node org-roam-node))
;;   "Return the slug of NODE."
;;   (let ((title (org-roam-node-title node))
;;         (slug-trim-chars '(;; Combining Diacritical Marks https://www.unicode.org/charts/PDF/U0300.pdf
;;                            768 ; U+0300 COMBINING GRAVE ACCENT
;;                            769 ; U+0301 COMBINING ACUTE ACCENT
;;                            770 ; U+0302 COMBINING CIRCUMFLEX ACCENT
;;                            771 ; U+0303 COMBINING TILDE
;;                            772 ; U+0304 COMBINING MACRON
;;                            774 ; U+0306 COMBINING BREVE
;;                            775 ; U+0307 COMBINING DOT ABOVE
;;                            776 ; U+0308 COMBINING DIAERESIS
;;                            777 ; U+0309 COMBINING HOOK ABOVE
;;                            778 ; U+030A COMBINING RING ABOVE
;;                            780 ; U+030C COMBINING CARON
;;                            795 ; U+031B COMBINING HORN
;;                            803 ; U+0323 COMBINING DOT BELOW
;;                            804 ; U+0324 COMBINING DIAERESIS BELOW
;;                            805 ; U+0325 COMBINING RING BELOW
;;                            807 ; U+0327 COMBINING CEDILLA
;;                            813 ; U+032D COMBINING CIRCUMFLEX ACCENT BELOW
;;                            814 ; U+032E COMBINING BREVE BELOW
;;                            816 ; U+0330 COMBINING TILDE BELOW
;;                            817 ; U+0331 COMBINING MACRON BELOW
;;                            )))
;;     (cl-flet* ((nonspacing-mark-p (char)
;;                                   (memq char slug-trim-chars))
;;                (strip-nonspacing-marks (s)
;;                                        (ucs-normalize-NFC-string
;;                                         (apply #'string (seq-remove #'nonspacing-mark-p
;;                                                                     (ucs-normalize-NFD-string s)))))
;;                (cl-replace (title pair)
;;                            (replace-regexp-in-string (car pair) (cdr pair) title)))
;;       (let* ((pairs `(("[^[:alnum:][:digit:]]" . "-") ;; convert anything not alphanumeric
;;                       ("--*" . "-")                   ;; remove sequential underscores
;;                       ("^-" . "")                     ;; remove starting underscore
;;                       ("-$" . "")))                   ;; remove ending underscore
;;              (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
;;         (downcase slug)))))
;; }}}
#+end_src

** tag

#+begin_src emacs-lisp
;; org-roam: filter tags
;; {{{
(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node)))
  )

(defun my/org-roam-list-notes-by-tag (tag-name)
  (interactive)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list)))
  )
;; }}}

;; org-roam: search tag
;; {{{
;; https://emacs-china.org/t/orgmode-tag/21429/15
(defun my/org-roam-node-find-by-tag ()
  (interactive)
  (let ((chosen-tag
         (completing-read "filter by tag: "
                          (seq-uniq
                           (org-roam-db-query
                            [:select [tag]
                                     :from tags ])))))
    (org-roam-node-find
     nil
     nil
     (lambda (node) (member chosen-tag (org-roam-node-tags node))))))
;; }}}
#+end_src

** template

#+begin_src emacs-lisp
;; org-roam: template,  id (uuid) timestamps and so on
;; {{{
(setq org-roam-capture-templates
      '(
        ;; #+date: %<%Y-%m-%d-%H:%M:%S %Z>\n
        ;; #+date: %<%FT%T%z>\n
        ;; a: audio & music
        ;; A
        ;; B
        ("b" "图书" plain "%?"
         :target (file+head "图书/${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed  t)
        ("c" "角色" plain "%?"
         :target (file+head "topics/角色/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; C
        ("d" "default" plain "%?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :empty-lines 1
         :immediate-finish t
         :unnarrowed  t)
        ;; D
        ("e" "Emacs" plain "%?"
         :target (file+head "Emacs/${slug}.org"
                            "#+title: ${title}\n#+category:\n")
         :immediate-finish t
         :unnarrowed  t)
        ;; E
        ;; f:
        ("f" "Emacs 命令与函数/Command & Function" plain "%?"
         :target (file+head "Emacs/function/${title}.org"
                            "#+title: ${title}\n#+category:\n")
         :immediate-finish t
         :unnarrowed  t)
        ;; F
        ;; g:
        ("G" "游戏" plain "%?"
         :target (file+head "游戏/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("h" "人物" plain "%?"
         :target (file+head "topics/人物/${slug}.org"
                            "#+title: ${title}\n* ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; H
        ;; i:
        ;; I
        ;; j:
        ;; J
        ("k" "Emacs 快捷键/keymap" plain "%?"
         :target (file+head "Emacs/keymap/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; K
        ;; l:
        ;; L
        ("m" "音乐" plain "%?"
         :target (file+head "音乐/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("M" "电影" plain "%?"
         :target (file+head "电影/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; n:
        ;; N
        ;; o:
        ;; O
        ("p" "project" plain "%?"
         :target (file+head "${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed t)
        ("P" "Emacs 包/插件" plain "%?"
         :target (file+head "Emacs/package/${title}.org"
                            "#+title: ${title}\n#+filetags: :Emacs:\n")
         :immediate-finish t
         :unnarrowed t)
        ;; q:
        ;; Q
        ("r" "reference" plain "%?"
         :target (file+head "reference/${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed t)
        ("R" "纪录片" plain "%?"
         :target (file+head "纪录片/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; s:
        ("s" "软件" plain "%?"
         :target (file+head "software/${slug}.org"
                            "#+title: ${title}\n#+date: %<%FT%T%z>\n")
         :immediate-finish t
         :unnarrowed t)
        ;; S
        ;; t: topic todo
        ("t" "主题" plain "%?"
         :target (file+head "topics/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ("T" "电视剧" plain "%?"
         :target (file+head "电视剧/${slug}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; u:
        ;; U
        ("v" "Emacs 变量" plain "%?"
         :target (file+head "Emacs/variable/${title}.org"
                            "#+title: ${title}\n")
         :immediate-finish t
         :unnarrowed t)
        ;; V:
        ;; w:
        ;; W
        ;; x:
        ;; X
        ;; y:
        ;; Y
        ;; z:
        ;; Z
        ))
;; }}}
#+end_src

** UI & ORUI

#+begin_src emacs-lisp
;; org-roam-ui
;; {{{
(use-package org-roam-ui
  :after (org-roam)
  ;; normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;; a hookable mode anymore, you're advised to pick something yourself
  ;; if you don't care about startup time, use
  ;; :hook (after-init . org-roam-ui-mode)
  :bind (
         ("C-c n u" . org-roam-ui-open)
         ("C-c n z" . org-roam-ui-node-zoom)
         )
  :config
  (setq org-roam-ui-sync-theme t
        org-roam-ui-follow t
        org-roam-ui-update-on-save t
        org-roam-ui-open-on-start t)
  )
;; }}}
#+end_src

#+begin_src emacs-lisp :tangle no
;; org-roam: UI
;; {{{
;; (custom-set-faces
;;   '((org-roam-link org-roam-link-current)
;;     :foreground "#e24888" :underline t))
;;
;; (defface my-org-id-link '((t :inherit org-link :slant italic))
;;   "Face for org-id links."
;;   :group 'org-faces)
;; }}}
#+end_src

** database

#+begin_src emacs-lisp
;; little hack
;; {{{
;; brew install --cask db-browser-for-sqlite
(defun my/org-roam-view-db ()
  (interactive)
  (cond
   ((eq system-type 'darwin)
    (shell-command
     ;; net.sourceforge.sqlitebrowser
     (format
      "open -b \"net.sourceforge.sqlitebrowser\" --args --table nodes %s"
      org-roam-db-location)))
   (t
    (message "my/org-roam-view-db not yet working on this system-type"))))
;; }}}
#+end_src

** consult-org-roam

#+begin_src emacs-lisp
;; consult-org-roam
;; {{{
(use-package consult-org-roam
  :ensure nil
  :after (org consult)
  :bind
  ;; Define some convenient keybindings as an addition
  ("C-c n b" . consult-org-roam-backlinks)
  ("C-c n l" . consult-org-roam-forward-links)
  ("C-c n s" . consult-org-roam-search)
  ("C-c n F" . consult-org-roam-file-find)
  :custom
  ;; Use `ripgrep' for searching with `consult-org-roam-search'
  (consult-org-roam-grep-func #'consult-ripgrep)
  ;; Configure a custom narrow key for `consult-buffer'
  (consult-org-roam-buffer-narrow-key ?r)
  ;; Display org-roam buffers right after non-org-roam buffers
  ;; in consult-buffer (and not down at the bottom)
  (consult-org-roam-buffer-after-buffers t)
  :config
  ;; Eventually suppress previewing for certain functions
  (consult-customize
   consult-org-roam-forward-links
   :preview-key (kbd "M-.")
   )
  )
;; }}}
#+end_src

** org-similarity

#+begin_src emacs-lisp
;; org-similarity
;; {{{
(use-package org-similarity
  :ensure nil
  :after (org)
  :defer t
  :config
  (with-suppressed-warnings
      (defvaralias
        'org-similarity-directory
        'org-roam-directory)
    )
  (setq org-similarity-language "english")
  (setq org-similarity-number-of-documents 15)
  (setq org-similarity-show-scores t)
  (setq org-similarity-use-id-links t)
  (setq org-similarity-recursive-search t)
  )
;; }}}
#+end_src

** md-roam

#+begin_src emacs-lisp
;; md-roam
;; {{{
;; https://emacs.stackexchange.com/questions/5465/how-to-migrate-markdown-files-to-emacs-org-mode-format
;; (require 'org-roam)
;; M-x package-vc-install RET https://github.com/nobiot/md-roam.git RET
;; (require 'md-roam)
;; (md-roam-mode 1)           ; md-roam-mode must be active before org-roam-db-sync
;; (setq md-roam-file-extension "md") ; default "md". Specify an extension such as "markdown"
;; (org-roam-db-autosync-mode 1) ; autosync-mode triggers db-sync. md-roam-mode must be already active
;; }}}
#+end_src

* markdown
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       E004F903-F047-4309-8C54-3F11FB064EB6
:END:

#+begin_src emacs-lisp
;; markdown-mode
;; {{{
(use-package markdown-mode
  :ensure nil
  :defer t
  :commands
  (markdown-mode gfm-mode)
  :mode
  (
   ("README\\.md\\'" . gfm-mode)
   ("\\.md\\'" . gfm-mode)
   ("\\.markdown\\'" . markdown-mode)
   )
  :init
  (setq markdown-command "pandoc")
  :config
  (setq visual-line-column 90)
  (setq markdown-fontify-code-blocks-natively t)
  (setq markdown-enable-wiki-links t) ;; wikilink/backlink
  (setq markdown-wiki-link-search-type "project")
  (setq markdown-enable-math t)
  )
;; }}}
#+end_src

* ekg
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       6E4531B5-DF05-4BA9-BA7F-54CD0F016EBE
:END:

https://github.com/ahyatt/ekg

[[https://sspai.com/post/77394][Tana：2022 最惊艳的笔记软件 - 少数派]]

#+begin_src emacs-lisp

#+end_src

* 邮件/邮箱
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       D838ABFA-10F1-4E87-AA04-0592B1AC77BE
:END:

** notmuch

* 网页浏览、信息订阅
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       D46579B0-56E1-4F3F-88BF-DCED1B6A9AC9
:END:

** goggle-this

[[https://github.com/Malabarba/emacs-google-this][Malabarba/emacs-google-this: A set of emacs functions and bindings to google under point.]]

** 必应词典: bing-dict

#+begin_src emacs-lisp
(use-package
  bing-dict
  :ensure nil
  :bind ("C-c d b" . bing-dict-brief)
  :config (setq bing-dict-vocabulary-save t)
  (setq bing-dict-vocabulary-file
        (expand-file-name "assets/vocabulary.org" (concat user-emacs-directory)))
  (setq bing-dict-pronunciation-style 'us) ; us uk
  (setq bing-dict-show-thesaurus 'both) ; synonym and antonym

  (defun my/open-vocabulary-file () ;; Emacs init
    (interactive)
    (find-file-other-window bing-dict-vocabulary-file))
  )
#+end_src

** elfeed

#+begin_src emacs-lisp
;; elfeed
;; {{{
;; reference: https://github.com/jiacai2050/jiacai2050.github.io/blob/hugo/playground/mu4e-elfeed-config.el
(use-package elfeed
  :defer t
  :ensure nil
  ;; :bind
  ;; (
  ;;  :map elfeed-search-mode-map
  ;;  ("A" . bjm/elfeed-show-all)
  ;;  ("E" . bjm/elfeed-show-emacs)
  ;;  ("D" . bjm/elfeed-show-daily)
  ;;  ("q" . bjm/elfeed-save-db-and-bury)
  ;;  )
  :custom((elfeed-use-curl t)
          (elfeed-db-directory "~/Downloads/elfeed/")
          (elfeed-curl-timeout 20)
          )
  )

;; elfeed-dashboard
(use-package elfeed-dashboard
  :ensure nil
  :after elfeed
  )

;;elfeed-org
(use-package elfeed-org
  :ensure nil
  :defer t
  ;; :after elfeed
  ;; :hook (elfeed-dashboard-mode . elfeed-org)
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files
        (list (expand-file-name "assets/elfeed.org" user-emacs-directory)))
  )
;; }}}
#+end_src

** shrface                                                           :FIXME:

#+begin_src emacs-lisp
;; shrface eww nov
;; {{{
(use-package shrface
  :defer t
  :hook (eww-after-render-hook . shrface-mode)
  :config
  (shrface-basic)
  (shrface-trial)
  (shrface-default-keybindings) ; setup default keybindings
  (setq shrface-href-versatile t)
  )
;; }}}
#+end_src

** 电子书 EPUB: nov

#+begin_src emacs-lisp :tangle no
(use-package nov
  :defer t
  :hook (nov-mode . shrface-mode)
  :mode ("\\.[eE][pP][uU][bB]\\'" . nov-mode)
  :config
  (
   ;; (setq nov-text-width 80)
   (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
   (add-to-list 'auto-mode-alist '("\\.epub$" . nov-mode))
   (require 'shrface)
   (setq nov-shr-rendering-functions '(
                                       (img . nov-render-img)
                                       (title . nov-render-title)))
   (setq nov-shr-rendering-functions
         (append nov-shr-rendering-functions
                 shr-external-rendering-functions))
   )
  )
#+end_src

** PDF

#+begin_src emacs-lisp :tangle no
;; ;; pdf-tools
;; ;; {{{
;; ;; https://github.com/furkanusta/dotfiles/blob/master/emacs/dot-emacs.d/elisp/usta-uncategorized.el
;; (use-package pdf-tools
;;   :ensure nil
;;   ;; :magic ("%PDF" . pdf-view-mode)
;;   :mode ("\\.[pP][dD][fF]\\'" . pdf-view-mode)
;;   ;; :hook (
;;     ;; (pdf-view-mode . disable-line-numbers)
;;          ;; (pdf-view-mode . pdf-sync-minor-mode)
;;          ;; (pdf-view-mode . pdf-links-minor-mode)
;;          ;; (pdf-view-mode . pdf-history-minor-mode)
;;          ;; (pdf-view-mode . pdf-annot-minor-mode)
;;          ;; (pdf-view-mode . pdf-view-themed-minor-mode)
;;     ;; )
;;   :custom
;;   (pdf-view-display-size 'fit-page)
;;   ;; (pdf-annot-activate-created-annotations nil)
;;   (pdf-view-resize-factor 1.1)
;;   :bind (:map pdf-view-mode-map
;;          ("M-w" . pdf-view-kill-ring-save)
;;               ("o" . pdf-outline)
;;               ("O" . pdf-occur)
;;               ("M-g M-g" . pdf-view-goto-page)
;;               ("S-SPC" . pdf-view-scroll-down-or-previous-page)
;;          ("<double-wheel-down>" .  pdf-view-next-line-or-next-page)
;;          ("<triple-wheel-down>" .  pdf-view-next-line-or-next-page)
;;          ("j" . pdf-view-next-line-or-next-page)
;;          ("k" . pdf-view-previous-line-or-previous-page)
;;          ("J" . forward-page)
;;          ("K" . backward-page)
;;          ("=" . pdf-view-enlarge)
;;          ("-" . pdf-view-shrink)
;;          ("w" . pdf-view-fit-width-to-window)
;;          ("h" . pdf-view-fit-height-to-window)
;;          ("p" . pdf-view-fit-page-to-window)
;;          ("/" . isearch-forward)
;;     )
;;   )

;; ;; (keymap-set pdf-view-mode "<double-wheel-down>"  #'pdf-view-next-line-or-next-page)
;; ;; (keymap-set pdf-view-mode "<triple-wheel-down>"  #'pdf-view-next-line-or-next-page)
;; ;; }}}
#+end_src

** 速读 speed-reading

https://github.com/zk-phi/spray

#+begin_src emacs-lisp :tangle no
(use-package spray
  :ensure nil
  :defer 110
  :config ;; executed after loading package
  :bind (:map my-map ("s" . spray-mode))
  )
#+end_src

* UI
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       547CC50E-FDE2-40D9-A752-8273F8D60E35
:END:

** nyan-mode

#+begin_src emacs-lisp
(use-package nyan-mode
  :ensure nil
  :defer 3
  :hook (parrot-mode . nyan-mode)
  :config
  (setq nyan-animate-nyancat t
        nyan-wavy-trail t)
  )
#+end_src

** auto-dark

主题跟随系统 UI

#+begin_src emacs-lisp
;; auto-dark
;; {{{
(use-package auto-dark
  :ensure nil
  :defer 3
  :if (display-graphic-p)
  ;; :init (auto-dark-mode t)
  ;; :hook (after-init . auto-dark-mode)
  :config
  (setq auto-dark-allow-osascript t
        auto-dark-dark-theme 'solarized-dark)
  )
;; }}}
#+end_src

** zoom-to-point :Git:
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       489B39A2-E28E-4DDC-9D81-469C8148BE88
:END:

#+begin_src emacs-lisp :tangle no
;; https://github.com/rmloveland/zoom-to-point

(defvar *default-zoom-level* 3
  "Defines how much the `zoom-toggle' command will increase the text scale.")

;; This variable is buffer-local, and isn't always initialized; this
;; causes an error.  We initialize it here to avoid causing errors.
;; So far it's worked well.
(setq text-scale-mode-amount 0)

(defun zoom-toggle ()
  "Zoom in or out on the line at point.
More precisely, increase or decrease the size of the text by the
amount defined in `*default-zoom-level*', and centers that line
in the window."
  (interactive)
  (if (zoom--zoomed-p)
      (zoom--unzoom)
    (zoom--zoom-to-point)))

(defun zoom--do (thunk)
  "Call THUNK, and then recenter point."
  (save-excursion
    (funcall thunk)
    (recenter)))

(defun zoom--zoom-to-point ()
  "Zoom in on point."
  (zoom--do (lambda ()
              (text-scale-increase *default-zoom-level*))))

(defun zoom--unzoom ()
  "Zoom out from point and return to the default text scale."
  (zoom--do (lambda ()
              (text-scale-set 0))))

(defun zoom--zoomed-p ()
  "Is the buffer text larger than the default?"
  (if (= text-scale-mode-amount 0)
      nil
    t))
#+end_src

* 图表图像 diagram & image
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       6B8BFE51-5F0D-44D2-A83D-7136B7174630
:END:

** Graphviz

#+begin_src emacs-lisp
;; graphviz-dot-mode
;; {{{
(use-package graphviz-dot-mode
  :ensure nil
  :defer t
  ;; :bind
  ;; ()
  :config
  (setq graphviz-dot-indent-width 4)
  (setq graphviz-dot-preview-extension "svg")
  )
;; }}}
#+end_src

** PlantUML

#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook (lambda ()
                           (require 'plantuml)))
(with-eval-after-load 'plantuml
  (setq plantuml-jar-path
        (concat
         (string-trim
          (shell-command-to-string "readlink -f $(brew --prefix plantuml)"))
         "/libexec/plantuml.jar")))
#+end_src

** D2 :Git:

#+begin_src emacs-lisp
(use-package d2-mode
  :ensure nil
  :defer t
  ;; :bind
  ;; (
  ;;  :map d2-mode-map
  ;;  )
  )
#+end_src

#+begin_src emacs-lisp :tangle no
;; D2 Mode
;; {{{
(add-to-list 'auto-mode-alist '("\\.d2" . d2-mode))
(defvar d2-mode-map
  (let ((map (make-sparse-keymap)))
    (keymap-set map "C-c C-c" #'d2-compile)
    (keymap-set map "C-c C-f" #'d2-compile-file)
    (keymap-set map "C-c C-b" #'d2-compile-buffer)
    (keymap-set map "C-c C-r" #'d2-compile-region)
    (keymap-set map "C-c C-h" #'d2-compile-file-and-browse)
    (keymap-set map "C-c C-j" #'d2-compile-buffer-and-browse)
    (keymap-set map "C-c C-k" #'d2-compile-region-and-browse)
    (keymap-set map "C-c C-o" #'d2-open-browser)
    (keymap-set map "C-x C-o" #'d2-view-current-svg)
    (keymap-set map "C-c C-d" #'d2-open-doc)
    map))
;; (org-babel-do-load-languages
;;     'org-babel-load-languages
;;     '(
;;       ;; (mermaid . t)
;;       (scheme . t)
;;       (d2 . t)))
;; }}}
#+end_src

** frameshot

** screenshot :Git:

Doesn't work on macOS: =(void-function x-export-frames)=

#+begin_src emacs-lisp :tangle no
(use-package d2-mode
  :ensure nil
  :defer t
  ;; :bind
  ;; (
  ;;  :map d2-mode-map
  ;;  )
  )
#+end_src

#+begin_src emacs-lisp :tangle no
(use-package screenshot
  :ensure nil
  :defer t
  :screenshot
  (commands)
  :hook
  ((screenshot-buffer-creation-hook . my/screenshot-on-buffer-creation))
  :config
  (setq screenshot-line-numbers-p nil)
  (setq screenshot-min-width 80)
  (setq screenshot-max-width 80)
  (setq screenshot-truncate-lines-p nil)
  (setq screenshot-text-only-p nil)
  (setq screenshot-font-family "SF Mono")
  (setq screenshot-font-size 10)
  (setq screenshot-border-width 16)
  (setq screenshot-radius 0)
  (setq screenshot-shadow-radius 0)
  (setq screenshot-shadow-offset-horizontal 0)
  (setq screenshot-shadow-offset-vertical 0)

  (defun my/screenshot-on-buffer-creation ()
    (setq display-fill-column-indicator-column nil)
    (setq line-spacing nil))
  )
#+end_src

** image-roll :Git:

#+begin_src emacs-lisp
;; image-roll
;; {{{
(use-package image-roll
  :defer t
  :ensure nil
  )
;; }}}
#+end_src

* 地图 map
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       5DD9E9A7-1FD6-4845-BEA4-D728C4123C14
:END:

#+begin_src emacs-lisp
;; osm: OpenStreetMap
;; {{{
(use-package osm
  :defer t
  ;; :after org
  :init
  ;; Load Org link support
  ;; (with-eval-after-load 'org
  ;;   (require 'osm-ol))
  :bind (
         ("C-c m h" . osm-home)
         ("C-c m s" . osm-search)
         ("C-c m v" . osm-server)
         ("C-c m t" . osm-goto)
         ("C-c m x" . osm-gpx-show)
         ("C-c m j" . osm-bookmark-jump)
         :map osm-mode-map
         ("q" . (lambda () (interactive) (quit-window t)))
         )
  :custom
  ;; Take a look at the customization group `osm' for more options.
  (osm-server 'default) ;; Configure the tile server
  (osm-copyright t)     ;; Display the copyright information
  )
;; }}}
#+end_src

* 影音 video & audio
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       0257E57A-47B9-4187-A56A-197C48FED858
:END:

** empv: 视频播放控制

#+begin_src emacs-lisp
(use-package empv
  :ensure nil
  :demand t
  :defer t
  )
#+end_src
** 音乐播放器: netease-cloud-music :Git:

#+begin_src emacs－lisp :tangle no
(require 'netease-cloud-music)
(require 'netease-cloud-music-ui) ; TUI
(require 'netease-cloud-music-comment)
#+end_src

* STT
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       1A8B6CE5-87EC-48FF-90E9-764B88FA504E
:END:

* 字幕※歌词 Subtitle & Lyric
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       1A1F64A5-F496-4649-B7FD-E298E538D2AC
:END:

** subed :Git:

#+begin_src emacs-lisp
;; subed: subtitle edit
;; {{{
(use-package subed
  :defer t
  :ensure nil
  :config
  ;; Disable automatic movement of point by default
  (add-hook 'subed-mode-hook 'subed-disable-sync-point-to-player)
  ;; Remember cursor position between sessions
  (add-hook 'subed-mode-hook 'save-place-local-mode)
  ;; Break lines automatically while typing
  (add-hook 'subed-mode-hook 'turn-on-auto-fill)
  ;; Break lines at 40 characters
  (add-hook 'subed-mode-hook (lambda () (setq-local fill-column 40))))
;; }}}
#+end_src

* 阅读
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       E7520EEE-CDE8-40EC-BF29-7AD58DB7FB8B
:END:
** mybigword

#+begin_src emacs-lisp
;; mybigword
;; {{{
(use-package mybigword
  :defer t
  :config
  (setq mybigword-excluded-words
        (split-string (with-temp-buffer
                        (insert-file-contents  (expand-file-name
                                                "assets/mybigword.txt"
                                                (concat user-emacs-directory)
                                                ))
                        (buffer-string)) "[\r\n]+"))
  )
;; mybigword-excluded-words
;; mybigword-personal-excluded-words
;; mybigword-upper-limit
;; }}}
#+end_src

** olivetti

#+begin_src emacs-lisp
(use-package
  olivetti
  :hook
  (
   (after-init . olivetti-mode)
   ;; (window-configuration-change . my/toggle-olivetti-for-org)
   )
  :bind ("H-v H-v" . olivetti-mode)
  :init
  (setq olivetti-body-width 90) ; default: fill-column+2

  ;; https://emacs-china.org/t/emacs/19797/4
  (defun my/toggle-olivetti-for-org ()
    "if current buffer is org and only one visible buffer
  enable olivetti mode"
    (interactive)
    (if (and (eq (buffer-local-value 'major-mode (current-buffer)) 'org-mode)
             (or (eq (length (window-list nil nil nil)) 1)
                 (window-at-side-p (frame-first-window) 'right))) ;; frame-first-window 的 mode 是 org-mode 并且没有右边 window
        (olivetti-mode 1)
      (olivetti-mode 0)
      (when (eq (buffer-local-value 'major-mode (current-buffer)) 'org-mode)
        (visual-line-mode 1)))))
#+end_src

** dictionary-overlay :Git:

** nov-xwidget :Git:

#+begin_src emacs-lisp
(use-package nov-xwidget
  :ensure nil
  :demand t
  :after nov
  :config
  (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
  (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files))
#+end_src

* TTS
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       BE3C7815-E778-4DBA-8139-500EF6C0B379
:END:

* 待整理
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle no
:ID:       51F8CE43-0A62-426B-91B0-1014D0D3E151
:END:

** crux

[[https://github.com/bbatsov/crux][bbatsov/crux: A Collection of Ridiculously Useful eXtensions for Emacs]]

** with-editor                                                       :FIXME:

#+begin_center
crontab: editor or filename too long
crontab: "/Applications/Emacs.app/Contents/MacOS/bin/emacsclient --socket-name=/var/folders/zs/ppvpcc991fx4bfvz1gy420wc0000gn/T/emacs501/server" exited with status 1
#+end_center

#+begin_src emacs-lisp
(use-package with-editor
  :ensure nil
  :defer t
  :init
  (defun my/edit-crontab ()
    (interactive)
    (let ((buf (get-buffer-create "*crontab*")))
      (with-editor-async-shell-command "crontab -e"
                                       buf buf)))
  (setq display-buffer-alist
        '(("\\*crontab\\*" .  (display-buffer-no-window . nil))))
  )
#+end_src

** ekg: super tag

[[https://github.com/ahyatt/ekg][ahyatt/ekg: The emacs knowledge graph, app for notes and structured data.]]

substitute of org-roam/denote

* File End
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle (concat user-emacs-directory "/site-lisp/my-package.el")
:ID:       667207FE-A62F-483D-B7D0-5673EB7911DF
:END:

#+begin_src emacs-lisp
;; 2023-02-09T02:34:54+0800

(provide 'my-package)

;;; my-package.el ends here.
#+end_src

* Misc
:PROPERTIES:
:header-args: emacs-lisp :comments link :tangle no
:ID:       FF39F596-5CDD-4779-9157-A14EE63CC0AD
:END:
